openapi: 3.0.1
info:
  title: Kntrl configuration API
  version: 0.10.0
  x-logo:
    url: ./logo.png
tags:
- name: config
  x-displayName:
  - Configuration API
paths:
  /kntrl.json5:
    get:
      tags:
      - config
      summary: Configuration file
      description: |
        This file will be loaded/created in working dir by server after start.
        Also `kntrl.schema.json` file with json-schema will be created near this file -
        use it to enable autocompletion in your IDE.
      operationId: cfg
      responses:
        default:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShAppCfg'
        "4XX":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
        "5XX":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
      security:
      - access-token: []
      x-order: 1
components:
  schemas:
    Err:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      discriminator:
        propertyName: code
        mapping:
          PLUGIN_ERR: '#/components/schemas/PluginErr'
          INCORRECT_TOTP_CODE: '#/components/schemas/IncorrectTotpCode'
          OAUTH_APP_ERR: '#/components/schemas/OauthAppErr'
          PLUGIN_CLIENT_ERR: '#/components/schemas/PluginClientErr'
          PASSWORD_IS_INCORRECT: '#/components/schemas/PasswordIsIncorrect'
          PASSWORD_IS_INVALID: '#/components/schemas/PasswordIsInvalid'
          EMAIL_IS_INCORRECT: '#/components/schemas/EmailIsIncorrect'
          IP_NEW: '#/components/schemas/IpNew'
          QUESTIONS_ANSWERS_INCORRECT: '#/components/schemas/QuestionsAnswersIncorrect'
          QUESTIONS_ANSWERS_INVALID: '#/components/schemas/QuestionsAnswersInvalid'
          SESSION_EXPIRED: '#/components/schemas/SessionExpired'
          ACCESS_DENIED: '#/components/schemas/AccessDenied'
          USER_NOT_FOUND: '#/components/schemas/UserNotFound'
          USER_LOGIN_IS_INVALID: '#/components/schemas/UserLoginIsInvalid'
          USER_LOGIN_ALREADY_TAKEN: '#/components/schemas/UserLoginAlreadyTaken'
          TOKEN_EXPIRED: '#/components/schemas/TokenExpired'
          TOO_MANY_REQS: '#/components/schemas/TooManyReqs'
          AUTH_IS_NOT_ENABLED: '#/components/schemas/AuthIsNotEnabled'
          AUTH_IS_NOT_CONFIRMED: '#/components/schemas/AuthIsNotConfirmed'
          NO_AUTH_AVAILABLE_FOR_FACTOR: '#/components/schemas/NoAuthAvailableForFactor'
          AUTH_REQUIRES_ANOTHER: '#/components/schemas/AuthRequiresAnother'
          CODE_IS_EXPIRED: '#/components/schemas/CodeIsExpired'
          CODE_TOO_MANY_ATTEMPTS: '#/components/schemas/CodeTooManyAttempts'
          CODE_IS_INCORRECT: '#/components/schemas/CodeIsIncorrect'
          UNAUTHENTICATED: '#/components/schemas/Unauthenticated'
          SERVER_ERR: '#/components/schemas/ServerErr'
          INTEGRATION_ERR: '#/components/schemas/IntegrationErr'
          ANY_ERR: '#/components/schemas/AnyErr'
      x-order: 2025349183-0
      x-sealed: false
      example: null
    AccessDenied:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -2065236468-1
      x-super: '#/components/schemas/Unauthenticated'
      example: null
    AnswerErr:
      required:
      - tooLong
      - tooShort
      type: object
      properties:
        tooShort:
          type: boolean
          example: null
        tooLong:
          type: boolean
          example: null
      x-order: -1279700867-9
      example: null
    AnyErr:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      additionalProperties: true
      x-order: 2025349183-5
      x-super: '#/components/schemas/Err'
      example: null
    AuthIsNotConfirmed:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -270554383-3
      x-super: '#/components/schemas/ClientErr'
      example: null
    AuthIsNotEnabled:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -270554383-2
      x-super: '#/components/schemas/ClientErr'
      example: null
    AuthRequiresAnother:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -270554383-5
      x-super: '#/components/schemas/ClientErr'
      example: null
    ClientErr:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      discriminator:
        propertyName: code
        mapping:
          INCORRECT_TOTP_CODE: '#/components/schemas/IncorrectTotpCode'
          OAUTH_APP_ERR: '#/components/schemas/OauthAppErr'
          PLUGIN_CLIENT_ERR: '#/components/schemas/PluginClientErr'
          PASSWORD_IS_INCORRECT: '#/components/schemas/PasswordIsIncorrect'
          PASSWORD_IS_INVALID: '#/components/schemas/PasswordIsInvalid'
          EMAIL_IS_INCORRECT: '#/components/schemas/EmailIsIncorrect'
          IP_NEW: '#/components/schemas/IpNew'
          QUESTIONS_ANSWERS_INCORRECT: '#/components/schemas/QuestionsAnswersIncorrect'
          QUESTIONS_ANSWERS_INVALID: '#/components/schemas/QuestionsAnswersInvalid'
          SESSION_EXPIRED: '#/components/schemas/SessionExpired'
          ACCESS_DENIED: '#/components/schemas/AccessDenied'
          USER_NOT_FOUND: '#/components/schemas/UserNotFound'
          USER_LOGIN_IS_INVALID: '#/components/schemas/UserLoginIsInvalid'
          USER_LOGIN_ALREADY_TAKEN: '#/components/schemas/UserLoginAlreadyTaken'
          TOKEN_EXPIRED: '#/components/schemas/TokenExpired'
          TOO_MANY_REQS: '#/components/schemas/TooManyReqs'
          AUTH_IS_NOT_ENABLED: '#/components/schemas/AuthIsNotEnabled'
          AUTH_IS_NOT_CONFIRMED: '#/components/schemas/AuthIsNotConfirmed'
          AUTH_REQUIRES_ANOTHER: '#/components/schemas/AuthRequiresAnother'
          CODE_IS_EXPIRED: '#/components/schemas/CodeIsExpired'
          CODE_TOO_MANY_ATTEMPTS: '#/components/schemas/CodeTooManyAttempts'
          CODE_IS_INCORRECT: '#/components/schemas/CodeIsIncorrect'
          UNAUTHENTICATED: '#/components/schemas/Unauthenticated'
      x-order: 2025349183-4
      x-sealed: false
      x-super: '#/components/schemas/Err'
      example: null
    CodeIsExpired:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -270554383-6
      x-super: '#/components/schemas/ClientErr'
      example: null
    CodeIsIncorrect:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -270554383-8
      x-super: '#/components/schemas/ClientErr'
      example: null
    CodeTooManyAttempts:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -270554383-7
      x-super: '#/components/schemas/ClientErr'
      example: null
    EmailIsIncorrect:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -1279700867-5
      x-super: '#/components/schemas/ClientErr'
      example: null
    IncorrectTotpCode:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -1279700867-10
      x-super: '#/components/schemas/ClientErr'
      example: null
    Instant:
      type: integer
      format: int64
    IntegrationErr:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      discriminator:
        propertyName: code
        mapping:
          NO_AUTH_AVAILABLE_FOR_FACTOR: '#/components/schemas/NoAuthAvailableForFactor'
          INTEGRATION_ERR: '#/components/schemas/IntegrationErr'
      x-order: 2025349183-3
      x-sealed: false
      x-super: '#/components/schemas/Err'
      example: null
    IpNew:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -1279700867-6
      x-super: '#/components/schemas/ClientErr'
      example: null
    LoginId:
      required:
      - login
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            Type of login
          example: email
        login:
          type: string
          description: |
            User unique identifier, email, username, etc. User can use it to sign-in.
          example: john@example.org
      x-order: -2010674509-2
      example: null
    NoAuthAvailableForFactor:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -270554383-4
      x-super: '#/components/schemas/IntegrationErr'
      example: null
    OauthAppErr:
      required:
      - code
      - devMsg
      - incorrectRedirectUri
      - incorrectSecret
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
        incorrectRedirectUri:
          type: boolean
          example: null
        incorrectSecret:
          type: boolean
          example: null
      x-order: -1279700867-11
      x-super: '#/components/schemas/ClientErr'
      example: null
    PasswordIsIncorrect:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
        changedAt:
          type: integer
          format: int64
          x-nullable: true
          example: null
        changedDaysAgo:
          type: integer
          format: int64
          x-nullable: true
          example: null
      x-order: -1279700867-3
      x-super: '#/components/schemas/ClientErr'
      example: null
    PasswordIsInvalid:
      required:
      - code
      - commonPassword
      - devMsg
      - missingLowerCase
      - missingNumber
      - missingSymbol
      - missingUpperCase
      - passwordsMismatch
      - tooLong
      - tooShort
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
        tooLong:
          type: boolean
          example: null
        tooShort:
          type: boolean
          example: null
        missingNumber:
          type: boolean
          example: null
        missingSymbol:
          type: boolean
          example: null
        missingUpperCase:
          type: boolean
          example: null
        missingLowerCase:
          type: boolean
          example: null
        commonPassword:
          type: boolean
          example: null
        wasUsedBeforeAt:
          type: integer
          format: int64
          x-nullable: true
          example: null
        matchesLogin:
          $ref: '#/components/schemas/LoginId'
        passwordsMismatch:
          type: boolean
          example: null
        strength:
          type: string
          x-nullable: true
          example: null
        wasUsedDaysAgo:
          type: integer
          format: int64
          example: null
      x-order: -1279700867-4
      x-super: '#/components/schemas/ClientErr'
      example: null
    PluginClientErr:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      additionalProperties: true
      x-order: -1279700867-2
      x-super: '#/components/schemas/ClientErr'
      example: null
    PluginErr:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -1279700867-1
      x-super: '#/components/schemas/ServerErr'
      example: null
    QuestionsAnswersIncorrect:
      required:
      - code
      - devMsg
      - incorrectAnswers
      - questionsNotFound
      - requiresMoreAnswers
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
        incorrectAnswers:
          type: array
          items:
            type: string
          example: null
        requiresMoreAnswers:
          type: boolean
          example: null
        questionsNotFound:
          type: array
          items:
            type: string
          example: null
      x-order: -1279700867-7
      x-super: '#/components/schemas/ClientErr'
      example: null
    QuestionsAnswersInvalid:
      required:
      - code
      - devMsg
      - invalidAnswers
      - tooManyAnswers
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
        invalidAnswers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnswerErr'
          example: null
        tooManyAnswers:
          type: boolean
          example: null
      x-order: -1279700867-8
      x-super: '#/components/schemas/ClientErr'
      example: null
    ServerErr:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      discriminator:
        propertyName: code
        mapping:
          SERVER_ERR: '#/components/schemas/ServerErr'
          PLUGIN_ERR: '#/components/schemas/PluginErr'
      x-order: 2025349183-2
      x-sealed: false
      x-super: '#/components/schemas/Err'
      example: null
    SessionExpired:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -2065236468-0
      x-super: '#/components/schemas/Unauthenticated'
      example: null
    TokenExpired:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
        expiredAt:
          type: integer
          description: |-
            Token expiration time. If null, token is incorrect (due to incorrect format or invalid signature).
            May be caused by changed app-secret.
          format: int64
          x-nullable: true
          example: null
      x-order: -270554383-11
      x-super: '#/components/schemas/Unauthenticated'
      example: null
    TooManyReqs:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
        waitTimeMs:
          type: integer
          format: int32
          x-nullable: true
          example: null
        waitTimeSeconds:
          type: integer
          format: int32
          x-nullable: true
          example: null
        waitTimeMinutes:
          type: integer
          format: int32
          x-nullable: true
          example: null
      x-order: -270554383-12
      x-super: '#/components/schemas/ClientErr'
      example: null
    Unauthenticated:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      discriminator:
        propertyName: code
        mapping:
          SESSION_EXPIRED: '#/components/schemas/SessionExpired'
          ACCESS_DENIED: '#/components/schemas/AccessDenied'
          USER_NOT_FOUND: '#/components/schemas/UserNotFound'
          TOKEN_EXPIRED: '#/components/schemas/TokenExpired'
          UNAUTHENTICATED: '#/components/schemas/Unauthenticated'
      x-order: -270554383-9
      x-sealed: false
      x-super: '#/components/schemas/ClientErr'
      example: null
    UserLoginAlreadyTaken:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -270554383-1
      x-super: '#/components/schemas/ClientErr'
      example: null
    UserLoginIsInvalid:
      required:
      - code
      - devMsg
      - loginId
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
        loginId:
          $ref: '#/components/schemas/LoginId'
      x-order: -270554383-0
      x-super: '#/components/schemas/ClientErr'
      example: null
    UserNotFound:
      required:
      - code
      - devMsg
      type: object
      properties:
        code:
          type: string
          example: null
        devMsg:
          type: string
          description: Message for developers.
          example: null
        msg:
          type: string
          description: Localised message suitable for UI.
          x-nullable: true
          example: null
      x-order: -2065236468-2
      x-super: '#/components/schemas/Unauthenticated'
      example: null
    AccessTokenCfg:
      type: object
      properties:
        cookie:
          type: boolean
          description: Send token in `access_token` cookie
          default: false
          example: null
        cache:
          type: string
          description: |-
            If not null - access token contains signed session data, so it's not required to request session database for
            access check.
          enum:
          - JWT
          - BINARY
          x-nullable: true
          x-super: '#/components/schemas/Cache'
          example: null
        cacheUnauthenticated:
          type: boolean
          description: "By default, unauthenticated sessions can't be cached."
          default: false
          example: null
        ttl:
          type: string
          description: |
            Lifetime for access token. 1d, 30m, etc.
          example: 1d
          default: 1d
      description: Short-living token used for authentication.
      x-order: -1195634750-1
      example: null
    AnswersTransformationCfg:
      type: object
      properties:
        lowercase:
          type: boolean
          description: |-
            Transform user answer to lowercase letters. This allows user still pass a check when he wrote name or city
            with different cases. `false` means strict match, so "John" != "john"
          default: true
          example: null
        removeSymbols:
          type: boolean
          description: Remove all non-letters from user answer.
          default: true
          example: null
        removeSpaces:
          type: boolean
          description: Remove all spaces from user answer.
          default: true
          example: null
      x-order: 545691127-1
      example: null
    AppSecretAuthCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
      x-order: 791325901-3
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    AuthAppCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
      description: Authentication implementation config
      x-order: 377338786-0
      example: null
    AuthorizationCodeAuthCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
        codeTtl:
          type: string
          description: |
            Authorization code lifetime.
          default: 10m
          example: null
        scopes:
          type: array
          description: Allowed oauth2 scopes.
          items:
            type: string
          example: null
      x-order: -1836982696-3
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    BuiltInAuthCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
      description: Authentication implementation config
      x-order: -824080721-0
      x-super: '#/components/schemas/AuthAppCfg'
      example: null
    Cache:
      type: string
      enum:
      - JWT
      - BINARY
    CodeCfg:
      type: object
      properties:
        length:
          type: integer
          description: Length of code to be generated
          format: int32
          default: 4
          example: null
        ttl:
          type: string
          description: "Generated code lifetime. e.g. 1m, 60s, 1d, etc."
          example: null
        alphabet:
          type: string
          description: Symbols used to generate a code. By default `a-z + A-Z + 0-9`.
          example: null
        easyToRemember:
          type: boolean
          description: "If true, every second letter will be the same, that allows\
            \ the codes to rhyme."
          default: true
          example: null
        maxAttempts:
          type: integer
          description: Max attempts to enter the code.
          format: int32
          default: 3
          example: null
      description: If specified - app generates code and requires auth to be confirmed
      x-order: 377338786-1
      example: null
    DbCfg:
      type: object
      x-order: -195398693-0
      example: null
    Duration:
      type: string
    EmailAuthCfg:
      required:
      - sender
      - server
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
        server:
          type: string
          description: Email server address/IP.
          example: null
        sender:
          type: string
          description: Email address of sender.
          example: null
        username:
          type: string
          description: SMTP username.
          x-nullable: true
          example: null
        password:
          type: string
          description: SMTP password.
          x-nullable: true
          example: null
        confirmationUrl:
          type: string
          description: |-
            If not null, server will create template param `confirmationUrl` that will contain query parameters with
            confirmation code, session id, etc.
          x-nullable: true
          example: null
        templates:
          type: object
          additionalProperties:
            type: string
            x-additionalPropertiesName: templateName
          description: |+
            List of email templates. Key - is name of a template (can be used lately on frontend), value - is path to the template.
            App uses handlebars templates to generate emails. See docs here https://handlebarsjs.com

            Email templates receives `confirmationUrl`, `action`, `user`, `session`, `codeId`, `code`, `codeExpiresInMinutes`,
            `lang`, `headers` as template params, e.g. you can print user id as `{{user.id}}`.

            Template engine also provides `i18n` helper for localisation. E.g. `{{i18n 'confirmationButton' default='Confirm'}}`
            searches key `confirmationButton` in files specified by `i18n.dir` config.

            Use `{{err ERR_CODE msg='Localised message (if null, will be taken from i18n file)' devMsg='dev message'}}` to
            raise an error in a template.

            It allows setting subject of email using `title` html tag, e.g. `<title>Email subject</title>`.

          example:
            welcome: ./welcome.html.hbs
            restoreAccess: ./restore.html.hbs
        templateParams:
          type: object
          additionalProperties:
            type: object
            x-additionalPropertiesName: paramName
          description: |
            Additional params for templates that can be passed in request. Key - is a name of additional parameter, value - is
            a default value for this parameter (when no value present in request)
          example: null
        code:
          $ref: '#/components/schemas/CodeCfg'
      x-order: -1025321515-0
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    EntryAccessTokenCfg:
      type: object
      properties:
        ttl:
          type: string
          description: Override access token ttl
          x-nullable: true
          example: null
        cache:
          type: boolean
          description: Enable or disable client-side caching of access token
          x-nullable: true
          example: null
      x-order: -842539141-1
      example: null
    EntryCfg:
      type: object
      properties:
        factorsRequired:
          type: object
          additionalProperties:
            type: array
            description: |
              List of auths that could be chosen for this factor.
            items:
              type: string
            x-additionalPropertiesName: factor
          description: |+
            Specifies factors that always required to be authenticated.

            Usually it's main auth method (e.g. password) + social login (e.g. facebook) +
            reserve auth option in case of lost/forgotten main auth credentials (e.g. secret questions or email auth).

            These factors are always required even when user hasn't enabled them explicitly.

          example:
            first:
            - password
            - facebook
            - email
        factorsOptional:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
            x-additionalPropertiesName: factor
          description: |
            This factors can be skipped if user hasn't enabled them. Used for optional 2FA.
            E.g. If user added mobile phone -> use it for 2FA otherwise skip 2FA.
          example:
            second:
            - sms
        requiresEntry:
          type: array
          description: |-
            Require user to be already signed in by one of the listed entries. Usually it used for action confirmation, e.g.
            "payment" that requires confirmation by sms, requires user to be already signed in (e.g. with entry "app".
          items:
            type: string
          example: null
        accessToken:
          type: object
          properties:
            ttl:
              type: string
              description: Override access token ttl
              x-nullable: true
              example: null
            cache:
              type: boolean
              description: Enable or disable client-side caching of access token
              x-nullable: true
              example: null
          description: Override access token lifetime for sessions of this entry.
          x-super: '#/components/schemas/EntryAccessTokenCfg'
          example: null
        ttl:
          type: string
          description: |
            Max lifetime of session.
          example: 3M
          x-nullable: true
        editAccount:
          type: boolean
          description: "Is this session allowed to add/remove new auth, enable/disable\
            \ factors, etc.?"
          default: false
          example: null
      description: Configuration for app entry.
      x-order: -842539141-0
      example: null
    ExchangeAuthCodeCfg:
      required:
      - tokenUrl
      type: object
      properties:
        tokenUrl:
          type: string
          description: |
            Url to get access token by authorisation code.
          example: https://example.org/token
        clientId:
          type: string
          description: "OAuth client id. Client must be registered on OAuth provider\
            \ (e.g. facebook, google)"
          x-nullable: true
          example: null
        clientSecret:
          type: string
          description: OAuth client secret.
          x-nullable: true
          example: null
      x-order: -1532051357-2
      example: null
    I18nCfg:
      type: object
      properties:
        dir:
          type: string
          description: |
            Directory when messages are stored. To support new language add `<lang>.json5` file. App will create helpful
            templates after start if dir is not null.
          example: ./i18n
          x-nullable: true
        default:
          type: string
          description: |
            Default language to use.
          example: en
          default: en
      description: "Configuration for localization of error messages, emails, etc."
      x-order: -1723799702-4
      example: null
    InMemoryCfg:
      type: object
      properties:
        inMemory:
          type: boolean
          default: true
          example: null
      x-order: 1129812999-3
      x-super: '#/components/schemas/DbCfg'
      example: null
    InTokenCfg:
      type: object
      properties:
        inToken:
          type: boolean
          default: true
          example: null
      x-order: -291817267-2
      x-super: '#/components/schemas/DbCfg'
      example: null
    IpAuthCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
        ipBytesToIgnore:
          type: integer
          description: |-
            This allows to drop last bytes of IP. So it allows to authenticate factor when ip has rough match, e.g.
            the same country, same city, or same internet provider.
          format: int32
          default: 0
          example: null
        historySize:
          type: integer
          description: |-
            History of IP addresses user used to sign-in. Authenticated when user attempts to sign in with one of stored
            IPs.
          format: int32
          default: 10
          example: null
      x-order: 2116983897-3
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    JdbcCfg:
      type: object
      properties:
        username:
          type: string
          default: ""
          example: null
        password:
          type: string
          default: ""
          example: null
        maxConnections:
          type: integer
          format: int32
          default: 500
          example: null
      x-order: -1497406623-0
      x-super: '#/components/schemas/DbCfg'
      example: null
    MongoCfg:
      required:
      - database
      - mongodb
      type: object
      properties:
        mongodb:
          type: string
          example: null
        database:
          type: string
          example: null
      x-order: -592385449-0
      x-super: '#/components/schemas/DbCfg'
      example: null
    MysqlCfg:
      type: object
      properties:
        mysql:
          type: string
          default: localhost:3306
          example: null
        username:
          type: string
          default: mysql
          example: null
        maxConnections:
          type: integer
          format: int32
          default: 500
          example: null
        password:
          type: string
          default: mysql
          example: null
      x-order: -577347408-2
      x-super: '#/components/schemas/JdbcCfg'
      example: null
    OAuthAppAuthCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
      x-order: -1247144074-1
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    OAuthCfg:
      required:
      - extractLogin
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
        exchangeAuthCode:
          required:
          - tokenUrl
          type: object
          properties:
            tokenUrl:
              type: string
              description: |
                Url to get access token by authorisation code.
              example: https://example.org/token
            clientId:
              type: string
              description: "OAuth client id. Client must be registered on OAuth provider\
                \ (e.g. facebook, google)"
              x-nullable: true
              example: null
            clientSecret:
              type: string
              description: OAuth client secret.
              x-nullable: true
              example: null
          description: |-
            If specified, app is able to handle authorizationCode from auth request; exchanges it for
            `access_token` or/and `id_token`
          x-nullable: true
          x-super: '#/components/schemas/ExchangeAuthCodeCfg'
          example: null
        userInfo:
          type: object
          properties:
            url:
              type: string
              description: |
                If access token provided in request, app tries to extract user id from user-info endpoint.
                If null, user info will be extracted from access token
              example: https://example.org/user-info
              x-nullable: true
            sendTokenInQuery:
              type: string
              description: "While executing user-info request, access-token will be\
                \ sent in query param."
              x-nullable: true
              example: null
            sendTokenInHeader:
              type: boolean
              description: "While executing user-info request, access-token will be\
                \ sent in Authorisation header."
              example: null
          description: "If specified, app will use received access token"
          x-nullable: true
          x-super: '#/components/schemas/TokenHandlerCfg'
          example: null
        extractLogin:
          type: string
          description: |
            Json path for login in the exchangeAuthCode or userInfo endpoint response.
            e.g. `access_token.user.id` extracts user login from `{ "access_token": { "user": { "id": "..." } } }`
          example: access_token.user_id
        extractPublicData:
          type: object
          additionalProperties:
            type: string
            x-additionalPropertiesName: public data key
          description: |
            Can fill public data from the exchangeAuthCode or userInfo endpoint response.
          example:
            'photoUrl:': access_token.user_photo_url
            name: access_token.full_name
      x-order: -1532051357-0
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    PasswordAuthCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
        maxLength:
          type: integer
          description: Max allowed Length of the password.
          format: int32
          default: 256
          example: null
        minLength:
          type: integer
          description: Minimal length of password
          format: int32
          default: 6
          example: null
        requireNumber:
          type: boolean
          description: Require password to contain at least one digit.
          default: false
          example: null
        requireSymbol:
          type: boolean
          description: "Require password to contain at least one symbol e.g. @, !,\
            \ &..."
          default: false
          example: null
        requireUpperCase:
          type: boolean
          description: This requires password to contain both lowercase and uppercase
            letters.
          default: false
          example: null
        forbidCommonPasswords:
          type: boolean
          description: "Password will be checked against table 1,000,000 of most overused\
            \ passwords."
          default: false
          example: null
        forbidLoginAsPassword:
          type: boolean
          description: "Rejects passwords that match username, email, anything that\
            \ used as a login according to logins config."
          default: false
          example: null
        forbidReusingPassword:
          $ref: '#/components/schemas/PasswordHistoryCfg'
        strength:
          type: object
          additionalProperties:
            x-additionalPropertiesName: PASSWORD_STRENGTH
            $ref: '#/components/schemas/PasswordStrengthRequirements'
          description: |
            Allows to calculate password strength based on mentioned criteria. Requirements will be checked one by one
            until first failed.
          example: null
      description: "Password authentication. To enable this auth set auth name to\
        \ \"password\" or use \"builtin\": \"password\" param."
      x-order: -49430021-0
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    PasswordHistoryCfg:
      type: object
      properties:
        passwordHistorySize:
          type: integer
          description: Number of current user passwords to store in database.
          format: int32
          default: 3
          example: null
        passwordHistoryTtl:
          type: string
          description: "Lifetime for the password. Accepts time string e.g. 1y, 3m,\
            \ 2y 6m, etc."
          example: null
      description: Forbids user to change password to the old one. Useful if you force
        user to change password regularly.
      x-order: 378192899-2
      example: null
    PasswordStrengthRequirements:
      type: object
      properties:
        minLength:
          type: integer
          description: Minimal length of password
          format: int32
          default: 6
          example: null
        requireNumber:
          type: boolean
          description: Require password to contain at least one digit.
          default: false
          example: null
        requireSymbol:
          type: boolean
          description: "Require password to contain at least one symbol e.g. @, !,\
            \ &..."
          default: false
          example: null
        requireUpperCase:
          type: boolean
          description: This requires password to contain both lowercase and uppercase
            letters.
          default: false
          example: null
        forbidCommonPasswords:
          type: boolean
          description: "Password will be checked against table 1,000,000 of most overused\
            \ passwords."
          default: false
          example: null
        forbidLoginAsPassword:
          type: boolean
          description: "Rejects passwords that match username, email, anything that\
            \ used as a login according to logins config."
          default: false
          example: null
      description: Requirements for password
      x-order: -49430021-1
      example: null
    PostgresCfg:
      type: object
      properties:
        postgres:
          type: string
          default: localhost:5432/
          example: null
        username:
          type: string
          default: postgres
          example: null
        maxConnections:
          type: integer
          format: int32
          default: 500
          example: null
        password:
          type: string
          default: postgres
          example: null
      x-order: 893841315-2
      x-super: '#/components/schemas/JdbcCfg'
      example: null
    QuestionsAuthCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
        lowercase:
          type: boolean
          description: |-
            Transform user answer to lowercase letters. This allows user still pass a check when he wrote name or city
            with different cases. `false` means strict match, so "John" != "john"
          default: true
          example: null
        removeSymbols:
          type: boolean
          description: Remove all non-letters from user answer.
          default: true
          example: null
        removeSpaces:
          type: boolean
          description: Remove all spaces from user answer.
          default: true
          example: null
        minLength:
          type: integer
          description: Min length of answer. Length are checked after all answer transformation.
          format: int32
          default: 3
          example: null
        maxLength:
          type: integer
          description: Max length of answer.
          format: int32
          default: 256
          example: null
        answersRequired:
          type: integer
          description: Min number of answers required to pass this check.
          format: int32
          default: 2
          example: null
        maxAnswers:
          type: integer
          description: Max answers that user can save.
          format: int32
          default: 10
          example: null
      x-order: 545691127-0
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    RateLimiterCfg:
      type: object
      properties:
        userId:
          type: boolean
          description: Create different rate limiters for different users.
          default: true
          example: null
        ip:
          type: boolean
          description: Create different rate limiters for different ips.
          default: false
          example: null
        quota:
          type: number
          description: |-
            Total quota available for time period. Quota means "weight" of a request. So quota 1.0 and period 1s
            allows 10 request with weight 0.1 per seconds or 5 request with weight 0.2 per second.
          format: double
          default: 1.0
          example: null
        period:
          type: string
          description: |
            Quota restoring period
          example: 30s
        alignLoad:
          type: boolean
          description: Insert delays between requests if there are too many simultaneous
            requests.
          default: false
          example: null
        parent:
          type: string
          description: |-
            Allows to combine rate limiters. Let's say rt1 allows 10 reqs per seconds, and rt2 allows 20 reqs per minute.
            If the rt1 has the rt2 as a parent, that means that rt1 allows 10 reqs per seconds but not more than 20 per minute.
          x-nullable: true
          example: null
      description: Rate limiter configuration
      x-order: -1666811215-0
      example: null
    RedisCfg:
      type: object
      properties:
        redis:
          type: array
          items:
            type: string
          example: null
        cluster:
          type: boolean
          default: false
          example: null
        database:
          type: integer
          format: int32
          example: null
        user:
          type: string
          x-nullable: true
          example: null
        password:
          type: string
          x-nullable: true
          example: null
        ssl:
          type: boolean
          default: false
          example: null
        maxConnections:
          type: integer
          format: int32
          default: 100
          example: null
      x-order: -2007275575-0
      x-super: '#/components/schemas/DbCfg'
      example: null
    RefreshTokenCfg:
      type: object
      properties:
        ttl:
          type: string
          description: |
            Lifetime for refresh token. 10d, 3M, etc.
          example: 3M
          default: 15d
        maxTtl:
          type: string
          description: |
            Refresh token can be prolonged by refresh.
          example: 1Y
          default: 3M
        unauthenticatedTtl:
          type: string
          description: |
            Lifetime of token for unauthenticated session. Limits time that user has to sign in/up, restoring password etc.
          example: 1d
          default: 1h
        allowReuse:
          type: boolean
          description: If false - one refresh token can't be used twice. New refresh
            token will be provided by refresh API.
          default: false
          example: null
      description: |-
        Long-living token used for generation of new access token.
        This is optional. You can set longer access-token lifetime instead.
      x-order: -1195634750-5
      example: null
    RemoteAuthCfg:
      required:
      - remote
      type: object
      properties:
        remote:
          type: string
          description: Path to the API that implements plugin.
          example: null
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
        query:
          type: object
          additionalProperties:
            type: string
            x-additionalPropertiesName: queryParam
          description: |
            Add query params after `?` symbol in url.
          example: null
        headers:
          type: object
          additionalProperties:
            type: string
            x-additionalPropertiesName: header
          description: |
            Add headers to request.
          example: null
        code:
          $ref: '#/components/schemas/CodeCfg'
      description: Authentication implementation config
      x-order: 658063406-0
      x-super: '#/components/schemas/AuthAppCfg'
      example: null
    RemoteDbCfg:
      required:
      - remote
      type: object
      properties:
        remote:
          type: string
          example: null
        query:
          type: object
          additionalProperties:
            type: string
          example: null
        headers:
          type: object
          additionalProperties:
            type: string
          example: null
      x-order: 842893688-0
      x-super: '#/components/schemas/DbCfg'
      example: null
    ScopesAuthCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
        scopes:
          type: array
          items:
            type: string
          example: null
      x-order: 2741601-2
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    ShAppCfg:
      type: object
      properties:
        http:
          $ref: '#/components/schemas/ShHttpCfg'
        logins:
          type: array
          description: |+
            Types of logins that can be used for identification.

            If the login type is not specified in the auth config - it will be considered a simple login:
            the user can set any name. E.g. username.

            If the login type is specified in the auth config, this login will be generated by
            the corresponding authenticator. E.g. email, phone or facebook account id.

          example:
          - username
          - facebook
          - email
          items:
            type: string
        loginRequirements:
          type: object
          additionalProperties:
            type: string
            x-additionalPropertiesName: login type
          description: |
            Regexes to validate logins.
          example:
            username: "[\\w\\-.]{3,45}"
        auths:
          type: object
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/RemoteAuthCfg'
            - $ref: '#/components/schemas/AppSecretAuthCfg'
            - $ref: '#/components/schemas/AuthorizationCodeAuthCfg'
            - $ref: '#/components/schemas/EmailAuthCfg'
            - $ref: '#/components/schemas/IpAuthCfg'
            - $ref: '#/components/schemas/OAuthAppAuthCfg'
            - $ref: '#/components/schemas/OAuthCfg'
            - $ref: '#/components/schemas/PasswordAuthCfg'
            - $ref: '#/components/schemas/QuestionsAuthCfg'
            - $ref: '#/components/schemas/ScopesAuthCfg'
            - $ref: '#/components/schemas/TotpAuthCfg'
            x-additionalPropertiesName: auth
          description: |+
            List of auth names and auth configs

            To use builtin auths (not a plugin or remote) follow the example:
            - `"password": { ... }` or
            - `"anyAuthName": { "builtin": "password", ... }`

            Available built-in auths:
            - `password`, `email`, `questions`, `ip`, 'totp'
            - (OAuth2 client) `oauth`, `oauth/facebook/openid`, `oauth/google/openid`
            - (Backend integration) `appSecret`
            - (OAuth2 server) 'authorizationCode', 'oauthApp', 'scopes'

          example:
            email: {}
            password: {}
            facebook:
              builtin: oauth
        entries:
          type: object
          additionalProperties:
            x-additionalPropertiesName: entry
            $ref: '#/components/schemas/EntryCfg'
          description: |
            List of app entries. Entry usually represents UI used for signing in/up or additional authentication
            before action. E.g.:
            - app: main entry that requests user login/email + password and 2fa (if enabled)
            - api: entry that allows user to generate API keys and connect third-party app
            - action: additional authentication (e.g. code from sms) requested before e.g. payment
          example: null
        db:
          $ref: '#/components/schemas/ShDbsCfg'
        token:
          $ref: '#/components/schemas/TokenCfg'
        rateLimiters:
          type: object
          additionalProperties:
            x-additionalPropertiesName: rate-limiter id
            $ref: '#/components/schemas/RateLimiterCfg'
          description: |
            List of rate limiters
          example: null
        secret:
          type: string
          description: |-
            The key that app uses for RSA certificate generation used for token signature.
            If `null` - app will generate secret automatically during startup.
          default: <change_me>
          example: null
        healthCheckKey:
          type: string
          description: Set this key if you want to restrict access to the health-check.
          x-nullable: true
          example: null
        i18n:
          $ref: '#/components/schemas/I18nCfg'
        $schema:
          type: string
          default: ./kntrl.schema.json
          example: null
      x-order: -1414553603-0
      example: null
    ShDbsCfg:
      type: object
      properties:
        user:
          description: User database config
          anyOf:
          - $ref: '#/components/schemas/InMemoryCfg'
          - $ref: '#/components/schemas/InTokenCfg'
          - $ref: '#/components/schemas/MongoCfg'
          - $ref: '#/components/schemas/RedisCfg'
          - $ref: '#/components/schemas/RemoteDbCfg'
          - $ref: '#/components/schemas/MysqlCfg'
          - $ref: '#/components/schemas/PostgresCfg'
          - $ref: '#/components/schemas/SqliteCfg'
          example: null
        session:
          description: |-
            Session database config.

            If you aren't using cluster, prefer in-memory database.

            You can use in-token to not use database at all. Use it with `token.access.cacheUnauthenticated = true` and
            `token.access.cache != null` values.
          anyOf:
          - $ref: '#/components/schemas/InMemoryCfg'
          - $ref: '#/components/schemas/InTokenCfg'
          - $ref: '#/components/schemas/MongoCfg'
          - $ref: '#/components/schemas/RedisCfg'
          - $ref: '#/components/schemas/RemoteDbCfg'
          - $ref: '#/components/schemas/MysqlCfg'
          - $ref: '#/components/schemas/PostgresCfg'
          - $ref: '#/components/schemas/SqliteCfg'
          example: null
        rateLimiter:
          description: "Database for rate-limiters. If you don't use rate-limiter\
            \ leave this empty (`{}`)."
          anyOf:
          - $ref: '#/components/schemas/InMemoryCfg'
          - $ref: '#/components/schemas/InTokenCfg'
          - $ref: '#/components/schemas/MongoCfg'
          - $ref: '#/components/schemas/RedisCfg'
          - $ref: '#/components/schemas/RemoteDbCfg'
          - $ref: '#/components/schemas/MysqlCfg'
          - $ref: '#/components/schemas/PostgresCfg'
          - $ref: '#/components/schemas/SqliteCfg'
          example: null
      description: Database connection configs
      x-order: -1414553603-2
      example: null
    ShHttpCfg:
      type: object
      properties:
        port:
          type: integer
          description: |
            A port that the server will use to accept http requests
          format: int32
          example: 9876
          default: 9876
        bind:
          type: string
          description: |
            IP address to bind to. Usually 0.0.0.0 to accept for any connection or 127.0.0.1 to accept only localhost
          example: 127.0.0.1
          default: 0.0.0.0
        proxy:
          type: boolean
          description: "If true, X-Forwarded-For header is used to get client's IP\
            \ address"
          default: false
          example: null
      description: Http server config
      x-order: -1414553603-1
      example: null
    SqliteCfg:
      type: object
      properties:
        username:
          type: string
          default: ""
          example: null
        password:
          type: string
          default: ""
          example: null
        maxConnections:
          type: integer
          format: int32
          default: 500
          example: null
        sqlite:
          type: string
          default: ./sqlite
          example: null
      x-order: -1872929936-3
      x-super: '#/components/schemas/JdbcCfg'
      example: null
    TokenCfg:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/AccessTokenCfg'
        refresh:
          $ref: '#/components/schemas/RefreshTokenCfg'
        sameUserAgent:
          type: boolean
          description: Require all request to be made from the same device.
          default: true
          example: null
      description: Token lifetime config.
      x-order: -1195634750-0
      example: null
    TokenHandlerCfg:
      type: object
      properties:
        url:
          type: string
          description: |
            If access token provided in request, app tries to extract user id from user-info endpoint.
            If null, user info will be extracted from access token
          example: https://example.org/user-info
          x-nullable: true
        sendTokenInQuery:
          type: string
          description: "While executing user-info request, access-token will be sent\
            \ in query param."
          x-nullable: true
          example: null
        sendTokenInHeader:
          type: boolean
          description: "While executing user-info request, access-token will be sent\
            \ in Authorisation header."
          example: null
      x-order: -1532051357-3
      example: null
    TotpAuthCfg:
      type: object
      properties:
        requiresAuth:
          type: array
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            type: array
            items:
              type: string
          x-nullable: true
          example: null
        skipOnFail:
          type: boolean
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          default: false
          example: null
        rateLimiter:
          type: string
          description: Apply rate limiter for this auth.
          x-nullable: true
          example: null
        burnQuota:
          type: number
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          default: 0.0
          example: null
        encryptKey:
          type: string
          default: <change_me>
          example: null
      x-order: 820555017-1
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    regex:
      type: string
x-tagGroups: []
