/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import kntrl.client.generated.infra.JSON;

/**
 * RefreshTokenCfg
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-23T23:42:03.192677+03:00[Europe/Kiev]")
public class RefreshTokenCfg {
  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public static final String SERIALIZED_NAME_MAX_TTL = "maxTtl";
  @SerializedName(SERIALIZED_NAME_MAX_TTL)
  private String maxTtl;

  public static final String SERIALIZED_NAME_UNAUTHENTICATED_TTL = "unauthenticatedTtl";
  @SerializedName(SERIALIZED_NAME_UNAUTHENTICATED_TTL)
  private String unauthenticatedTtl;

  public static final String SERIALIZED_NAME_ALLOW_REUSE = "allowReuse";
  @SerializedName(SERIALIZED_NAME_ALLOW_REUSE)
  private Boolean allowReuse;

  public RefreshTokenCfg() { 
  }

  public RefreshTokenCfg ttl(String ttl) {
    
    this.ttl = ttl;
    return this;
  }

   /**
   * Get ttl
   * @return ttl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTtl() {
    return ttl;
  }


  public void setTtl(String ttl) {
    this.ttl = ttl;
  }


  public RefreshTokenCfg maxTtl(String maxTtl) {
    
    this.maxTtl = maxTtl;
    return this;
  }

   /**
   * Get maxTtl
   * @return maxTtl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMaxTtl() {
    return maxTtl;
  }


  public void setMaxTtl(String maxTtl) {
    this.maxTtl = maxTtl;
  }


  public RefreshTokenCfg unauthenticatedTtl(String unauthenticatedTtl) {
    
    this.unauthenticatedTtl = unauthenticatedTtl;
    return this;
  }

   /**
   * Get unauthenticatedTtl
   * @return unauthenticatedTtl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUnauthenticatedTtl() {
    return unauthenticatedTtl;
  }


  public void setUnauthenticatedTtl(String unauthenticatedTtl) {
    this.unauthenticatedTtl = unauthenticatedTtl;
  }


  public RefreshTokenCfg allowReuse(Boolean allowReuse) {
    
    this.allowReuse = allowReuse;
    return this;
  }

   /**
   * Get allowReuse
   * @return allowReuse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAllowReuse() {
    return allowReuse;
  }


  public void setAllowReuse(Boolean allowReuse) {
    this.allowReuse = allowReuse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefreshTokenCfg refreshTokenCfg = (RefreshTokenCfg) o;
    return Objects.equals(this.ttl, refreshTokenCfg.ttl) &&
        Objects.equals(this.maxTtl, refreshTokenCfg.maxTtl) &&
        Objects.equals(this.unauthenticatedTtl, refreshTokenCfg.unauthenticatedTtl) &&
        Objects.equals(this.allowReuse, refreshTokenCfg.allowReuse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ttl, maxTtl, unauthenticatedTtl, allowReuse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefreshTokenCfg {\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    maxTtl: ").append(toIndentedString(maxTtl)).append("\n");
    sb.append("    unauthenticatedTtl: ").append(toIndentedString(unauthenticatedTtl)).append("\n");
    sb.append("    allowReuse: ").append(toIndentedString(allowReuse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ttl");
    openapiFields.add("maxTtl");
    openapiFields.add("unauthenticatedTtl");
    openapiFields.add("allowReuse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RefreshTokenCfg
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RefreshTokenCfg.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefreshTokenCfg is not found in the empty JSON string", RefreshTokenCfg.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RefreshTokenCfg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefreshTokenCfg` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
      if (jsonObj.get("maxTtl") != null && !jsonObj.get("maxTtl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxTtl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxTtl").toString()));
      }
      if (jsonObj.get("unauthenticatedTtl") != null && !jsonObj.get("unauthenticatedTtl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unauthenticatedTtl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unauthenticatedTtl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefreshTokenCfg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefreshTokenCfg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefreshTokenCfg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefreshTokenCfg.class));

       return (TypeAdapter<T>) new TypeAdapter<RefreshTokenCfg>() {
           @Override
           public void write(JsonWriter out, RefreshTokenCfg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefreshTokenCfg read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RefreshTokenCfg given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RefreshTokenCfg
  * @throws IOException if the JSON string is invalid with respect to RefreshTokenCfg
  */
  public static RefreshTokenCfg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefreshTokenCfg.class);
  }

 /**
  * Convert an instance of RefreshTokenCfg to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

