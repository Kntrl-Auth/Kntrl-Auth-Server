/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import kntrl.client.generated.infra.JSON;

/**
 * PasswordStrengthRequirements
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-23T23:42:03.192677+03:00[Europe/Kiev]")
public class PasswordStrengthRequirements {
  public static final String SERIALIZED_NAME_MIN_LENGTH = "minLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength;

  public static final String SERIALIZED_NAME_REQUIRE_NUMBER = "requireNumber";
  @SerializedName(SERIALIZED_NAME_REQUIRE_NUMBER)
  private Boolean requireNumber;

  public static final String SERIALIZED_NAME_REQUIRE_SYMBOL = "requireSymbol";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SYMBOL)
  private Boolean requireSymbol;

  public static final String SERIALIZED_NAME_REQUIRE_UPPER_CASE = "requireUpperCase";
  @SerializedName(SERIALIZED_NAME_REQUIRE_UPPER_CASE)
  private Boolean requireUpperCase;

  public static final String SERIALIZED_NAME_FORBID_COMMON_PASSWORDS = "forbidCommonPasswords";
  @SerializedName(SERIALIZED_NAME_FORBID_COMMON_PASSWORDS)
  private Boolean forbidCommonPasswords;

  public static final String SERIALIZED_NAME_FORBID_LOGIN_AS_PASSWORD = "forbidLoginAsPassword";
  @SerializedName(SERIALIZED_NAME_FORBID_LOGIN_AS_PASSWORD)
  private Boolean forbidLoginAsPassword;

  public PasswordStrengthRequirements() { 
  }

  public PasswordStrengthRequirements minLength(Integer minLength) {
    
    this.minLength = minLength;
    return this;
  }

   /**
   * Get minLength
   * @return minLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMinLength() {
    return minLength;
  }


  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public PasswordStrengthRequirements requireNumber(Boolean requireNumber) {
    
    this.requireNumber = requireNumber;
    return this;
  }

   /**
   * Get requireNumber
   * @return requireNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequireNumber() {
    return requireNumber;
  }


  public void setRequireNumber(Boolean requireNumber) {
    this.requireNumber = requireNumber;
  }


  public PasswordStrengthRequirements requireSymbol(Boolean requireSymbol) {
    
    this.requireSymbol = requireSymbol;
    return this;
  }

   /**
   * Get requireSymbol
   * @return requireSymbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequireSymbol() {
    return requireSymbol;
  }


  public void setRequireSymbol(Boolean requireSymbol) {
    this.requireSymbol = requireSymbol;
  }


  public PasswordStrengthRequirements requireUpperCase(Boolean requireUpperCase) {
    
    this.requireUpperCase = requireUpperCase;
    return this;
  }

   /**
   * Get requireUpperCase
   * @return requireUpperCase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequireUpperCase() {
    return requireUpperCase;
  }


  public void setRequireUpperCase(Boolean requireUpperCase) {
    this.requireUpperCase = requireUpperCase;
  }


  public PasswordStrengthRequirements forbidCommonPasswords(Boolean forbidCommonPasswords) {
    
    this.forbidCommonPasswords = forbidCommonPasswords;
    return this;
  }

   /**
   * Get forbidCommonPasswords
   * @return forbidCommonPasswords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getForbidCommonPasswords() {
    return forbidCommonPasswords;
  }


  public void setForbidCommonPasswords(Boolean forbidCommonPasswords) {
    this.forbidCommonPasswords = forbidCommonPasswords;
  }


  public PasswordStrengthRequirements forbidLoginAsPassword(Boolean forbidLoginAsPassword) {
    
    this.forbidLoginAsPassword = forbidLoginAsPassword;
    return this;
  }

   /**
   * Get forbidLoginAsPassword
   * @return forbidLoginAsPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getForbidLoginAsPassword() {
    return forbidLoginAsPassword;
  }


  public void setForbidLoginAsPassword(Boolean forbidLoginAsPassword) {
    this.forbidLoginAsPassword = forbidLoginAsPassword;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordStrengthRequirements passwordStrengthRequirements = (PasswordStrengthRequirements) o;
    return Objects.equals(this.minLength, passwordStrengthRequirements.minLength) &&
        Objects.equals(this.requireNumber, passwordStrengthRequirements.requireNumber) &&
        Objects.equals(this.requireSymbol, passwordStrengthRequirements.requireSymbol) &&
        Objects.equals(this.requireUpperCase, passwordStrengthRequirements.requireUpperCase) &&
        Objects.equals(this.forbidCommonPasswords, passwordStrengthRequirements.forbidCommonPasswords) &&
        Objects.equals(this.forbidLoginAsPassword, passwordStrengthRequirements.forbidLoginAsPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minLength, requireNumber, requireSymbol, requireUpperCase, forbidCommonPasswords, forbidLoginAsPassword);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordStrengthRequirements {\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    requireNumber: ").append(toIndentedString(requireNumber)).append("\n");
    sb.append("    requireSymbol: ").append(toIndentedString(requireSymbol)).append("\n");
    sb.append("    requireUpperCase: ").append(toIndentedString(requireUpperCase)).append("\n");
    sb.append("    forbidCommonPasswords: ").append(toIndentedString(forbidCommonPasswords)).append("\n");
    sb.append("    forbidLoginAsPassword: ").append(toIndentedString(forbidLoginAsPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minLength");
    openapiFields.add("requireNumber");
    openapiFields.add("requireSymbol");
    openapiFields.add("requireUpperCase");
    openapiFields.add("forbidCommonPasswords");
    openapiFields.add("forbidLoginAsPassword");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PasswordStrengthRequirements
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PasswordStrengthRequirements.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordStrengthRequirements is not found in the empty JSON string", PasswordStrengthRequirements.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PasswordStrengthRequirements.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasswordStrengthRequirements` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordStrengthRequirements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordStrengthRequirements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordStrengthRequirements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordStrengthRequirements.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordStrengthRequirements>() {
           @Override
           public void write(JsonWriter out, PasswordStrengthRequirements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordStrengthRequirements read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PasswordStrengthRequirements given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PasswordStrengthRequirements
  * @throws IOException if the JSON string is invalid with respect to PasswordStrengthRequirements
  */
  public static PasswordStrengthRequirements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordStrengthRequirements.class);
  }

 /**
  * Convert an instance of PasswordStrengthRequirements to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

