/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import kntrl.client.generated.infra.JSON;

/**
 * TokenHandlerCfg
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-23T23:42:03.192677+03:00[Europe/Kiev]")
public class TokenHandlerCfg {
  public static final String SERIALIZED_NAME_USER_INFO_URL = "userInfoUrl";
  @SerializedName(SERIALIZED_NAME_USER_INFO_URL)
  private String userInfoUrl;

  public static final String SERIALIZED_NAME_SEND_TOKEN_IN_QUERY = "sendTokenInQuery";
  @SerializedName(SERIALIZED_NAME_SEND_TOKEN_IN_QUERY)
  private String sendTokenInQuery;

  public static final String SERIALIZED_NAME_SEND_TOKEN_IN_HEADER = "sendTokenInHeader";
  @SerializedName(SERIALIZED_NAME_SEND_TOKEN_IN_HEADER)
  private Boolean sendTokenInHeader;

  public TokenHandlerCfg() { 
  }

  public TokenHandlerCfg userInfoUrl(String userInfoUrl) {
    
    this.userInfoUrl = userInfoUrl;
    return this;
  }

   /**
   * Get userInfoUrl
   * @return userInfoUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUserInfoUrl() {
    return userInfoUrl;
  }


  public void setUserInfoUrl(String userInfoUrl) {
    this.userInfoUrl = userInfoUrl;
  }


  public TokenHandlerCfg sendTokenInQuery(String sendTokenInQuery) {
    
    this.sendTokenInQuery = sendTokenInQuery;
    return this;
  }

   /**
   * Get sendTokenInQuery
   * @return sendTokenInQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSendTokenInQuery() {
    return sendTokenInQuery;
  }


  public void setSendTokenInQuery(String sendTokenInQuery) {
    this.sendTokenInQuery = sendTokenInQuery;
  }


  public TokenHandlerCfg sendTokenInHeader(Boolean sendTokenInHeader) {
    
    this.sendTokenInHeader = sendTokenInHeader;
    return this;
  }

   /**
   * Get sendTokenInHeader
   * @return sendTokenInHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSendTokenInHeader() {
    return sendTokenInHeader;
  }


  public void setSendTokenInHeader(Boolean sendTokenInHeader) {
    this.sendTokenInHeader = sendTokenInHeader;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenHandlerCfg tokenHandlerCfg = (TokenHandlerCfg) o;
    return Objects.equals(this.userInfoUrl, tokenHandlerCfg.userInfoUrl) &&
        Objects.equals(this.sendTokenInQuery, tokenHandlerCfg.sendTokenInQuery) &&
        Objects.equals(this.sendTokenInHeader, tokenHandlerCfg.sendTokenInHeader);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userInfoUrl, sendTokenInQuery, sendTokenInHeader);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenHandlerCfg {\n");
    sb.append("    userInfoUrl: ").append(toIndentedString(userInfoUrl)).append("\n");
    sb.append("    sendTokenInQuery: ").append(toIndentedString(sendTokenInQuery)).append("\n");
    sb.append("    sendTokenInHeader: ").append(toIndentedString(sendTokenInHeader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userInfoUrl");
    openapiFields.add("sendTokenInQuery");
    openapiFields.add("sendTokenInHeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("userInfoUrl");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TokenHandlerCfg
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TokenHandlerCfg.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenHandlerCfg is not found in the empty JSON string", TokenHandlerCfg.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TokenHandlerCfg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokenHandlerCfg` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TokenHandlerCfg.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("userInfoUrl") != null && !jsonObj.get("userInfoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userInfoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userInfoUrl").toString()));
      }
      if (jsonObj.get("sendTokenInQuery") != null && !jsonObj.get("sendTokenInQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendTokenInQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendTokenInQuery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenHandlerCfg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenHandlerCfg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenHandlerCfg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenHandlerCfg.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenHandlerCfg>() {
           @Override
           public void write(JsonWriter out, TokenHandlerCfg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenHandlerCfg read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenHandlerCfg given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenHandlerCfg
  * @throws IOException if the JSON string is invalid with respect to TokenHandlerCfg
  */
  public static TokenHandlerCfg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenHandlerCfg.class);
  }

 /**
  * Convert an instance of TokenHandlerCfg to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

