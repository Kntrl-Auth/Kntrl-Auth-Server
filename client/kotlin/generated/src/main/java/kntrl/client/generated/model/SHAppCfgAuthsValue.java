/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kntrl.client.generated.model.AppSecretAuthCfg;
import kntrl.client.generated.model.CodeCfg;
import kntrl.client.generated.model.EmailAuthCfg;
import kntrl.client.generated.model.IpAuthCfg;
import kntrl.client.generated.model.OAuthCfg;
import kntrl.client.generated.model.PasswordAuthCfg;
import kntrl.client.generated.model.PasswordHistoryCfg;
import kntrl.client.generated.model.PasswordStrengthRequirements;
import kntrl.client.generated.model.QuestionsAuthCfg;
import kntrl.client.generated.model.RemoteAuthCfg;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import kntrl.client.generated.infra.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-10T21:18:46.730417+03:00[Europe/Kiev]")
public class SHAppCfgAuthsValue extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SHAppCfgAuthsValue.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SHAppCfgAuthsValue.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SHAppCfgAuthsValue' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AppSecretAuthCfg> adapterAppSecretAuthCfg = gson.getDelegateAdapter(this, TypeToken.get(AppSecretAuthCfg.class));
            final TypeAdapter<EmailAuthCfg> adapterEmailAuthCfg = gson.getDelegateAdapter(this, TypeToken.get(EmailAuthCfg.class));
            final TypeAdapter<IpAuthCfg> adapterIpAuthCfg = gson.getDelegateAdapter(this, TypeToken.get(IpAuthCfg.class));
            final TypeAdapter<OAuthCfg> adapterOAuthCfg = gson.getDelegateAdapter(this, TypeToken.get(OAuthCfg.class));
            final TypeAdapter<PasswordAuthCfg> adapterPasswordAuthCfg = gson.getDelegateAdapter(this, TypeToken.get(PasswordAuthCfg.class));
            final TypeAdapter<QuestionsAuthCfg> adapterQuestionsAuthCfg = gson.getDelegateAdapter(this, TypeToken.get(QuestionsAuthCfg.class));
            final TypeAdapter<RemoteAuthCfg> adapterRemoteAuthCfg = gson.getDelegateAdapter(this, TypeToken.get(RemoteAuthCfg.class));

            return (TypeAdapter<T>) new TypeAdapter<SHAppCfgAuthsValue>() {
                @Override
                public void write(JsonWriter out, SHAppCfgAuthsValue value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AppSecretAuthCfg`
                    if (value.getActualInstance() instanceof AppSecretAuthCfg) {
                        JsonObject obj = adapterAppSecretAuthCfg.toJsonTree((AppSecretAuthCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `EmailAuthCfg`
                    if (value.getActualInstance() instanceof EmailAuthCfg) {
                        JsonObject obj = adapterEmailAuthCfg.toJsonTree((EmailAuthCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `IpAuthCfg`
                    if (value.getActualInstance() instanceof IpAuthCfg) {
                        JsonObject obj = adapterIpAuthCfg.toJsonTree((IpAuthCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `OAuthCfg`
                    if (value.getActualInstance() instanceof OAuthCfg) {
                        JsonObject obj = adapterOAuthCfg.toJsonTree((OAuthCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PasswordAuthCfg`
                    if (value.getActualInstance() instanceof PasswordAuthCfg) {
                        JsonObject obj = adapterPasswordAuthCfg.toJsonTree((PasswordAuthCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `QuestionsAuthCfg`
                    if (value.getActualInstance() instanceof QuestionsAuthCfg) {
                        JsonObject obj = adapterQuestionsAuthCfg.toJsonTree((QuestionsAuthCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RemoteAuthCfg`
                    if (value.getActualInstance() instanceof RemoteAuthCfg) {
                        JsonObject obj = adapterRemoteAuthCfg.toJsonTree((RemoteAuthCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AppSecretAuthCfg, EmailAuthCfg, IpAuthCfg, OAuthCfg, PasswordAuthCfg, QuestionsAuthCfg, RemoteAuthCfg");
                }

                @Override
                public SHAppCfgAuthsValue read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AppSecretAuthCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AppSecretAuthCfg.validateJsonObject(jsonObject);
                        actualAdapter = adapterAppSecretAuthCfg;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AppSecretAuthCfg'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AppSecretAuthCfg failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AppSecretAuthCfg'", e);
                    }

                    // deserialize EmailAuthCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EmailAuthCfg.validateJsonObject(jsonObject);
                        actualAdapter = adapterEmailAuthCfg;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EmailAuthCfg'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EmailAuthCfg failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EmailAuthCfg'", e);
                    }

                    // deserialize IpAuthCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IpAuthCfg.validateJsonObject(jsonObject);
                        actualAdapter = adapterIpAuthCfg;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IpAuthCfg'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IpAuthCfg failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IpAuthCfg'", e);
                    }

                    // deserialize OAuthCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OAuthCfg.validateJsonObject(jsonObject);
                        actualAdapter = adapterOAuthCfg;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OAuthCfg'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OAuthCfg failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OAuthCfg'", e);
                    }

                    // deserialize PasswordAuthCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PasswordAuthCfg.validateJsonObject(jsonObject);
                        actualAdapter = adapterPasswordAuthCfg;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PasswordAuthCfg'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PasswordAuthCfg failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PasswordAuthCfg'", e);
                    }

                    // deserialize QuestionsAuthCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        QuestionsAuthCfg.validateJsonObject(jsonObject);
                        actualAdapter = adapterQuestionsAuthCfg;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'QuestionsAuthCfg'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for QuestionsAuthCfg failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'QuestionsAuthCfg'", e);
                    }

                    // deserialize RemoteAuthCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RemoteAuthCfg.validateJsonObject(jsonObject);
                        actualAdapter = adapterRemoteAuthCfg;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RemoteAuthCfg'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RemoteAuthCfg failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RemoteAuthCfg'", e);
                    }

                    if (match == 1) {
                        SHAppCfgAuthsValue ret = new SHAppCfgAuthsValue();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SHAppCfgAuthsValue: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public SHAppCfgAuthsValue() {
        super("oneOf", Boolean.FALSE);
    }

    public SHAppCfgAuthsValue(AppSecretAuthCfg o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SHAppCfgAuthsValue(EmailAuthCfg o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SHAppCfgAuthsValue(IpAuthCfg o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SHAppCfgAuthsValue(OAuthCfg o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SHAppCfgAuthsValue(PasswordAuthCfg o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SHAppCfgAuthsValue(QuestionsAuthCfg o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SHAppCfgAuthsValue(RemoteAuthCfg o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AppSecretAuthCfg", new GenericType<AppSecretAuthCfg>() {
        });
        schemas.put("EmailAuthCfg", new GenericType<EmailAuthCfg>() {
        });
        schemas.put("IpAuthCfg", new GenericType<IpAuthCfg>() {
        });
        schemas.put("OAuthCfg", new GenericType<OAuthCfg>() {
        });
        schemas.put("PasswordAuthCfg", new GenericType<PasswordAuthCfg>() {
        });
        schemas.put("QuestionsAuthCfg", new GenericType<QuestionsAuthCfg>() {
        });
        schemas.put("RemoteAuthCfg", new GenericType<RemoteAuthCfg>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return SHAppCfgAuthsValue.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AppSecretAuthCfg, EmailAuthCfg, IpAuthCfg, OAuthCfg, PasswordAuthCfg, QuestionsAuthCfg, RemoteAuthCfg
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AppSecretAuthCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmailAuthCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IpAuthCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OAuthCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PasswordAuthCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof QuestionsAuthCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RemoteAuthCfg) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AppSecretAuthCfg, EmailAuthCfg, IpAuthCfg, OAuthCfg, PasswordAuthCfg, QuestionsAuthCfg, RemoteAuthCfg");
    }

    /**
     * Get the actual instance, which can be the following:
     * AppSecretAuthCfg, EmailAuthCfg, IpAuthCfg, OAuthCfg, PasswordAuthCfg, QuestionsAuthCfg, RemoteAuthCfg
     *
     * @return The actual instance (AppSecretAuthCfg, EmailAuthCfg, IpAuthCfg, OAuthCfg, PasswordAuthCfg, QuestionsAuthCfg, RemoteAuthCfg)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppSecretAuthCfg`. If the actual instance is not `AppSecretAuthCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppSecretAuthCfg`
     * @throws ClassCastException if the instance is not `AppSecretAuthCfg`
     */
    public AppSecretAuthCfg getAppSecretAuthCfg() throws ClassCastException {
        return (AppSecretAuthCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EmailAuthCfg`. If the actual instance is not `EmailAuthCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmailAuthCfg`
     * @throws ClassCastException if the instance is not `EmailAuthCfg`
     */
    public EmailAuthCfg getEmailAuthCfg() throws ClassCastException {
        return (EmailAuthCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IpAuthCfg`. If the actual instance is not `IpAuthCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IpAuthCfg`
     * @throws ClassCastException if the instance is not `IpAuthCfg`
     */
    public IpAuthCfg getIpAuthCfg() throws ClassCastException {
        return (IpAuthCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OAuthCfg`. If the actual instance is not `OAuthCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OAuthCfg`
     * @throws ClassCastException if the instance is not `OAuthCfg`
     */
    public OAuthCfg getOAuthCfg() throws ClassCastException {
        return (OAuthCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PasswordAuthCfg`. If the actual instance is not `PasswordAuthCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PasswordAuthCfg`
     * @throws ClassCastException if the instance is not `PasswordAuthCfg`
     */
    public PasswordAuthCfg getPasswordAuthCfg() throws ClassCastException {
        return (PasswordAuthCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `QuestionsAuthCfg`. If the actual instance is not `QuestionsAuthCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `QuestionsAuthCfg`
     * @throws ClassCastException if the instance is not `QuestionsAuthCfg`
     */
    public QuestionsAuthCfg getQuestionsAuthCfg() throws ClassCastException {
        return (QuestionsAuthCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RemoteAuthCfg`. If the actual instance is not `RemoteAuthCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RemoteAuthCfg`
     * @throws ClassCastException if the instance is not `RemoteAuthCfg`
     */
    public RemoteAuthCfg getRemoteAuthCfg() throws ClassCastException {
        return (RemoteAuthCfg)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SHAppCfgAuthsValue
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with AppSecretAuthCfg
    try {
      AppSecretAuthCfg.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AppSecretAuthCfg failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmailAuthCfg
    try {
      EmailAuthCfg.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmailAuthCfg failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with IpAuthCfg
    try {
      IpAuthCfg.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for IpAuthCfg failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with OAuthCfg
    try {
      OAuthCfg.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for OAuthCfg failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with PasswordAuthCfg
    try {
      PasswordAuthCfg.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PasswordAuthCfg failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with QuestionsAuthCfg
    try {
      QuestionsAuthCfg.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for QuestionsAuthCfg failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RemoteAuthCfg
    try {
      RemoteAuthCfg.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RemoteAuthCfg failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for SHAppCfgAuthsValue with oneOf schemas: AppSecretAuthCfg, EmailAuthCfg, IpAuthCfg, OAuthCfg, PasswordAuthCfg, QuestionsAuthCfg, RemoteAuthCfg. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of SHAppCfgAuthsValue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SHAppCfgAuthsValue
  * @throws IOException if the JSON string is invalid with respect to SHAppCfgAuthsValue
  */
  public static SHAppCfgAuthsValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SHAppCfgAuthsValue.class);
  }

 /**
  * Convert an instance of SHAppCfgAuthsValue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

