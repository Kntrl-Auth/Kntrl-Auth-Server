/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import app.kntrl.client.generated.model.AuthResDataJson;
import app.kntrl.client.generated.model.EmailAuthRes;
import app.kntrl.client.generated.model.IpAuthRes;
import app.kntrl.client.generated.model.OAuthRes;
import app.kntrl.client.generated.model.PasswordUpdateRes;
import app.kntrl.client.generated.model.QuestionsAuthenticateRes;
import app.kntrl.client.generated.model.QuestionsUpdateRes;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import app.kntrl.client.generated.infra.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AuthExecResResData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AuthExecResResData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AuthExecResResData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AuthExecResResData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AuthResDataJson> adapterAuthResDataJson = gson.getDelegateAdapter(this, TypeToken.get(AuthResDataJson.class));
            final TypeAdapter<EmailAuthRes> adapterEmailAuthRes = gson.getDelegateAdapter(this, TypeToken.get(EmailAuthRes.class));
            final TypeAdapter<IpAuthRes> adapterIpAuthRes = gson.getDelegateAdapter(this, TypeToken.get(IpAuthRes.class));
            final TypeAdapter<OAuthRes> adapterOAuthRes = gson.getDelegateAdapter(this, TypeToken.get(OAuthRes.class));
            final TypeAdapter<PasswordUpdateRes> adapterPasswordUpdateRes = gson.getDelegateAdapter(this, TypeToken.get(PasswordUpdateRes.class));
            final TypeAdapter<QuestionsAuthenticateRes> adapterQuestionsAuthenticateRes = gson.getDelegateAdapter(this, TypeToken.get(QuestionsAuthenticateRes.class));
            final TypeAdapter<QuestionsUpdateRes> adapterQuestionsUpdateRes = gson.getDelegateAdapter(this, TypeToken.get(QuestionsUpdateRes.class));

            return (TypeAdapter<T>) new TypeAdapter<AuthExecResResData>() {
                @Override
                public void write(JsonWriter out, AuthExecResResData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AuthResDataJson`
                    if (value.getActualInstance() instanceof AuthResDataJson) {
                        JsonObject obj = adapterAuthResDataJson.toJsonTree((AuthResDataJson)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `EmailAuthRes`
                    if (value.getActualInstance() instanceof EmailAuthRes) {
                        JsonObject obj = adapterEmailAuthRes.toJsonTree((EmailAuthRes)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `IpAuthRes`
                    if (value.getActualInstance() instanceof IpAuthRes) {
                        JsonObject obj = adapterIpAuthRes.toJsonTree((IpAuthRes)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `OAuthRes`
                    if (value.getActualInstance() instanceof OAuthRes) {
                        JsonObject obj = adapterOAuthRes.toJsonTree((OAuthRes)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PasswordUpdateRes`
                    if (value.getActualInstance() instanceof PasswordUpdateRes) {
                        JsonObject obj = adapterPasswordUpdateRes.toJsonTree((PasswordUpdateRes)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `QuestionsAuthenticateRes`
                    if (value.getActualInstance() instanceof QuestionsAuthenticateRes) {
                        JsonObject obj = adapterQuestionsAuthenticateRes.toJsonTree((QuestionsAuthenticateRes)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `QuestionsUpdateRes`
                    if (value.getActualInstance() instanceof QuestionsUpdateRes) {
                        JsonObject obj = adapterQuestionsUpdateRes.toJsonTree((QuestionsUpdateRes)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: AuthResDataJson, EmailAuthRes, IpAuthRes, OAuthRes, PasswordUpdateRes, QuestionsAuthenticateRes, QuestionsUpdateRes");
                }

                @Override
                public AuthExecResResData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize AuthResDataJson
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthResDataJson.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'AuthResDataJson'");
                        AuthExecResResData ret = new AuthExecResResData();
                        ret.setActualInstance(adapterAuthResDataJson.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'AuthResDataJson'", e);
                    }

                    // deserialize EmailAuthRes
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EmailAuthRes.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'EmailAuthRes'");
                        AuthExecResResData ret = new AuthExecResResData();
                        ret.setActualInstance(adapterEmailAuthRes.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'EmailAuthRes'", e);
                    }

                    // deserialize IpAuthRes
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IpAuthRes.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'IpAuthRes'");
                        AuthExecResResData ret = new AuthExecResResData();
                        ret.setActualInstance(adapterIpAuthRes.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'IpAuthRes'", e);
                    }

                    // deserialize OAuthRes
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OAuthRes.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'OAuthRes'");
                        AuthExecResResData ret = new AuthExecResResData();
                        ret.setActualInstance(adapterOAuthRes.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'OAuthRes'", e);
                    }

                    // deserialize PasswordUpdateRes
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PasswordUpdateRes.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'PasswordUpdateRes'");
                        AuthExecResResData ret = new AuthExecResResData();
                        ret.setActualInstance(adapterPasswordUpdateRes.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'PasswordUpdateRes'", e);
                    }

                    // deserialize QuestionsAuthenticateRes
                    try {
                        // validate the JSON object to see if any exception is thrown
                        QuestionsAuthenticateRes.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'QuestionsAuthenticateRes'");
                        AuthExecResResData ret = new AuthExecResResData();
                        ret.setActualInstance(adapterQuestionsAuthenticateRes.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'QuestionsAuthenticateRes'", e);
                    }

                    // deserialize QuestionsUpdateRes
                    try {
                        // validate the JSON object to see if any exception is thrown
                        QuestionsUpdateRes.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'QuestionsUpdateRes'");
                        AuthExecResResData ret = new AuthExecResResData();
                        ret.setActualInstance(adapterQuestionsUpdateRes.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'QuestionsUpdateRes'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for AuthExecResResData: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public AuthExecResResData() {
        super("anyOf", Boolean.FALSE);
    }

    public AuthExecResResData(AuthResDataJson o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AuthExecResResData(EmailAuthRes o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AuthExecResResData(IpAuthRes o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AuthExecResResData(OAuthRes o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AuthExecResResData(PasswordUpdateRes o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AuthExecResResData(QuestionsAuthenticateRes o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AuthExecResResData(QuestionsUpdateRes o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AuthResDataJson", new GenericType<AuthResDataJson>() {
        });
        schemas.put("EmailAuthRes", new GenericType<EmailAuthRes>() {
        });
        schemas.put("IpAuthRes", new GenericType<IpAuthRes>() {
        });
        schemas.put("OAuthRes", new GenericType<OAuthRes>() {
        });
        schemas.put("PasswordUpdateRes", new GenericType<PasswordUpdateRes>() {
        });
        schemas.put("QuestionsAuthenticateRes", new GenericType<QuestionsAuthenticateRes>() {
        });
        schemas.put("QuestionsUpdateRes", new GenericType<QuestionsUpdateRes>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return AuthExecResResData.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AuthResDataJson, EmailAuthRes, IpAuthRes, OAuthRes, PasswordUpdateRes, QuestionsAuthenticateRes, QuestionsUpdateRes
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AuthResDataJson) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmailAuthRes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IpAuthRes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OAuthRes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PasswordUpdateRes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof QuestionsAuthenticateRes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof QuestionsUpdateRes) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AuthResDataJson, EmailAuthRes, IpAuthRes, OAuthRes, PasswordUpdateRes, QuestionsAuthenticateRes, QuestionsUpdateRes");
    }

    /**
     * Get the actual instance, which can be the following:
     * AuthResDataJson, EmailAuthRes, IpAuthRes, OAuthRes, PasswordUpdateRes, QuestionsAuthenticateRes, QuestionsUpdateRes
     *
     * @return The actual instance (AuthResDataJson, EmailAuthRes, IpAuthRes, OAuthRes, PasswordUpdateRes, QuestionsAuthenticateRes, QuestionsUpdateRes)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AuthResDataJson`. If the actual instance is not `AuthResDataJson`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthResDataJson`
     * @throws ClassCastException if the instance is not `AuthResDataJson`
     */
    public AuthResDataJson getAuthResDataJson() throws ClassCastException {
        return (AuthResDataJson)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EmailAuthRes`. If the actual instance is not `EmailAuthRes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmailAuthRes`
     * @throws ClassCastException if the instance is not `EmailAuthRes`
     */
    public EmailAuthRes getEmailAuthRes() throws ClassCastException {
        return (EmailAuthRes)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IpAuthRes`. If the actual instance is not `IpAuthRes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IpAuthRes`
     * @throws ClassCastException if the instance is not `IpAuthRes`
     */
    public IpAuthRes getIpAuthRes() throws ClassCastException {
        return (IpAuthRes)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OAuthRes`. If the actual instance is not `OAuthRes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OAuthRes`
     * @throws ClassCastException if the instance is not `OAuthRes`
     */
    public OAuthRes getOAuthRes() throws ClassCastException {
        return (OAuthRes)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PasswordUpdateRes`. If the actual instance is not `PasswordUpdateRes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PasswordUpdateRes`
     * @throws ClassCastException if the instance is not `PasswordUpdateRes`
     */
    public PasswordUpdateRes getPasswordUpdateRes() throws ClassCastException {
        return (PasswordUpdateRes)super.getActualInstance();
    }

    /**
     * Get the actual instance of `QuestionsAuthenticateRes`. If the actual instance is not `QuestionsAuthenticateRes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `QuestionsAuthenticateRes`
     * @throws ClassCastException if the instance is not `QuestionsAuthenticateRes`
     */
    public QuestionsAuthenticateRes getQuestionsAuthenticateRes() throws ClassCastException {
        return (QuestionsAuthenticateRes)super.getActualInstance();
    }

    /**
     * Get the actual instance of `QuestionsUpdateRes`. If the actual instance is not `QuestionsUpdateRes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `QuestionsUpdateRes`
     * @throws ClassCastException if the instance is not `QuestionsUpdateRes`
     */
    public QuestionsUpdateRes getQuestionsUpdateRes() throws ClassCastException {
        return (QuestionsUpdateRes)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AuthExecResResData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate anyOf schemas one by one
    int validCount = 0;
    // validate the json string with AuthResDataJson
    try {
      AuthResDataJson.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with EmailAuthRes
    try {
      EmailAuthRes.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with IpAuthRes
    try {
      IpAuthRes.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with OAuthRes
    try {
      OAuthRes.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with PasswordUpdateRes
    try {
      PasswordUpdateRes.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with QuestionsAuthenticateRes
    try {
      QuestionsAuthenticateRes.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with QuestionsUpdateRes
    try {
      QuestionsUpdateRes.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount == 0) {
      throw new IOException(String.format("The JSON string is invalid for AuthExecResResData with anyOf schemas: AuthResDataJson, EmailAuthRes, IpAuthRes, OAuthRes, PasswordUpdateRes, QuestionsAuthenticateRes, QuestionsUpdateRes. JSON: %s", jsonObj.toString()));
    }
  }

 /**
  * Create an instance of AuthExecResResData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthExecResResData
  * @throws IOException if the JSON string is invalid with respect to AuthExecResResData
  */
  public static AuthExecResResData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthExecResResData.class);
  }

 /**
  * Convert an instance of AuthExecResResData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

