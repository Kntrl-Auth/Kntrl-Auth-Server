/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import app.kntrl.client.openapi.model.AuthUserCfg;
import app.kntrl.client.openapi.model.Login;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import app.kntrl.client.openapi.infra.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class User {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGINS = "logins";
  @SerializedName(SERIALIZED_NAME_LOGINS)
  private List<Login> logins = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHS = "auths";
  @SerializedName(SERIALIZED_NAME_AUTHS)
  private Map<String, AuthUserCfg> auths = new HashMap<>();

  public static final String SERIALIZED_NAME_FACTORS = "factors";
  @SerializedName(SERIALIZED_NAME_FACTORS)
  private List<String> factors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNED_UP_AT = "signedUpAt";
  @SerializedName(SERIALIZED_NAME_SIGNED_UP_AT)
  private Long signedUpAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Long updatedAt;

  public static final String SERIALIZED_NAME_NEW = "new";
  @SerializedName(SERIALIZED_NAME_NEW)
  private Boolean _new = false;

  public static final String SERIALIZED_NAME_SYSTEM_ACCESS = "systemAccess";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ACCESS)
  private Boolean systemAccess = false;

  public User() {
  }

  public User id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Generated user id 
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "fewfvc23f", required = true, value = "Generated user id ")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public User logins(List<Login> logins) {
    
    this.logins = logins;
    return this;
  }

  public User addLoginsItem(Login loginsItem) {
    this.logins.add(loginsItem);
    return this;
  }

   /**
   * Get logins
   * @return logins
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Login> getLogins() {
    return logins;
  }


  public void setLogins(List<Login> logins) {
    this.logins = logins;
  }


  public User auths(Map<String, AuthUserCfg> auths) {
    
    this.auths = auths;
    return this;
  }

  public User putAuthsItem(String key, AuthUserCfg authsItem) {
    this.auths.put(key, authsItem);
    return this;
  }

   /**
   * Data of confirmed auths and sent codes for unconfirmed auths. 
   * @return auths
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Data of confirmed auths and sent codes for unconfirmed auths. ")

  public Map<String, AuthUserCfg> getAuths() {
    return auths;
  }


  public void setAuths(Map<String, AuthUserCfg> auths) {
    this.auths = auths;
  }


  public User factors(List<String> factors) {
    
    this.factors = factors;
    return this;
  }

  public User addFactorsItem(String factorsItem) {
    this.factors.add(factorsItem);
    return this;
  }

   /**
   * Enabled factors
   * @return factors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Enabled factors")

  public List<String> getFactors() {
    return factors;
  }


  public void setFactors(List<String> factors) {
    this.factors = factors;
  }


  public User signedUpAt(Long signedUpAt) {
    
    this.signedUpAt = signedUpAt;
    return this;
  }

   /**
   * Get signedUpAt
   * @return signedUpAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Long getSignedUpAt() {
    return signedUpAt;
  }


  public void setSignedUpAt(Long signedUpAt) {
    this.signedUpAt = signedUpAt;
  }


  public User updatedAt(Long updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Long getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }


  public User _new(Boolean _new) {
    
    this._new = _new;
    return this;
  }

   /**
   * Get _new
   * @return _new
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getNew() {
    return _new;
  }


  public void setNew(Boolean _new) {
    this._new = _new;
  }


  public User systemAccess(Boolean systemAccess) {
    
    this.systemAccess = systemAccess;
    return this;
  }

   /**
   * Allows to access backend-only APIs. Use &#x60;appSecret&#x60; auth to obtain token with this access.
   * @return systemAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows to access backend-only APIs. Use `appSecret` auth to obtain token with this access.")

  public Boolean getSystemAccess() {
    return systemAccess;
  }


  public void setSystemAccess(Boolean systemAccess) {
    this.systemAccess = systemAccess;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public User putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.logins, user.logins) &&
        Objects.equals(this.auths, user.auths) &&
        Objects.equals(this.factors, user.factors) &&
        Objects.equals(this.signedUpAt, user.signedUpAt) &&
        Objects.equals(this.updatedAt, user.updatedAt) &&
        Objects.equals(this._new, user._new) &&
        Objects.equals(this.systemAccess, user.systemAccess)&&
        Objects.equals(this.additionalProperties, user.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, logins, auths, factors, signedUpAt, updatedAt, _new, systemAccess, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logins: ").append(toIndentedString(logins)).append("\n");
    sb.append("    auths: ").append(toIndentedString(auths)).append("\n");
    sb.append("    factors: ").append(toIndentedString(factors)).append("\n");
    sb.append("    signedUpAt: ").append(toIndentedString(signedUpAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    _new: ").append(toIndentedString(_new)).append("\n");
    sb.append("    systemAccess: ").append(toIndentedString(systemAccess)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("logins");
    openapiFields.add("auths");
    openapiFields.add("factors");
    openapiFields.add("signedUpAt");
    openapiFields.add("updatedAt");
    openapiFields.add("new");
    openapiFields.add("systemAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("logins");
    openapiRequiredFields.add("auths");
    openapiRequiredFields.add("factors");
    openapiRequiredFields.add("signedUpAt");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to User
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (User.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("logins") != null && !jsonObj.get("logins").isJsonNull()) {
        JsonArray jsonArraylogins = jsonObj.getAsJsonArray("logins");
        if (jsonArraylogins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logins` to be an array in the JSON string but got `%s`", jsonObj.get("logins").toString()));
          }

          // validate the optional field `logins` (array)
          for (int i = 0; i < jsonArraylogins.size(); i++) {
            Login.validateJsonObject(jsonArraylogins.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("factors") != null && !jsonObj.get("factors").isJsonNull()) && !jsonObj.get("factors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `factors` to be an array in the JSON string but got `%s`", jsonObj.get("factors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             User instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User
  * @throws IOException if the JSON string is invalid with respect to User
  */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

 /**
  * Convert an instance of User to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

