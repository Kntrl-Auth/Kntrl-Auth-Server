/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import app.kntrl.client.generated.infra.JSON;

/**
 * OAuthCfgAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-07T19:30:17.809690+03:00[Europe/Kiev]")
public class OAuthCfgAllOf {
  public static final String SERIALIZED_NAME_EXTRACT_LOGIN = "extractLogin";
  @SerializedName(SERIALIZED_NAME_EXTRACT_LOGIN)
  private String extractLogin;

  public static final String SERIALIZED_NAME_TOKEN_URL = "tokenUrl";
  @SerializedName(SERIALIZED_NAME_TOKEN_URL)
  private String tokenUrl;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_USER_INFO_URL = "userInfoUrl";
  @SerializedName(SERIALIZED_NAME_USER_INFO_URL)
  private String userInfoUrl;

  public static final String SERIALIZED_NAME_SEND_TOKEN_IN_QUERY = "sendTokenInQuery";
  @SerializedName(SERIALIZED_NAME_SEND_TOKEN_IN_QUERY)
  private String sendTokenInQuery;

  public static final String SERIALIZED_NAME_SEND_TOKEN_IN_HEADER = "sendTokenInHeader";
  @SerializedName(SERIALIZED_NAME_SEND_TOKEN_IN_HEADER)
  private Boolean sendTokenInHeader;

  public static final String SERIALIZED_NAME_EXTRACT_PUBLIC_DATA = "extractPublicData";
  @SerializedName(SERIALIZED_NAME_EXTRACT_PUBLIC_DATA)
  private Map<String, String> extractPublicData = null;

  public OAuthCfgAllOf() { 
  }

  public OAuthCfgAllOf extractLogin(String extractLogin) {
    
    this.extractLogin = extractLogin;
    return this;
  }

   /**
   * Path for login in id-token or user-info endpoint response. e.g. &#x60;res.user.id&#x60; extracts user login from &#x60;{ \&quot;res\&quot;: { \&quot;user\&quot;: { \&quot;id\&quot;: \&quot;...\&quot; } } }&#x60;
   * @return extractLogin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Path for login in id-token or user-info endpoint response. e.g. `res.user.id` extracts user login from `{ \"res\": { \"user\": { \"id\": \"...\" } } }`")

  public String getExtractLogin() {
    return extractLogin;
  }


  public void setExtractLogin(String extractLogin) {
    this.extractLogin = extractLogin;
  }


  public OAuthCfgAllOf tokenUrl(String tokenUrl) {
    
    this.tokenUrl = tokenUrl;
    return this;
  }

   /**
   * Url to get access token by authorisation code.
   * @return tokenUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Url to get access token by authorisation code.")

  public String getTokenUrl() {
    return tokenUrl;
  }


  public void setTokenUrl(String tokenUrl) {
    this.tokenUrl = tokenUrl;
  }


  public OAuthCfgAllOf clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * OAuth client id. Client must be registered on OAuth provider (e.g. facebook, google)
   * @return clientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth client id. Client must be registered on OAuth provider (e.g. facebook, google)")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OAuthCfgAllOf clientSecret(String clientSecret) {
    
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * OAuth client secret.
   * @return clientSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth client secret.")

  public String getClientSecret() {
    return clientSecret;
  }


  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public OAuthCfgAllOf userInfoUrl(String userInfoUrl) {
    
    this.userInfoUrl = userInfoUrl;
    return this;
  }

   /**
   * If access token provided in request, app tries to extract user id from user-info endpoint.
   * @return userInfoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If access token provided in request, app tries to extract user id from user-info endpoint.")

  public String getUserInfoUrl() {
    return userInfoUrl;
  }


  public void setUserInfoUrl(String userInfoUrl) {
    this.userInfoUrl = userInfoUrl;
  }


  public OAuthCfgAllOf sendTokenInQuery(String sendTokenInQuery) {
    
    this.sendTokenInQuery = sendTokenInQuery;
    return this;
  }

   /**
   * Send token in query param.
   * @return sendTokenInQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Send token in query param.")

  public String getSendTokenInQuery() {
    return sendTokenInQuery;
  }


  public void setSendTokenInQuery(String sendTokenInQuery) {
    this.sendTokenInQuery = sendTokenInQuery;
  }


  public OAuthCfgAllOf sendTokenInHeader(Boolean sendTokenInHeader) {
    
    this.sendTokenInHeader = sendTokenInHeader;
    return this;
  }

   /**
   * Send token in Authorisation header.
   * @return sendTokenInHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Send token in Authorisation header.")

  public Boolean getSendTokenInHeader() {
    return sendTokenInHeader;
  }


  public void setSendTokenInHeader(Boolean sendTokenInHeader) {
    this.sendTokenInHeader = sendTokenInHeader;
  }


  public OAuthCfgAllOf extractPublicData(Map<String, String> extractPublicData) {
    
    this.extractPublicData = extractPublicData;
    return this;
  }

  public OAuthCfgAllOf putExtractPublicDataItem(String key, String extractPublicDataItem) {
    if (this.extractPublicData == null) {
      this.extractPublicData = new HashMap<>();
    }
    this.extractPublicData.put(key, extractPublicDataItem);
    return this;
  }

   /**
   * Can fill public data by a response of user-info or id-token.
   * @return extractPublicData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Can fill public data by a response of user-info or id-token.")

  public Map<String, String> getExtractPublicData() {
    return extractPublicData;
  }


  public void setExtractPublicData(Map<String, String> extractPublicData) {
    this.extractPublicData = extractPublicData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuthCfgAllOf oauthCfgAllOf = (OAuthCfgAllOf) o;
    return Objects.equals(this.extractLogin, oauthCfgAllOf.extractLogin) &&
        Objects.equals(this.tokenUrl, oauthCfgAllOf.tokenUrl) &&
        Objects.equals(this.clientId, oauthCfgAllOf.clientId) &&
        Objects.equals(this.clientSecret, oauthCfgAllOf.clientSecret) &&
        Objects.equals(this.userInfoUrl, oauthCfgAllOf.userInfoUrl) &&
        Objects.equals(this.sendTokenInQuery, oauthCfgAllOf.sendTokenInQuery) &&
        Objects.equals(this.sendTokenInHeader, oauthCfgAllOf.sendTokenInHeader) &&
        Objects.equals(this.extractPublicData, oauthCfgAllOf.extractPublicData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extractLogin, tokenUrl, clientId, clientSecret, userInfoUrl, sendTokenInQuery, sendTokenInHeader, extractPublicData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuthCfgAllOf {\n");
    sb.append("    extractLogin: ").append(toIndentedString(extractLogin)).append("\n");
    sb.append("    tokenUrl: ").append(toIndentedString(tokenUrl)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    userInfoUrl: ").append(toIndentedString(userInfoUrl)).append("\n");
    sb.append("    sendTokenInQuery: ").append(toIndentedString(sendTokenInQuery)).append("\n");
    sb.append("    sendTokenInHeader: ").append(toIndentedString(sendTokenInHeader)).append("\n");
    sb.append("    extractPublicData: ").append(toIndentedString(extractPublicData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extractLogin");
    openapiFields.add("tokenUrl");
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("userInfoUrl");
    openapiFields.add("sendTokenInQuery");
    openapiFields.add("sendTokenInHeader");
    openapiFields.add("extractPublicData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OAuthCfgAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OAuthCfgAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuthCfgAllOf is not found in the empty JSON string", OAuthCfgAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OAuthCfgAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuthCfgAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("extractLogin") != null && !jsonObj.get("extractLogin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extractLogin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extractLogin").toString()));
      }
      if (jsonObj.get("tokenUrl") != null && !jsonObj.get("tokenUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenUrl").toString()));
      }
      if (jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if (jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if (jsonObj.get("userInfoUrl") != null && !jsonObj.get("userInfoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userInfoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userInfoUrl").toString()));
      }
      if (jsonObj.get("sendTokenInQuery") != null && !jsonObj.get("sendTokenInQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendTokenInQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendTokenInQuery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuthCfgAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuthCfgAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuthCfgAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuthCfgAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuthCfgAllOf>() {
           @Override
           public void write(JsonWriter out, OAuthCfgAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuthCfgAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OAuthCfgAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OAuthCfgAllOf
  * @throws IOException if the JSON string is invalid with respect to OAuthCfgAllOf
  */
  public static OAuthCfgAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuthCfgAllOf.class);
  }

 /**
  * Convert an instance of OAuthCfgAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

