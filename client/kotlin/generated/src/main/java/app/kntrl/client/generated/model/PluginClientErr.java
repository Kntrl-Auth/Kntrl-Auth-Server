/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import app.kntrl.client.generated.model.AccessDenied;
import app.kntrl.client.generated.model.AuthIsNotConfirmed;
import app.kntrl.client.generated.model.AuthIsNotEnabled;
import app.kntrl.client.generated.model.AuthRequiresAnother;
import app.kntrl.client.generated.model.ClientErr;
import app.kntrl.client.generated.model.CodeIsExpired;
import app.kntrl.client.generated.model.CodeIsIncorrect;
import app.kntrl.client.generated.model.CodeTooManyAttempts;
import app.kntrl.client.generated.model.EmailIsIncorrect;
import app.kntrl.client.generated.model.IpNew;
import app.kntrl.client.generated.model.PasswordIsIncorrect;
import app.kntrl.client.generated.model.PasswordIsInvalid;
import app.kntrl.client.generated.model.PluginClientErr;
import app.kntrl.client.generated.model.PluginClientErrAllOf;
import app.kntrl.client.generated.model.QuestionsAnswersIncorrect;
import app.kntrl.client.generated.model.QuestionsAnswersInvalid;
import app.kntrl.client.generated.model.SessionExpired;
import app.kntrl.client.generated.model.SignatureIsIncorrect;
import app.kntrl.client.generated.model.TokenExpired;
import app.kntrl.client.generated.model.TooManyReqs;
import app.kntrl.client.generated.model.Unauthenticated;
import app.kntrl.client.generated.model.UserLoginAlreadyTaken;
import app.kntrl.client.generated.model.UserNotFound;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import app.kntrl.client.generated.infra.JSON;

/**
 * PluginClientErr
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-07T19:30:17.809690+03:00[Europe/Kiev]")
public class PluginClientErr extends ClientErr {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, Object> data = null;

  public PluginClientErr() { 
    this.code = this.getClass().getSimpleName();
  }

  public PluginClientErr data(Map<String, Object> data) {
    
    this.data = data;
    return this;
  }

  public PluginClientErr putDataItem(String key, Object dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getData() {
    return data;
  }


  public void setData(Map<String, Object> data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginClientErr pluginClientErr = (PluginClientErr) o;
    return Objects.equals(this.data, pluginClientErr.data) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginClientErr {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("devMsg");
    openapiFields.add("msg");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("devMsg");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PluginClientErr
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PluginClientErr.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PluginClientErr is not found in the empty JSON string", PluginClientErr.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PluginClientErr.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PluginClientErr` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PluginClientErr.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PluginClientErr.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PluginClientErr' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PluginClientErr> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PluginClientErr.class));

       return (TypeAdapter<T>) new TypeAdapter<PluginClientErr>() {
           @Override
           public void write(JsonWriter out, PluginClientErr value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PluginClientErr read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PluginClientErr given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PluginClientErr
  * @throws IOException if the JSON string is invalid with respect to PluginClientErr
  */
  public static PluginClientErr fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PluginClientErr.class);
  }

 /**
  * Convert an instance of PluginClientErr to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

