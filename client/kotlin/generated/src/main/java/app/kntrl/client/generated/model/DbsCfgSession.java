/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import app.kntrl.client.generated.model.InMemoryCfg;
import app.kntrl.client.generated.model.InTokenCfg;
import app.kntrl.client.generated.model.MongoCfg;
import app.kntrl.client.generated.model.MysqlCfg;
import app.kntrl.client.generated.model.PostgresCfg;
import app.kntrl.client.generated.model.RedisCfg;
import app.kntrl.client.generated.model.RemoteDbCfg;
import app.kntrl.client.generated.model.SqliteCfg;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import app.kntrl.client.generated.infra.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DbsCfgSession extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DbsCfgSession.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DbsCfgSession.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DbsCfgSession' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InMemoryCfg> adapterInMemoryCfg = gson.getDelegateAdapter(this, TypeToken.get(InMemoryCfg.class));
            final TypeAdapter<InTokenCfg> adapterInTokenCfg = gson.getDelegateAdapter(this, TypeToken.get(InTokenCfg.class));
            final TypeAdapter<MongoCfg> adapterMongoCfg = gson.getDelegateAdapter(this, TypeToken.get(MongoCfg.class));
            final TypeAdapter<MysqlCfg> adapterMysqlCfg = gson.getDelegateAdapter(this, TypeToken.get(MysqlCfg.class));
            final TypeAdapter<PostgresCfg> adapterPostgresCfg = gson.getDelegateAdapter(this, TypeToken.get(PostgresCfg.class));
            final TypeAdapter<RedisCfg> adapterRedisCfg = gson.getDelegateAdapter(this, TypeToken.get(RedisCfg.class));
            final TypeAdapter<RemoteDbCfg> adapterRemoteDbCfg = gson.getDelegateAdapter(this, TypeToken.get(RemoteDbCfg.class));
            final TypeAdapter<SqliteCfg> adapterSqliteCfg = gson.getDelegateAdapter(this, TypeToken.get(SqliteCfg.class));

            return (TypeAdapter<T>) new TypeAdapter<DbsCfgSession>() {
                @Override
                public void write(JsonWriter out, DbsCfgSession value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `InMemoryCfg`
                    if (value.getActualInstance() instanceof InMemoryCfg) {
                        JsonObject obj = adapterInMemoryCfg.toJsonTree((InMemoryCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `InTokenCfg`
                    if (value.getActualInstance() instanceof InTokenCfg) {
                        JsonObject obj = adapterInTokenCfg.toJsonTree((InTokenCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MongoCfg`
                    if (value.getActualInstance() instanceof MongoCfg) {
                        JsonObject obj = adapterMongoCfg.toJsonTree((MongoCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MysqlCfg`
                    if (value.getActualInstance() instanceof MysqlCfg) {
                        JsonObject obj = adapterMysqlCfg.toJsonTree((MysqlCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PostgresCfg`
                    if (value.getActualInstance() instanceof PostgresCfg) {
                        JsonObject obj = adapterPostgresCfg.toJsonTree((PostgresCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RedisCfg`
                    if (value.getActualInstance() instanceof RedisCfg) {
                        JsonObject obj = adapterRedisCfg.toJsonTree((RedisCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RemoteDbCfg`
                    if (value.getActualInstance() instanceof RemoteDbCfg) {
                        JsonObject obj = adapterRemoteDbCfg.toJsonTree((RemoteDbCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SqliteCfg`
                    if (value.getActualInstance() instanceof SqliteCfg) {
                        JsonObject obj = adapterSqliteCfg.toJsonTree((SqliteCfg)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: InMemoryCfg, InTokenCfg, MongoCfg, MysqlCfg, PostgresCfg, RedisCfg, RemoteDbCfg, SqliteCfg");
                }

                @Override
                public DbsCfgSession read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize InMemoryCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InMemoryCfg.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'InMemoryCfg'");
                        DbsCfgSession ret = new DbsCfgSession();
                        ret.setActualInstance(adapterInMemoryCfg.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'InMemoryCfg'", e);
                    }

                    // deserialize InTokenCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InTokenCfg.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'InTokenCfg'");
                        DbsCfgSession ret = new DbsCfgSession();
                        ret.setActualInstance(adapterInTokenCfg.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'InTokenCfg'", e);
                    }

                    // deserialize MongoCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MongoCfg.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'MongoCfg'");
                        DbsCfgSession ret = new DbsCfgSession();
                        ret.setActualInstance(adapterMongoCfg.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'MongoCfg'", e);
                    }

                    // deserialize MysqlCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MysqlCfg.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'MysqlCfg'");
                        DbsCfgSession ret = new DbsCfgSession();
                        ret.setActualInstance(adapterMysqlCfg.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'MysqlCfg'", e);
                    }

                    // deserialize PostgresCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PostgresCfg.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'PostgresCfg'");
                        DbsCfgSession ret = new DbsCfgSession();
                        ret.setActualInstance(adapterPostgresCfg.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'PostgresCfg'", e);
                    }

                    // deserialize RedisCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RedisCfg.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'RedisCfg'");
                        DbsCfgSession ret = new DbsCfgSession();
                        ret.setActualInstance(adapterRedisCfg.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'RedisCfg'", e);
                    }

                    // deserialize RemoteDbCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RemoteDbCfg.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'RemoteDbCfg'");
                        DbsCfgSession ret = new DbsCfgSession();
                        ret.setActualInstance(adapterRemoteDbCfg.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'RemoteDbCfg'", e);
                    }

                    // deserialize SqliteCfg
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SqliteCfg.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'SqliteCfg'");
                        DbsCfgSession ret = new DbsCfgSession();
                        ret.setActualInstance(adapterSqliteCfg.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'SqliteCfg'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for DbsCfgSession: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public DbsCfgSession() {
        super("anyOf", Boolean.FALSE);
    }

    public DbsCfgSession(InMemoryCfg o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DbsCfgSession(InTokenCfg o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DbsCfgSession(MongoCfg o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DbsCfgSession(MysqlCfg o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DbsCfgSession(PostgresCfg o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DbsCfgSession(RedisCfg o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DbsCfgSession(RemoteDbCfg o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DbsCfgSession(SqliteCfg o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("InMemoryCfg", new GenericType<InMemoryCfg>() {
        });
        schemas.put("InTokenCfg", new GenericType<InTokenCfg>() {
        });
        schemas.put("MongoCfg", new GenericType<MongoCfg>() {
        });
        schemas.put("MysqlCfg", new GenericType<MysqlCfg>() {
        });
        schemas.put("PostgresCfg", new GenericType<PostgresCfg>() {
        });
        schemas.put("RedisCfg", new GenericType<RedisCfg>() {
        });
        schemas.put("RemoteDbCfg", new GenericType<RemoteDbCfg>() {
        });
        schemas.put("SqliteCfg", new GenericType<SqliteCfg>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return DbsCfgSession.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * InMemoryCfg, InTokenCfg, MongoCfg, MysqlCfg, PostgresCfg, RedisCfg, RemoteDbCfg, SqliteCfg
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof InMemoryCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InTokenCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MongoCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MysqlCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PostgresCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RedisCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RemoteDbCfg) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SqliteCfg) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be InMemoryCfg, InTokenCfg, MongoCfg, MysqlCfg, PostgresCfg, RedisCfg, RemoteDbCfg, SqliteCfg");
    }

    /**
     * Get the actual instance, which can be the following:
     * InMemoryCfg, InTokenCfg, MongoCfg, MysqlCfg, PostgresCfg, RedisCfg, RemoteDbCfg, SqliteCfg
     *
     * @return The actual instance (InMemoryCfg, InTokenCfg, MongoCfg, MysqlCfg, PostgresCfg, RedisCfg, RemoteDbCfg, SqliteCfg)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `InMemoryCfg`. If the actual instance is not `InMemoryCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InMemoryCfg`
     * @throws ClassCastException if the instance is not `InMemoryCfg`
     */
    public InMemoryCfg getInMemoryCfg() throws ClassCastException {
        return (InMemoryCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InTokenCfg`. If the actual instance is not `InTokenCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InTokenCfg`
     * @throws ClassCastException if the instance is not `InTokenCfg`
     */
    public InTokenCfg getInTokenCfg() throws ClassCastException {
        return (InTokenCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MongoCfg`. If the actual instance is not `MongoCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MongoCfg`
     * @throws ClassCastException if the instance is not `MongoCfg`
     */
    public MongoCfg getMongoCfg() throws ClassCastException {
        return (MongoCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MysqlCfg`. If the actual instance is not `MysqlCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MysqlCfg`
     * @throws ClassCastException if the instance is not `MysqlCfg`
     */
    public MysqlCfg getMysqlCfg() throws ClassCastException {
        return (MysqlCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PostgresCfg`. If the actual instance is not `PostgresCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PostgresCfg`
     * @throws ClassCastException if the instance is not `PostgresCfg`
     */
    public PostgresCfg getPostgresCfg() throws ClassCastException {
        return (PostgresCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RedisCfg`. If the actual instance is not `RedisCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RedisCfg`
     * @throws ClassCastException if the instance is not `RedisCfg`
     */
    public RedisCfg getRedisCfg() throws ClassCastException {
        return (RedisCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RemoteDbCfg`. If the actual instance is not `RemoteDbCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RemoteDbCfg`
     * @throws ClassCastException if the instance is not `RemoteDbCfg`
     */
    public RemoteDbCfg getRemoteDbCfg() throws ClassCastException {
        return (RemoteDbCfg)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SqliteCfg`. If the actual instance is not `SqliteCfg`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SqliteCfg`
     * @throws ClassCastException if the instance is not `SqliteCfg`
     */
    public SqliteCfg getSqliteCfg() throws ClassCastException {
        return (SqliteCfg)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DbsCfgSession
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate anyOf schemas one by one
    int validCount = 0;
    // validate the json string with InMemoryCfg
    try {
      InMemoryCfg.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with InTokenCfg
    try {
      InTokenCfg.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with MongoCfg
    try {
      MongoCfg.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with MysqlCfg
    try {
      MysqlCfg.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with PostgresCfg
    try {
      PostgresCfg.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with RedisCfg
    try {
      RedisCfg.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with RemoteDbCfg
    try {
      RemoteDbCfg.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with SqliteCfg
    try {
      SqliteCfg.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount == 0) {
      throw new IOException(String.format("The JSON string is invalid for DbsCfgSession with anyOf schemas: InMemoryCfg, InTokenCfg, MongoCfg, MysqlCfg, PostgresCfg, RedisCfg, RemoteDbCfg, SqliteCfg. JSON: %s", jsonObj.toString()));
    }
  }

 /**
  * Create an instance of DbsCfgSession given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbsCfgSession
  * @throws IOException if the JSON string is invalid with respect to DbsCfgSession
  */
  public static DbsCfgSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbsCfgSession.class);
  }

 /**
  * Convert an instance of DbsCfgSession to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

