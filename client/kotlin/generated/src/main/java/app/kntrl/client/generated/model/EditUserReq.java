/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import app.kntrl.client.generated.infra.JSON;

/**
 * EditUserReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EditUserReq {
  public static final String SERIALIZED_NAME_FACTORS = "factors";
  @SerializedName(SERIALIZED_NAME_FACTORS)
  private Map<String, Boolean> factors = null;

  public static final String SERIALIZED_NAME_LOGINS = "logins";
  @SerializedName(SERIALIZED_NAME_LOGINS)
  private Map<String, String> logins = null;

  public static final String SERIALIZED_NAME_AUTH_REQS = "authReqs";
  @SerializedName(SERIALIZED_NAME_AUTH_REQS)
  private Map<String, Object> authReqs = null;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_SYSTEM_ACCESS = "systemAccess";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ACCESS)
  private Boolean systemAccess;

  public EditUserReq() { 
  }

  public EditUserReq factors(Map<String, Boolean> factors) {
    
    this.factors = factors;
    return this;
  }

  public EditUserReq putFactorsItem(String key, Boolean factorsItem) {
    if (this.factors == null) {
      this.factors = new HashMap<>();
    }
    this.factors.put(key, factorsItem);
    return this;
  }

   /**
   * Optional factors to enable/disable. If factor marked as required in config, it will be considered enabled by default and this request doesn&#39;t change this. 
   * @return factors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional factors to enable/disable. If factor marked as required in config, it will be considered enabled by default and this request doesn't change this. ")

  public Map<String, Boolean> getFactors() {
    return factors;
  }


  public void setFactors(Map<String, Boolean> factors) {
    this.factors = factors;
  }


  public EditUserReq logins(Map<String, String> logins) {
    
    this.logins = logins;
    return this;
  }

  public EditUserReq putLoginsItem(String key, String loginsItem) {
    if (this.logins == null) {
      this.logins = new HashMap<>();
    }
    this.logins.put(key, loginsItem);
    return this;
  }

   /**
   * Get logins
   * @return logins
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getLogins() {
    return logins;
  }


  public void setLogins(Map<String, String> logins) {
    this.logins = logins;
  }


  public EditUserReq authReqs(Map<String, Object> authReqs) {
    
    this.authReqs = authReqs;
    return this;
  }

  public EditUserReq putAuthReqsItem(String key, Object authReqsItem) {
    if (this.authReqs == null) {
      this.authReqs = new HashMap<>();
    }
    this.authReqs.put(key, authReqsItem);
    return this;
  }

   /**
   * Get authReqs
   * @return authReqs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getAuthReqs() {
    return authReqs;
  }


  public void setAuthReqs(Map<String, Object> authReqs) {
    this.authReqs = authReqs;
  }


  public EditUserReq dryRun(Boolean dryRun) {
    
    this.dryRun = dryRun;
    return this;
  }

   /**
   * Get dryRun
   * @return dryRun
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDryRun() {
    return dryRun;
  }


  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public EditUserReq systemAccess(Boolean systemAccess) {
    
    this.systemAccess = systemAccess;
    return this;
  }

   /**
   * Get systemAccess
   * @return systemAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSystemAccess() {
    return systemAccess;
  }


  public void setSystemAccess(Boolean systemAccess) {
    this.systemAccess = systemAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditUserReq editUserReq = (EditUserReq) o;
    return Objects.equals(this.factors, editUserReq.factors) &&
        Objects.equals(this.logins, editUserReq.logins) &&
        Objects.equals(this.authReqs, editUserReq.authReqs) &&
        Objects.equals(this.dryRun, editUserReq.dryRun) &&
        Objects.equals(this.systemAccess, editUserReq.systemAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(factors, logins, authReqs, dryRun, systemAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditUserReq {\n");
    sb.append("    factors: ").append(toIndentedString(factors)).append("\n");
    sb.append("    logins: ").append(toIndentedString(logins)).append("\n");
    sb.append("    authReqs: ").append(toIndentedString(authReqs)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    systemAccess: ").append(toIndentedString(systemAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("factors");
    openapiFields.add("logins");
    openapiFields.add("authReqs");
    openapiFields.add("dryRun");
    openapiFields.add("systemAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EditUserReq
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EditUserReq.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditUserReq is not found in the empty JSON string", EditUserReq.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EditUserReq.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditUserReq` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditUserReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditUserReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditUserReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditUserReq.class));

       return (TypeAdapter<T>) new TypeAdapter<EditUserReq>() {
           @Override
           public void write(JsonWriter out, EditUserReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditUserReq read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EditUserReq given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EditUserReq
  * @throws IOException if the JSON string is invalid with respect to EditUserReq
  */
  public static EditUserReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditUserReq.class);
  }

 /**
  * Convert an instance of EditUserReq to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

