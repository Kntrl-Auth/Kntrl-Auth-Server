/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.api;

import app.kntrl.client.generated.infra.ApiCallback;
import app.kntrl.client.generated.infra.ApiClient;
import app.kntrl.client.generated.infra.ApiException;
import app.kntrl.client.generated.infra.ApiResponse;
import app.kntrl.client.generated.infra.Configuration;
import app.kntrl.client.generated.infra.Pair;
import app.kntrl.client.generated.infra.ProgressRequestBody;
import app.kntrl.client.generated.infra.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import app.kntrl.client.generated.model.ClientErr;
import app.kntrl.client.generated.model.ConfirmUserAuthsReq;
import app.kntrl.client.generated.model.EditUserReq;
import app.kntrl.client.generated.model.IntegrationErr;
import app.kntrl.client.generated.model.SaveUserReq;
import app.kntrl.client.generated.model.SaveUserRes;
import app.kntrl.client.generated.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for confirmUserAuths
     * @param confirmUserAuthsReq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmUserAuthsCall(ConfirmUserAuthsReq confirmUserAuthsReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = confirmUserAuthsReq;

        // create path and map variables
        String localVarPath = "/api/user/auth/confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmUserAuthsValidateBeforeCall(ConfirmUserAuthsReq confirmUserAuthsReq, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'confirmUserAuthsReq' is set
        if (confirmUserAuthsReq == null) {
            throw new ApiException("Missing the required parameter 'confirmUserAuthsReq' when calling confirmUserAuths(Async)");
        }
        

        okhttp3.Call localVarCall = confirmUserAuthsCall(confirmUserAuthsReq, _callback);
        return localVarCall;

    }

    /**
     * Confirm enabled auth
     * 
     * @param confirmUserAuthsReq  (required)
     * @return SaveUserRes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SaveUserRes confirmUserAuths(ConfirmUserAuthsReq confirmUserAuthsReq) throws ApiException {
        ApiResponse<SaveUserRes> localVarResp = confirmUserAuthsWithHttpInfo(confirmUserAuthsReq);
        return localVarResp.getData();
    }

    /**
     * Confirm enabled auth
     * 
     * @param confirmUserAuthsReq  (required)
     * @return ApiResponse&lt;SaveUserRes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaveUserRes> confirmUserAuthsWithHttpInfo(ConfirmUserAuthsReq confirmUserAuthsReq) throws ApiException {
        okhttp3.Call localVarCall = confirmUserAuthsValidateBeforeCall(confirmUserAuthsReq, null);
        Type localVarReturnType = new TypeToken<SaveUserRes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirm enabled auth (asynchronously)
     * 
     * @param confirmUserAuthsReq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmUserAuthsAsync(ConfirmUserAuthsReq confirmUserAuthsReq, final ApiCallback<SaveUserRes> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmUserAuthsValidateBeforeCall(confirmUserAuthsReq, _callback);
        Type localVarReturnType = new TypeToken<SaveUserRes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editUser
     * @param id  (required)
     * @param editUserReq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editUserCall(String id, EditUserReq editUserReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editUserReq;

        // create path and map variables
        String localVarPath = "/api/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editUserValidateBeforeCall(String id, EditUserReq editUserReq, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editUser(Async)");
        }
        
        // verify the required parameter 'editUserReq' is set
        if (editUserReq == null) {
            throw new ApiException("Missing the required parameter 'editUserReq' when calling editUser(Async)");
        }
        

        okhttp3.Call localVarCall = editUserCall(id, editUserReq, _callback);
        return localVarCall;

    }

    /**
     * (Admin API) Edit user
     * 
     * @param id  (required)
     * @param editUserReq  (required)
     * @return SaveUserRes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SaveUserRes editUser(String id, EditUserReq editUserReq) throws ApiException {
        ApiResponse<SaveUserRes> localVarResp = editUserWithHttpInfo(id, editUserReq);
        return localVarResp.getData();
    }

    /**
     * (Admin API) Edit user
     * 
     * @param id  (required)
     * @param editUserReq  (required)
     * @return ApiResponse&lt;SaveUserRes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaveUserRes> editUserWithHttpInfo(String id, EditUserReq editUserReq) throws ApiException {
        okhttp3.Call localVarCall = editUserValidateBeforeCall(id, editUserReq, null);
        Type localVarReturnType = new TypeToken<SaveUserRes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Admin API) Edit user (asynchronously)
     * 
     * @param id  (required)
     * @param editUserReq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editUserAsync(String id, EditUserReq editUserReq, final ApiCallback<SaveUserRes> _callback) throws ApiException {

        okhttp3.Call localVarCall = editUserValidateBeforeCall(id, editUserReq, _callback);
        Type localVarReturnType = new TypeToken<SaveUserRes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getUserCall(_callback);
        return localVarCall;

    }

    /**
     * Get user
     * 
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public User getUser() throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get user
     * 
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveUser
     * @param saveUserReq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveUserCall(SaveUserReq saveUserReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveUserReq;

        // create path and map variables
        String localVarPath = "/api/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveUserValidateBeforeCall(SaveUserReq saveUserReq, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'saveUserReq' is set
        if (saveUserReq == null) {
            throw new ApiException("Missing the required parameter 'saveUserReq' when calling saveUser(Async)");
        }
        

        okhttp3.Call localVarCall = saveUserCall(saveUserReq, _callback);
        return localVarCall;

    }

    /**
     * Save user
     * Saves users. Be careful with order. To avoid potential \&quot;duplicated entry\&quot; problem, remove operation goes firs, then update, then insert. 
     * @param saveUserReq  (required)
     * @return SaveUserRes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SaveUserRes saveUser(SaveUserReq saveUserReq) throws ApiException {
        ApiResponse<SaveUserRes> localVarResp = saveUserWithHttpInfo(saveUserReq);
        return localVarResp.getData();
    }

    /**
     * Save user
     * Saves users. Be careful with order. To avoid potential \&quot;duplicated entry\&quot; problem, remove operation goes firs, then update, then insert. 
     * @param saveUserReq  (required)
     * @return ApiResponse&lt;SaveUserRes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaveUserRes> saveUserWithHttpInfo(SaveUserReq saveUserReq) throws ApiException {
        okhttp3.Call localVarCall = saveUserValidateBeforeCall(saveUserReq, null);
        Type localVarReturnType = new TypeToken<SaveUserRes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save user (asynchronously)
     * Saves users. Be careful with order. To avoid potential \&quot;duplicated entry\&quot; problem, remove operation goes firs, then update, then insert. 
     * @param saveUserReq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 4XX </td><td> Client error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveUserAsync(SaveUserReq saveUserReq, final ApiCallback<SaveUserRes> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveUserValidateBeforeCall(saveUserReq, _callback);
        Type localVarReturnType = new TypeToken<SaveUserRes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
