/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import app.kntrl.client.generated.model.Device;
import app.kntrl.client.generated.model.LoginId;
import app.kntrl.client.generated.model.NextFactor;
import app.kntrl.client.generated.model.UnconfirmedAuth;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import app.kntrl.client.generated.infra.JSON;

/**
 * Session
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-07T14:36:53.211699+03:00[Europe/Kiev]")
public class Session {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENTRY = "entry";
  @SerializedName(SERIALIZED_NAME_ENTRY)
  private String entry;

  public static final String SERIALIZED_NAME_IDENTIFIED_BY = "identifiedBy";
  @SerializedName(SERIALIZED_NAME_IDENTIFIED_BY)
  private List<LoginId> identifiedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_AUTHENTICATED_BY = "authenticatedBy";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATED_BY)
  private Map<String, String> authenticatedBy = new HashMap<>();

  public static final String SERIALIZED_NAME_UNCONFIRMED_AUTHS = "unconfirmedAuths";
  @SerializedName(SERIALIZED_NAME_UNCONFIRMED_AUTHS)
  private Map<String, UnconfirmedAuth> unconfirmedAuths = new HashMap<>();

  public static final String SERIALIZED_NAME_NEXT_FACTORS = "nextFactors";
  @SerializedName(SERIALIZED_NAME_NEXT_FACTORS)
  private List<NextFactor> nextFactors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNED_IN_AT = "signedInAt";
  @SerializedName(SERIALIZED_NAME_SIGNED_IN_AT)
  private Long signedInAt;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private Long expiresAt;

  public static final String SERIALIZED_NAME_REFRESHED_AT = "refreshedAt";
  @SerializedName(SERIALIZED_NAME_REFRESHED_AT)
  private Long refreshedAt;

  public static final String SERIALIZED_NAME_NEW_USER = "newUser";
  @SerializedName(SERIALIZED_NAME_NEW_USER)
  private Boolean newUser;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private Device device;

  public static final String SERIALIZED_NAME_SYSTEM_ACCESS = "systemAccess";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ACCESS)
  private Boolean systemAccess;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private Boolean expired;

  public static final String SERIALIZED_NAME_AUTHENTICATED = "authenticated";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATED)
  private Boolean authenticated;

  public Session() { 
  }

  public Session id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Session entry(String entry) {
    
    this.entry = entry;
    return this;
  }

   /**
   * Entry that authenticates this session
   * @return entry
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Entry that authenticates this session")

  public String getEntry() {
    return entry;
  }


  public void setEntry(String entry) {
    this.entry = entry;
  }


  public Session identifiedBy(List<LoginId> identifiedBy) {
    
    this.identifiedBy = identifiedBy;
    return this;
  }

  public Session addIdentifiedByItem(LoginId identifiedByItem) {
    this.identifiedBy.add(identifiedByItem);
    return this;
  }

   /**
   * Login used to identify this user
   * @return identifiedBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Login used to identify this user")

  public List<LoginId> getIdentifiedBy() {
    return identifiedBy;
  }


  public void setIdentifiedBy(List<LoginId> identifiedBy) {
    this.identifiedBy = identifiedBy;
  }


  public Session userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public Session authenticatedBy(Map<String, String> authenticatedBy) {
    
    this.authenticatedBy = authenticatedBy;
    return this;
  }

  public Session putAuthenticatedByItem(String key, String authenticatedByItem) {
    this.authenticatedBy.put(key, authenticatedByItem);
    return this;
  }

   /**
   * Authenticator used for factors 
   * @return authenticatedBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Authenticator used for factors ")

  public Map<String, String> getAuthenticatedBy() {
    return authenticatedBy;
  }


  public void setAuthenticatedBy(Map<String, String> authenticatedBy) {
    this.authenticatedBy = authenticatedBy;
  }


  public Session unconfirmedAuths(Map<String, UnconfirmedAuth> unconfirmedAuths) {
    
    this.unconfirmedAuths = unconfirmedAuths;
    return this;
  }

  public Session putUnconfirmedAuthsItem(String key, UnconfirmedAuth unconfirmedAuthsItem) {
    this.unconfirmedAuths.put(key, unconfirmedAuthsItem);
    return this;
  }

   /**
   * Auths that waiting for confirmation 
   * @return unconfirmedAuths
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Auths that waiting for confirmation ")

  public Map<String, UnconfirmedAuth> getUnconfirmedAuths() {
    return unconfirmedAuths;
  }


  public void setUnconfirmedAuths(Map<String, UnconfirmedAuth> unconfirmedAuths) {
    this.unconfirmedAuths = unconfirmedAuths;
  }


  public Session nextFactors(List<NextFactor> nextFactors) {
    
    this.nextFactors = nextFactors;
    return this;
  }

  public Session addNextFactorsItem(NextFactor nextFactorsItem) {
    this.nextFactors.add(nextFactorsItem);
    return this;
  }

   /**
   * List of factors needed to authenticate this session
   * @return nextFactors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of factors needed to authenticate this session")

  public List<NextFactor> getNextFactors() {
    return nextFactors;
  }


  public void setNextFactors(List<NextFactor> nextFactors) {
    this.nextFactors = nextFactors;
  }


  public Session signedInAt(Long signedInAt) {
    
    this.signedInAt = signedInAt;
    return this;
  }

   /**
   * Get signedInAt
   * @return signedInAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Long getSignedInAt() {
    return signedInAt;
  }


  public void setSignedInAt(Long signedInAt) {
    this.signedInAt = signedInAt;
  }


  public Session expiresAt(Long expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Get expiresAt
   * @return expiresAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Long getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(Long expiresAt) {
    this.expiresAt = expiresAt;
  }


  public Session refreshedAt(Long refreshedAt) {
    
    this.refreshedAt = refreshedAt;
    return this;
  }

   /**
   * Get refreshedAt
   * @return refreshedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Long getRefreshedAt() {
    return refreshedAt;
  }


  public void setRefreshedAt(Long refreshedAt) {
    this.refreshedAt = refreshedAt;
  }


  public Session newUser(Boolean newUser) {
    
    this.newUser = newUser;
    return this;
  }

   /**
   * Get newUser
   * @return newUser
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getNewUser() {
    return newUser;
  }


  public void setNewUser(Boolean newUser) {
    this.newUser = newUser;
  }


  public Session device(Device device) {
    
    this.device = device;
    return this;
  }

   /**
   * Get device
   * @return device
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Device getDevice() {
    return device;
  }


  public void setDevice(Device device) {
    this.device = device;
  }


  public Session systemAccess(Boolean systemAccess) {
    
    this.systemAccess = systemAccess;
    return this;
  }

   /**
   * Get systemAccess
   * @return systemAccess
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSystemAccess() {
    return systemAccess;
  }


  public void setSystemAccess(Boolean systemAccess) {
    this.systemAccess = systemAccess;
  }


  public Session expired(Boolean expired) {
    
    this.expired = expired;
    return this;
  }

   /**
   * Get expired
   * @return expired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getExpired() {
    return expired;
  }


  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public Session authenticated(Boolean authenticated) {
    
    this.authenticated = authenticated;
    return this;
  }

   /**
   * Get authenticated
   * @return authenticated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAuthenticated() {
    return authenticated;
  }


  public void setAuthenticated(Boolean authenticated) {
    this.authenticated = authenticated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.id, session.id) &&
        Objects.equals(this.entry, session.entry) &&
        Objects.equals(this.identifiedBy, session.identifiedBy) &&
        Objects.equals(this.userId, session.userId) &&
        Objects.equals(this.authenticatedBy, session.authenticatedBy) &&
        Objects.equals(this.unconfirmedAuths, session.unconfirmedAuths) &&
        Objects.equals(this.nextFactors, session.nextFactors) &&
        Objects.equals(this.signedInAt, session.signedInAt) &&
        Objects.equals(this.expiresAt, session.expiresAt) &&
        Objects.equals(this.refreshedAt, session.refreshedAt) &&
        Objects.equals(this.newUser, session.newUser) &&
        Objects.equals(this.device, session.device) &&
        Objects.equals(this.systemAccess, session.systemAccess) &&
        Objects.equals(this.expired, session.expired) &&
        Objects.equals(this.authenticated, session.authenticated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, entry, identifiedBy, userId, authenticatedBy, unconfirmedAuths, nextFactors, signedInAt, expiresAt, refreshedAt, newUser, device, systemAccess, expired, authenticated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    entry: ").append(toIndentedString(entry)).append("\n");
    sb.append("    identifiedBy: ").append(toIndentedString(identifiedBy)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    authenticatedBy: ").append(toIndentedString(authenticatedBy)).append("\n");
    sb.append("    unconfirmedAuths: ").append(toIndentedString(unconfirmedAuths)).append("\n");
    sb.append("    nextFactors: ").append(toIndentedString(nextFactors)).append("\n");
    sb.append("    signedInAt: ").append(toIndentedString(signedInAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    refreshedAt: ").append(toIndentedString(refreshedAt)).append("\n");
    sb.append("    newUser: ").append(toIndentedString(newUser)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    systemAccess: ").append(toIndentedString(systemAccess)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    authenticated: ").append(toIndentedString(authenticated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("entry");
    openapiFields.add("identifiedBy");
    openapiFields.add("userId");
    openapiFields.add("authenticatedBy");
    openapiFields.add("unconfirmedAuths");
    openapiFields.add("nextFactors");
    openapiFields.add("signedInAt");
    openapiFields.add("expiresAt");
    openapiFields.add("refreshedAt");
    openapiFields.add("newUser");
    openapiFields.add("device");
    openapiFields.add("systemAccess");
    openapiFields.add("expired");
    openapiFields.add("authenticated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("entry");
    openapiRequiredFields.add("identifiedBy");
    openapiRequiredFields.add("authenticatedBy");
    openapiRequiredFields.add("unconfirmedAuths");
    openapiRequiredFields.add("nextFactors");
    openapiRequiredFields.add("signedInAt");
    openapiRequiredFields.add("expiresAt");
    openapiRequiredFields.add("refreshedAt");
    openapiRequiredFields.add("newUser");
    openapiRequiredFields.add("device");
    openapiRequiredFields.add("systemAccess");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Session
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Session.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Session is not found in the empty JSON string", Session.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Session.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Session` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Session.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("entry") != null && !jsonObj.get("entry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entry").toString()));
      }
      JsonArray jsonArrayidentifiedBy = jsonObj.getAsJsonArray("identifiedBy");
      if (jsonArrayidentifiedBy != null) {
        // ensure the json data is an array
        if (!jsonObj.get("identifiedBy").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `identifiedBy` to be an array in the JSON string but got `%s`", jsonObj.get("identifiedBy").toString()));
        }

        // validate the optional field `identifiedBy` (array)
        for (int i = 0; i < jsonArrayidentifiedBy.size(); i++) {
          LoginId.validateJsonObject(jsonArrayidentifiedBy.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      JsonArray jsonArraynextFactors = jsonObj.getAsJsonArray("nextFactors");
      if (jsonArraynextFactors != null) {
        // ensure the json data is an array
        if (!jsonObj.get("nextFactors").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `nextFactors` to be an array in the JSON string but got `%s`", jsonObj.get("nextFactors").toString()));
        }

        // validate the optional field `nextFactors` (array)
        for (int i = 0; i < jsonArraynextFactors.size(); i++) {
          NextFactor.validateJsonObject(jsonArraynextFactors.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `device`
      if (jsonObj.getAsJsonObject("device") != null) {
        Device.validateJsonObject(jsonObj.getAsJsonObject("device"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Session.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Session' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Session> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Session.class));

       return (TypeAdapter<T>) new TypeAdapter<Session>() {
           @Override
           public void write(JsonWriter out, Session value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Session read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Session given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Session
  * @throws IOException if the JSON string is invalid with respect to Session
  */
  public static Session fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Session.class);
  }

 /**
  * Convert an instance of Session to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

