/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.infra;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(app.kntrl.client.generated.model.AccessDenied.class, new TypeSelector<app.kntrl.client.generated.model.AccessDenied>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.AccessDenied> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("AccessDenied", app.kntrl.client.generated.model.AccessDenied.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.AnyErr.class, new TypeSelector<app.kntrl.client.generated.model.AnyErr>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.AnyErr> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("ANY_ERR", app.kntrl.client.generated.model.AnyErr.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("INTEGRATION_ERR", app.kntrl.client.generated.model.IntegrationErr.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("NO_AUTH_AVAILABLE_FOR_FACTOR", app.kntrl.client.generated.model.NoAuthAvailableForFactor.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("PLUGIN_ERR", app.kntrl.client.generated.model.PluginErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SERVER_ERR", app.kntrl.client.generated.model.ServerErr.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("AnyErr", app.kntrl.client.generated.model.AnyErr.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.AuthExecRes.class, new TypeSelector<app.kntrl.client.generated.model.AuthExecRes>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.AuthExecRes> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ERR", app.kntrl.client.generated.model.ErrAuthExecRes.class);
                        classByDiscriminatorValue.put("ErrAuthExecRes", app.kntrl.client.generated.model.ErrAuthExecRes.class);
                        classByDiscriminatorValue.put("OK", app.kntrl.client.generated.model.OkAuthExecRes.class);
                        classByDiscriminatorValue.put("OkAuthExecRes", app.kntrl.client.generated.model.OkAuthExecRes.class);
                        classByDiscriminatorValue.put("SKIPPED", app.kntrl.client.generated.model.SkippedAuthExecRes.class);
                        classByDiscriminatorValue.put("SkippedAuthExecRes", app.kntrl.client.generated.model.SkippedAuthExecRes.class);
                        classByDiscriminatorValue.put("AuthExecRes", app.kntrl.client.generated.model.AuthExecRes.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "status"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.AuthIsNotConfirmed.class, new TypeSelector<app.kntrl.client.generated.model.AuthIsNotConfirmed>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.AuthIsNotConfirmed> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("AuthIsNotConfirmed", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.AuthIsNotEnabled.class, new TypeSelector<app.kntrl.client.generated.model.AuthIsNotEnabled>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.AuthIsNotEnabled> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("AuthIsNotEnabled", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.AuthRequiresAnother.class, new TypeSelector<app.kntrl.client.generated.model.AuthRequiresAnother>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.AuthRequiresAnother> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("AuthRequiresAnother", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.ClientErr.class, new TypeSelector<app.kntrl.client.generated.model.ClientErr>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.ClientErr> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("AccessDenied", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AuthIsNotConfirmed", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AuthIsNotEnabled", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AuthRequiresAnother", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("CodeIsExpired", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CodeIsIncorrect", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CodeTooManyAttempts", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("EmailIsIncorrect", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("IpNew", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("PasswordIsIncorrect", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PasswordIsInvalid", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PluginClientErr", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("QuestionsAnswersIncorrect", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QuestionsAnswersInvalid", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("SessionExpired", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SignatureIsIncorrect", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("TokenExpired", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TooManyReqs", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("Unauthenticated", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("UserLoginAlreadyTaken", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("UserNotFound", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("ClientErr", app.kntrl.client.generated.model.ClientErr.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.CodeIsExpired.class, new TypeSelector<app.kntrl.client.generated.model.CodeIsExpired>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.CodeIsExpired> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("CodeIsExpired", app.kntrl.client.generated.model.CodeIsExpired.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.CodeIsIncorrect.class, new TypeSelector<app.kntrl.client.generated.model.CodeIsIncorrect>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.CodeIsIncorrect> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("CodeIsIncorrect", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.CodeTooManyAttempts.class, new TypeSelector<app.kntrl.client.generated.model.CodeTooManyAttempts>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.CodeTooManyAttempts> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("CodeTooManyAttempts", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.EmailIsIncorrect.class, new TypeSelector<app.kntrl.client.generated.model.EmailIsIncorrect>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.EmailIsIncorrect> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("EmailIsIncorrect", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.Err.class, new TypeSelector<app.kntrl.client.generated.model.Err>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.Err> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("ANY_ERR", app.kntrl.client.generated.model.AnyErr.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("AccessDenied", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AnyErr", app.kntrl.client.generated.model.AnyErr.class);
                        classByDiscriminatorValue.put("AuthIsNotConfirmed", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AuthIsNotEnabled", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AuthRequiresAnother", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("ClientErr", app.kntrl.client.generated.model.ClientErr.class);
                        classByDiscriminatorValue.put("CodeIsExpired", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CodeIsIncorrect", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CodeTooManyAttempts", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("EmailIsIncorrect", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("INTEGRATION_ERR", app.kntrl.client.generated.model.IntegrationErr.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("IntegrationErr", app.kntrl.client.generated.model.IntegrationErr.class);
                        classByDiscriminatorValue.put("IpNew", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("NO_AUTH_AVAILABLE_FOR_FACTOR", app.kntrl.client.generated.model.NoAuthAvailableForFactor.class);
                        classByDiscriminatorValue.put("NoAuthAvailableForFactor", app.kntrl.client.generated.model.NoAuthAvailableForFactor.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("PLUGIN_ERR", app.kntrl.client.generated.model.PluginErr.class);
                        classByDiscriminatorValue.put("PasswordIsIncorrect", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PasswordIsInvalid", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PluginClientErr", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("PluginErr", app.kntrl.client.generated.model.PluginErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("QuestionsAnswersIncorrect", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QuestionsAnswersInvalid", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SERVER_ERR", app.kntrl.client.generated.model.ServerErr.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("ServerErr", app.kntrl.client.generated.model.ServerErr.class);
                        classByDiscriminatorValue.put("SessionExpired", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SignatureIsIncorrect", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("TokenExpired", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TooManyReqs", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("Unauthenticated", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("UserLoginAlreadyTaken", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("UserNotFound", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("Err", app.kntrl.client.generated.model.Err.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.ErrAuthExecRes.class, new TypeSelector<app.kntrl.client.generated.model.ErrAuthExecRes>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.ErrAuthExecRes> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ERR", app.kntrl.client.generated.model.ErrAuthExecRes.class);
                        classByDiscriminatorValue.put("OK", app.kntrl.client.generated.model.OkAuthExecRes.class);
                        classByDiscriminatorValue.put("SKIPPED", app.kntrl.client.generated.model.SkippedAuthExecRes.class);
                        classByDiscriminatorValue.put("ErrAuthExecRes", app.kntrl.client.generated.model.ErrAuthExecRes.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "status"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.IntegrationErr.class, new TypeSelector<app.kntrl.client.generated.model.IntegrationErr>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.IntegrationErr> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("INTEGRATION_ERR", app.kntrl.client.generated.model.IntegrationErr.class);
                        classByDiscriminatorValue.put("NO_AUTH_AVAILABLE_FOR_FACTOR", app.kntrl.client.generated.model.NoAuthAvailableForFactor.class);
                        classByDiscriminatorValue.put("NoAuthAvailableForFactor", app.kntrl.client.generated.model.NoAuthAvailableForFactor.class);
                        classByDiscriminatorValue.put("IntegrationErr", app.kntrl.client.generated.model.IntegrationErr.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.IpNew.class, new TypeSelector<app.kntrl.client.generated.model.IpNew>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.IpNew> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("IpNew", app.kntrl.client.generated.model.IpNew.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.NoAuthAvailableForFactor.class, new TypeSelector<app.kntrl.client.generated.model.NoAuthAvailableForFactor>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.NoAuthAvailableForFactor> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("INTEGRATION_ERR", app.kntrl.client.generated.model.IntegrationErr.class);
                        classByDiscriminatorValue.put("NO_AUTH_AVAILABLE_FOR_FACTOR", app.kntrl.client.generated.model.NoAuthAvailableForFactor.class);
                        classByDiscriminatorValue.put("NoAuthAvailableForFactor", app.kntrl.client.generated.model.NoAuthAvailableForFactor.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.OkAuthExecRes.class, new TypeSelector<app.kntrl.client.generated.model.OkAuthExecRes>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.OkAuthExecRes> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ERR", app.kntrl.client.generated.model.ErrAuthExecRes.class);
                        classByDiscriminatorValue.put("OK", app.kntrl.client.generated.model.OkAuthExecRes.class);
                        classByDiscriminatorValue.put("SKIPPED", app.kntrl.client.generated.model.SkippedAuthExecRes.class);
                        classByDiscriminatorValue.put("OkAuthExecRes", app.kntrl.client.generated.model.OkAuthExecRes.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "status"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.PasswordIsIncorrect.class, new TypeSelector<app.kntrl.client.generated.model.PasswordIsIncorrect>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.PasswordIsIncorrect> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("PasswordIsIncorrect", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.PasswordIsInvalid.class, new TypeSelector<app.kntrl.client.generated.model.PasswordIsInvalid>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.PasswordIsInvalid> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("PasswordIsInvalid", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.PluginClientErr.class, new TypeSelector<app.kntrl.client.generated.model.PluginClientErr>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.PluginClientErr> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("PluginClientErr", app.kntrl.client.generated.model.PluginClientErr.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.PluginErr.class, new TypeSelector<app.kntrl.client.generated.model.PluginErr>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.PluginErr> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("PLUGIN_ERR", app.kntrl.client.generated.model.PluginErr.class);
                        classByDiscriminatorValue.put("SERVER_ERR", app.kntrl.client.generated.model.ServerErr.class);
                        classByDiscriminatorValue.put("PluginErr", app.kntrl.client.generated.model.PluginErr.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class, new TypeSelector<app.kntrl.client.generated.model.QuestionsAnswersIncorrect>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.QuestionsAnswersIncorrect> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("QuestionsAnswersIncorrect", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.QuestionsAnswersInvalid.class, new TypeSelector<app.kntrl.client.generated.model.QuestionsAnswersInvalid>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.QuestionsAnswersInvalid> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("QuestionsAnswersInvalid", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.ServerErr.class, new TypeSelector<app.kntrl.client.generated.model.ServerErr>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.ServerErr> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("PLUGIN_ERR", app.kntrl.client.generated.model.PluginErr.class);
                        classByDiscriminatorValue.put("PluginErr", app.kntrl.client.generated.model.PluginErr.class);
                        classByDiscriminatorValue.put("SERVER_ERR", app.kntrl.client.generated.model.ServerErr.class);
                        classByDiscriminatorValue.put("ServerErr", app.kntrl.client.generated.model.ServerErr.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.SessionExpired.class, new TypeSelector<app.kntrl.client.generated.model.SessionExpired>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.SessionExpired> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("SessionExpired", app.kntrl.client.generated.model.SessionExpired.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.SignatureIsIncorrect.class, new TypeSelector<app.kntrl.client.generated.model.SignatureIsIncorrect>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.SignatureIsIncorrect> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("SignatureIsIncorrect", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.SkippedAuthExecRes.class, new TypeSelector<app.kntrl.client.generated.model.SkippedAuthExecRes>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.SkippedAuthExecRes> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ERR", app.kntrl.client.generated.model.ErrAuthExecRes.class);
                        classByDiscriminatorValue.put("OK", app.kntrl.client.generated.model.OkAuthExecRes.class);
                        classByDiscriminatorValue.put("SKIPPED", app.kntrl.client.generated.model.SkippedAuthExecRes.class);
                        classByDiscriminatorValue.put("SkippedAuthExecRes", app.kntrl.client.generated.model.SkippedAuthExecRes.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "status"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.TokenExpired.class, new TypeSelector<app.kntrl.client.generated.model.TokenExpired>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.TokenExpired> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("TokenExpired", app.kntrl.client.generated.model.TokenExpired.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.TooManyReqs.class, new TypeSelector<app.kntrl.client.generated.model.TooManyReqs>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.TooManyReqs> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("TooManyReqs", app.kntrl.client.generated.model.TooManyReqs.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.Unauthenticated.class, new TypeSelector<app.kntrl.client.generated.model.Unauthenticated>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.Unauthenticated> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AccessDenied", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SessionExpired", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TokenExpired", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("UserNotFound", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("Unauthenticated", app.kntrl.client.generated.model.Unauthenticated.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.UserLoginAlreadyTaken.class, new TypeSelector<app.kntrl.client.generated.model.UserLoginAlreadyTaken>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.UserLoginAlreadyTaken> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_CONFIRMED", app.kntrl.client.generated.model.AuthIsNotConfirmed.class);
                        classByDiscriminatorValue.put("AUTH_IS_NOT_ENABLED", app.kntrl.client.generated.model.AuthIsNotEnabled.class);
                        classByDiscriminatorValue.put("AUTH_REQUIRES_ANOTHER", app.kntrl.client.generated.model.AuthRequiresAnother.class);
                        classByDiscriminatorValue.put("CODE_IS_EXPIRED", app.kntrl.client.generated.model.CodeIsExpired.class);
                        classByDiscriminatorValue.put("CODE_IS_INCORRECT", app.kntrl.client.generated.model.CodeIsIncorrect.class);
                        classByDiscriminatorValue.put("CODE_TOO_MANY_ATTEMPTS", app.kntrl.client.generated.model.CodeTooManyAttempts.class);
                        classByDiscriminatorValue.put("EMAIL_IS_INCORRECT", app.kntrl.client.generated.model.EmailIsIncorrect.class);
                        classByDiscriminatorValue.put("IP_NEW", app.kntrl.client.generated.model.IpNew.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INCORRECT", app.kntrl.client.generated.model.PasswordIsIncorrect.class);
                        classByDiscriminatorValue.put("PASSWORD_IS_INVALID", app.kntrl.client.generated.model.PasswordIsInvalid.class);
                        classByDiscriminatorValue.put("PLUGIN_CLIENT_ERR", app.kntrl.client.generated.model.PluginClientErr.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INCORRECT", app.kntrl.client.generated.model.QuestionsAnswersIncorrect.class);
                        classByDiscriminatorValue.put("QUESTIONS_ANSWERS_INVALID", app.kntrl.client.generated.model.QuestionsAnswersInvalid.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("SIGNATURE_IS_INCORRECT", app.kntrl.client.generated.model.SignatureIsIncorrect.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("TOO_MANY_REQS", app.kntrl.client.generated.model.TooManyReqs.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_LOGIN_ALREADY_TAKEN", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("UserLoginAlreadyTaken", app.kntrl.client.generated.model.UserLoginAlreadyTaken.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
                .registerTypeSelector(app.kntrl.client.generated.model.UserNotFound.class, new TypeSelector<app.kntrl.client.generated.model.UserNotFound>() {
                    @Override
                    public Class<? extends app.kntrl.client.generated.model.UserNotFound> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ACCESS_DENIED", app.kntrl.client.generated.model.AccessDenied.class);
                        classByDiscriminatorValue.put("SESSION_EXPIRED", app.kntrl.client.generated.model.SessionExpired.class);
                        classByDiscriminatorValue.put("TOKEN_EXPIRED", app.kntrl.client.generated.model.TokenExpired.class);
                        classByDiscriminatorValue.put("UNAUTHENTICATED", app.kntrl.client.generated.model.Unauthenticated.class);
                        classByDiscriminatorValue.put("USER_NOT_FOUND", app.kntrl.client.generated.model.UserNotFound.class);
                        classByDiscriminatorValue.put("UserNotFound", app.kntrl.client.generated.model.UserNotFound.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "code"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .registerTypeAdapter(byte[].class, byteArrayAdapter)
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AccessDenied.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AccessTokenCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AnswerErr.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AnyErr.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AnyErrAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AppSecretAuthCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthCodeHandlerCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthData.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthIsNotConfirmed.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthIsNotEnabled.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthRequiresAnother.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthUserCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthenticateReq.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthenticateRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthoriseReq.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.AuthoriseRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.BuiltInAuthCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.BuiltInAuthCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.Code.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.CodeCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.CodeIsExpired.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.CodeIsIncorrect.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.CodeTooManyAttempts.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.CodeVerifier.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.ConfirmSessionAuthsReq.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.ConfirmUserAuthsReq.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.DbHealthRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.DbsCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.DbsCfgRateLimiter.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.DbsCfgSession.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.DbsCfgUser.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.Device.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.EditUserReq.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.EditUserReqAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.EmailAuthCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.EmailAuthCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.EmailIsIncorrect.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.EntryAccessTokenCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.EntryCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.ErrAuthExecRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.ErrAuthExecResAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.FindSessionsRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.HealthRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.HealthResAuthValue.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.HealthStatusRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.I18nCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.InMemoryCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.InMemoryCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.InTokenCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.InTokenCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.IpAuthCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.IpAuthCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.IpNew.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.JdbcCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.JdbcCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.Login.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.LoginId.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.MongoCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.MongoCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.MysqlCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.MysqlCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.NewSessionReq.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.NextFactor.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.NoAuthAvailableForFactor.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.OAuthCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.OAuthCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.OkAuthExecRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.OkAuthExecResAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PasswordAuthCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PasswordAuthCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PasswordHistoryCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PasswordIsIncorrect.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PasswordIsIncorrectAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PasswordIsInvalid.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PasswordIsInvalidAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PasswordStrengthRequirements.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PluginClientErr.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PluginClientErrAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PluginErr.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PostgresCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.PostgresCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.QuestionsAnswersIncorrect.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.QuestionsAnswersIncorrectAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.QuestionsAnswersInvalid.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.QuestionsAnswersInvalidAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.QuestionsAuthCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.QuestionsAuthCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RateLimiterCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RateLimiterReq.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RedisCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RedisCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RefreshTokenCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RefreshTokenReq.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RefreshTokenRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RemoteAuthCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RemoteAuthCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RemoteDbCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.RemoteDbCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SHAppCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SHAppCfgAuthsValue.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SHAppCfgEntriesValue.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SHAppCfgRateLimitersValue.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SHHttpCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SaveUserReq.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SaveUserRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.Session.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SessionExpired.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SessionUnconfirmedAuthsValue.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SignatureIsIncorrect.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SkippedAuthExecRes.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SkippedAuthExecResAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SqliteCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.SqliteCfgAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.TokenCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.TokenExpired.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.TokenExpiredAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.TokenHandlerCfg.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.Tokens.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.TooManyReqs.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.TooManyReqsAllOf.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.UnconfirmedAuth.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.UnconfirmedAuthData.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.User.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.UserAuthsValue.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.UserLoginAlreadyTaken.CustomTypeAdapterFactory())
            .registerTypeAdapterFactory(new app.kntrl.client.generated.model.UserNotFound.CustomTypeAdapterFactory())
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
