/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import app.kntrl.client.generated.infra.JSON;

/**
 * Rate limiter configuration
 */
@ApiModel(description = "Rate limiter configuration")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RateLimiterCfg {
  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Boolean userId;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private Boolean ip;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private Double quota;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_ALIGN_LOAD = "alignLoad";
  @SerializedName(SERIALIZED_NAME_ALIGN_LOAD)
  private Boolean alignLoad;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public RateLimiterCfg() {
  }

  public RateLimiterCfg userId(Boolean userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Create different rate limiters for different users. Enabled by default.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Create different rate limiters for different users. Enabled by default.")

  public Boolean getUserId() {
    return userId;
  }


  public void setUserId(Boolean userId) {
    this.userId = userId;
  }


  public RateLimiterCfg ip(Boolean ip) {
    
    this.ip = ip;
    return this;
  }

   /**
   * Create different rate limiters for different ips. Disabled by default.
   * @return ip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Create different rate limiters for different ips. Disabled by default.")

  public Boolean getIp() {
    return ip;
  }


  public void setIp(Boolean ip) {
    this.ip = ip;
  }


  public RateLimiterCfg quota(Double quota) {
    
    this.quota = quota;
    return this;
  }

   /**
   * Total quota available for time period. Quota means \&quot;weight\&quot; of a request. So quota 1.0 and period 1s allows 10 request with weight 0.1 per seconds or 5 request with weight 0.2 per second.
   * @return quota
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total quota available for time period. Quota means \"weight\" of a request. So quota 1.0 and period 1s allows 10 request with weight 0.1 per seconds or 5 request with weight 0.2 per second.")

  public Double getQuota() {
    return quota;
  }


  public void setQuota(Double quota) {
    this.quota = quota;
  }


  public RateLimiterCfg period(String period) {
    
    this.period = period;
    return this;
  }

   /**
   * Quota restoring period 
   * @return period
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30s", value = "Quota restoring period ")

  public String getPeriod() {
    return period;
  }


  public void setPeriod(String period) {
    this.period = period;
  }


  public RateLimiterCfg alignLoad(Boolean alignLoad) {
    
    this.alignLoad = alignLoad;
    return this;
  }

   /**
   * Insert delays between requests if there are too many simultaneous requests.
   * @return alignLoad
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Insert delays between requests if there are too many simultaneous requests.")

  public Boolean getAlignLoad() {
    return alignLoad;
  }


  public void setAlignLoad(Boolean alignLoad) {
    this.alignLoad = alignLoad;
  }


  public RateLimiterCfg parent(String parent) {
    
    this.parent = parent;
    return this;
  }

   /**
   * Allows to combine rate limiters. Let&#39;s say rt1 allows 10 reqs per seconds, and rt2 allows 20 reqs per minute. If the rt1 has the rt2 as a parent, that means that rt1 allows 10 reqs per seconds but not more than 20 per minute.
   * @return parent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows to combine rate limiters. Let's say rt1 allows 10 reqs per seconds, and rt2 allows 20 reqs per minute. If the rt1 has the rt2 as a parent, that means that rt1 allows 10 reqs per seconds but not more than 20 per minute.")

  public String getParent() {
    return parent;
  }


  public void setParent(String parent) {
    this.parent = parent;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public RateLimiterCfg putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateLimiterCfg rateLimiterCfg = (RateLimiterCfg) o;
    return Objects.equals(this.userId, rateLimiterCfg.userId) &&
        Objects.equals(this.ip, rateLimiterCfg.ip) &&
        Objects.equals(this.quota, rateLimiterCfg.quota) &&
        Objects.equals(this.period, rateLimiterCfg.period) &&
        Objects.equals(this.alignLoad, rateLimiterCfg.alignLoad) &&
        Objects.equals(this.parent, rateLimiterCfg.parent)&&
        Objects.equals(this.additionalProperties, rateLimiterCfg.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, ip, quota, period, alignLoad, parent, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateLimiterCfg {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    alignLoad: ").append(toIndentedString(alignLoad)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userId");
    openapiFields.add("ip");
    openapiFields.add("quota");
    openapiFields.add("period");
    openapiFields.add("alignLoad");
    openapiFields.add("parent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RateLimiterCfg
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RateLimiterCfg.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateLimiterCfg is not found in the empty JSON string", RateLimiterCfg.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateLimiterCfg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateLimiterCfg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateLimiterCfg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateLimiterCfg.class));

       return (TypeAdapter<T>) new TypeAdapter<RateLimiterCfg>() {
           @Override
           public void write(JsonWriter out, RateLimiterCfg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RateLimiterCfg read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RateLimiterCfg instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RateLimiterCfg given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RateLimiterCfg
  * @throws IOException if the JSON string is invalid with respect to RateLimiterCfg
  */
  public static RateLimiterCfg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateLimiterCfg.class);
  }

 /**
  * Convert an instance of RateLimiterCfg to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

