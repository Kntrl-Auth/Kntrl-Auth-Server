/*
 * Kntrl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.kntrl.client.generated.model;

import java.util.Objects;
import java.util.Arrays;
import app.kntrl.client.generated.model.AccessDenied;
import app.kntrl.client.generated.model.ClientErr;
import app.kntrl.client.generated.model.SessionExpired;
import app.kntrl.client.generated.model.TokenExpired;
import app.kntrl.client.generated.model.Unauthenticated;
import app.kntrl.client.generated.model.UserNotFound;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import app.kntrl.client.generated.infra.JSON;

/**
 * Unauthenticated
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-07T19:30:17.809690+03:00[Europe/Kiev]")
public class Unauthenticated extends ClientErr {
  public Unauthenticated() { 
    this.code = this.getClass().getSimpleName();
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Unauthenticated {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("devMsg");
    openapiFields.add("msg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("devMsg");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Unauthenticated
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Unauthenticated.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Unauthenticated is not found in the empty JSON string", Unauthenticated.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("code").getAsString();
      switch (discriminatorValue) {
        case "ACCESS_DENIED":
          AccessDenied.validateJsonObject(jsonObj);
          break;
        case "AccessDenied":
          AccessDenied.validateJsonObject(jsonObj);
          break;
        case "SESSION_EXPIRED":
          SessionExpired.validateJsonObject(jsonObj);
          break;
        case "SessionExpired":
          SessionExpired.validateJsonObject(jsonObj);
          break;
        case "TOKEN_EXPIRED":
          TokenExpired.validateJsonObject(jsonObj);
          break;
        case "TokenExpired":
          TokenExpired.validateJsonObject(jsonObj);
          break;
        case "UNAUTHENTICATED":
          Unauthenticated.validateJsonObject(jsonObj);
          break;
        case "USER_NOT_FOUND":
          UserNotFound.validateJsonObject(jsonObj);
          break;
        case "UserNotFound":
          UserNotFound.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `code` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of Unauthenticated given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Unauthenticated
  * @throws IOException if the JSON string is invalid with respect to Unauthenticated
  */
  public static Unauthenticated fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Unauthenticated.class);
  }

 /**
  * Convert an instance of Unauthenticated to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

