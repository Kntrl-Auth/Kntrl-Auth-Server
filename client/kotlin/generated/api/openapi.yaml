openapi: 3.0.1
info:
  title: Kntrl API
  version: "1.0"
servers:
- url: /
tags:
- name: token
  x-displayName:
  - Tokens
- name: server
  x-displayName:
  - Server API
- description: "API for signing in/up/out, listing all sessions, etc.\n"
  name: session
  x-displayName:
  - Session
- description: |
    User API
  name: user
  x-displayName:
  - Users
- name: authorisation
  x-displayName:
  - Authorization API
- description: |
    Utilities for client side cache of data and validation.
  name: signature
  x-displayName:
  - Signature
paths:
  /api/server/health:
    get:
      description: Get server plugins state
      operationId: health
      parameters:
      - explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      tags:
      - server
      x-order: 1
      x-accepts: application/json
  /api/session:
    delete:
      operationId: signOut
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 7
      x-accepts: application/json
    get:
      description: |
        Get current session data.
      operationId: getSession
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 1
      x-accepts: application/json
    patch:
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 4
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: "Create new session.\nif session entry requires another entry,\
        \ access token must be provided."
      operationId: newSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSessionReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      tags:
      - session
      x-order: 3
      x-content-type: application/json
      x-accepts: application/json
  /api/user:
    get:
      operationId: getUser
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - user
      x-order: 1
      x-accepts: application/json
    patch:
      operationId: saveUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - user
      x-order: 7
      x-content-type: application/json
      x-accepts: application/json
  /api/authorise:
    post:
      description: |
        Validates token and executes rate limiter.
        This API should be called by backend.
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthoriseReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthoriseRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - authorisation
      x-order: 1
      x-content-type: application/json
      x-accepts: application/json
  /api/signature/public-key:
    get:
      description: |
        Public key generated from app-secret from config used for signature validation.
      operationId: getPublicKey
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - signature
      x-order: 1
      x-accepts: application/json
  /api/server/cfg:
    get:
      description: |
        Current server configuration. Available only for users with system-access.
      operationId: cfg
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SHAppCfg'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - server
      x-order: 1
      x-accepts: application/json
  /api/token/refresh:
    post:
      description: Get new access token using refresh token.
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      tags:
      - token
      x-order: 2
      x-content-type: application/json
      x-accepts: application/json
  /api/rate-limiter/limit:
    post:
      description: "Executes rate limiter if no authorisation is required. Otherwise,\
        \ this works similarly to /authorise.\n"
      operationId: limit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimiterReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthoriseRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - authorisation
      x-order: 2
      x-content-type: application/json
      x-accepts: application/json
  /api/signature/verify:
    post:
      description: Validates data signature.
      operationId: verify
      parameters:
      - explode: true
        in: query
        name: signature
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: secret
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      tags:
      - signature
      x-order: 2
      x-content-type: application/json
      x-accepts: application/json
  /api/signature/sign:
    post:
      description: |
        Sign data using specified secret.
      operationId: sign
      parameters:
      - explode: true
        in: query
        name: secret
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - signature
      x-order: 3
      x-content-type: application/json
      x-accepts: application/json
  /api/session/auth/confirm:
    post:
      description: "Confirm auth with received code. To get code id, check response\
        \ of sign in / sign up / authenticate API.\n"
      operationId: confirmSessionAuths
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmSessionAuthsReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 6
      x-content-type: application/json
      x-accepts: application/json
  /api/session/{session-id}:
    delete:
      operationId: delSession
      parameters:
      - explode: false
        in: path
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 8
      x-accepts: application/json
  /api/session/all:
    get:
      operationId: getAll
      parameters:
      - explode: true
        in: query
        name: entry
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindSessionsRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 9
      x-accepts: application/json
  /api/user/{id}:
    patch:
      operationId: editUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - user
      x-order: 9
      x-content-type: application/json
      x-accepts: application/json
  /api/user/auth/confirm:
    post:
      operationId: confirmUserAuths
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmUserAuthsReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - user
      x-order: 10
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    Err:
      additionalProperties: true
      example:
        msg: msg
        code: code
        devMsg: devMsg
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-0
      x-sealed: false
    AccessDenied:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -2065236468-1
      x-super: '#/components/schemas/Unauthenticated'
    AnswerErr:
      properties:
        tooShort:
          type: boolean
        tooLong:
          type: boolean
      required:
      - tooLong
      - tooShort
      type: object
      x-order: -1279700867-9
    AnyErr:
      additionalProperties: true
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-5
      x-super: '#/components/schemas/Err'
    AuthIsNotConfirmed:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-2
      x-super: '#/components/schemas/ClientErr'
    AuthIsNotEnabled:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-1
      x-super: '#/components/schemas/ClientErr'
    AuthRequiresAnother:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-4
      x-super: '#/components/schemas/ClientErr'
    ClientErr:
      additionalProperties: true
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-4
      x-sealed: false
      x-super: '#/components/schemas/Err'
    CodeIsExpired:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-5
      x-super: '#/components/schemas/ClientErr'
    CodeIsIncorrect:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-7
      x-super: '#/components/schemas/ClientErr'
    CodeTooManyAttempts:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-6
      x-super: '#/components/schemas/ClientErr'
    EmailIsIncorrect:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-5
      x-super: '#/components/schemas/ClientErr'
    Instant:
      format: int64
      type: integer
    IntegrationErr:
      additionalProperties: true
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-3
      x-sealed: false
      x-super: '#/components/schemas/Err'
    IpNew:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-6
      x-super: '#/components/schemas/ClientErr'
    LoginId:
      example:
        type: type
        login: login
      properties:
        type:
          description: Type of login
          type: string
        login:
          description: "User unique identifier, email, username, etc."
          type: string
      required:
      - login
      - type
      type: object
      x-order: -2010674509-2
    NoAuthAvailableForFactor:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-3
      x-super: '#/components/schemas/IntegrationErr'
    PasswordIsIncorrect:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
        changedAt:
          format: int64
          type: integer
          x-nullable: true
        changedDaysAgo:
          format: int64
          type: integer
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-3
      x-super: '#/components/schemas/ClientErr'
    PasswordIsInvalid:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
        tooLong:
          type: boolean
        tooShort:
          type: boolean
        missingNumber:
          type: boolean
        missingSymbol:
          type: boolean
        missingUpperCase:
          type: boolean
        missingLowerCase:
          type: boolean
        commonPassword:
          type: boolean
        wasUsedBeforeAt:
          format: int64
          type: integer
          x-nullable: true
        matchesLogin:
          $ref: '#/components/schemas/LoginId'
        passwordsMismatch:
          type: boolean
        strength:
          type: string
          x-nullable: true
        wasUsedDaysAgo:
          format: int64
          type: integer
      required:
      - code
      - commonPassword
      - devMsg
      - missingLowerCase
      - missingNumber
      - missingSymbol
      - missingUpperCase
      - passwordsMismatch
      - tooLong
      - tooShort
      type: object
      x-order: -1279700867-4
      x-super: '#/components/schemas/ClientErr'
    PluginClientErr:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
        data:
          additionalProperties:
            type: object
          type: object
          writeOnly: true
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-2
      x-super: '#/components/schemas/ClientErr'
    PluginErr:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-1
      x-super: '#/components/schemas/ServerErr'
    QuestionsAnswersIncorrect:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
        incorrectAnswers:
          items:
            type: string
          type: array
        requiresMoreAnswers:
          type: boolean
        questionsNotFound:
          items:
            type: string
          type: array
      required:
      - code
      - devMsg
      - incorrectAnswers
      - questionsNotFound
      - requiresMoreAnswers
      type: object
      x-order: -1279700867-7
      x-super: '#/components/schemas/ClientErr'
    QuestionsAnswersInvalid:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
        invalidAnswers:
          additionalProperties:
            $ref: '#/components/schemas/AnswerErr'
          type: object
        tooManyAnswers:
          type: boolean
      required:
      - code
      - devMsg
      - invalidAnswers
      - tooManyAnswers
      type: object
      x-order: -1279700867-8
      x-super: '#/components/schemas/ClientErr'
    ServerErr:
      additionalProperties: true
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-2
      x-sealed: false
      x-super: '#/components/schemas/Err'
    SessionExpired:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -2065236468-0
      x-super: '#/components/schemas/Unauthenticated'
    SignatureIsIncorrect:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -2065236468-3
      x-super: '#/components/schemas/ClientErr'
    TokenExpired:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
        expiredAt:
          format: int64
          type: integer
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-10
      x-super: '#/components/schemas/Unauthenticated'
    TooManyReqs:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
        waitTimeMs:
          format: int32
          type: integer
          x-nullable: true
        waitTimeSeconds:
          format: int32
          type: integer
          x-nullable: true
        waitTimeMinutes:
          format: int32
          type: integer
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-11
      x-super: '#/components/schemas/ClientErr'
    Unauthenticated:
      additionalProperties: true
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-8
      x-sealed: false
      x-super: '#/components/schemas/ClientErr'
    UserLoginAlreadyTaken:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-0
      x-super: '#/components/schemas/ClientErr'
    UserNotFound:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: -2065236468-2
      x-super: '#/components/schemas/Unauthenticated'
    AccessToken:
      type: string
      x-order: -2026363309-3
    CodeVerifier:
      example:
        attemptsLeft: 1
        usedAttempts: 6
        hasAttemptsLeft: true
        validUntil: 0
        id: id
        sentAt: 5
      properties:
        id:
          type: string
        validUntil:
          format: int64
          type: integer
        usedAttempts:
          format: int32
          type: integer
        attemptsLeft:
          format: int32
          type: integer
        sentAt:
          format: int64
          type: integer
        hasAttemptsLeft:
          type: boolean
      required:
      - attemptsLeft
      - sentAt
      - usedAttempts
      - validUntil
      type: object
      x-order: 1113303910-0
    Device:
      example:
        browser: browser
        mobile: true
        userAgent: userAgent
        type: type
      properties:
        type:
          type: string
          x-nullable: true
        browser:
          type: string
          x-nullable: true
        userAgent:
          type: string
        mobile:
          type: boolean
      required:
      - userAgent
      type: object
      x-order: 1837614569-0
    NextFactor:
      example:
        supportedAuths:
        - supportedAuths
        - supportedAuths
        factor: factor
      properties:
        factor:
          type: string
        supportedAuths:
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - factor
      - supportedAuths
      type: object
      x-order: 1296788734-0
    RefreshToken:
      type: string
      x-order: -2026363309-5
    RefreshTokenRes:
      example:
        session:
          authenticated: true
          systemAccess: true
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        tokens:
          access: access
          accessTokenExpiresAt: 0
          refresh: refresh
      properties:
        tokens:
          $ref: '#/components/schemas/Tokens'
        session:
          $ref: '#/components/schemas/Session'
      required:
      - session
      - tokens
      type: object
      x-order: 68856176-2
    Session:
      example:
        authenticated: true
        systemAccess: true
        signedInAt: 5
        userId: userId
        expiresAt: 2
        nextFactors:
        - supportedAuths:
          - supportedAuths
          - supportedAuths
          factor: factor
        - supportedAuths:
          - supportedAuths
          - supportedAuths
          factor: factor
        entry: entry
        expired: true
        authenticatedBy:
          key: authenticatedBy
        newUser: true
        refreshedAt: 7
        id: id
        identifiedBy:
        - type: type
          login: login
        - type: type
          login: login
        unconfirmedAuths:
          key:
            sentCodes:
            - attemptsLeft: 1
              usedAttempts: 6
              hasAttemptsLeft: true
              validUntil: 0
              id: id
              sentAt: 5
            - attemptsLeft: 1
              usedAttempts: 6
              hasAttemptsLeft: true
              validUntil: 0
              id: id
              sentAt: 5
        device:
          browser: browser
          mobile: true
          userAgent: userAgent
          type: type
      properties:
        id:
          type: string
        entry:
          description: Entry that authenticates this session
          type: string
        identifiedBy:
          description: Login used to identify this user
          items:
            $ref: '#/components/schemas/LoginId'
          type: array
        userId:
          type: string
          x-nullable: true
        authenticatedBy:
          additionalProperties:
            type: string
            x-additionalPropertiesName: factor
          description: |
            Authenticator used for factors
          type: object
        unconfirmedAuths:
          additionalProperties:
            $ref: '#/components/schemas/UnconfirmedAuth'
          description: |
            Auths that waiting for confirmation
          type: object
        nextFactors:
          description: List of factors needed to authenticate this session
          items:
            $ref: '#/components/schemas/NextFactor'
          type: array
        signedInAt:
          format: int64
          type: integer
        expiresAt:
          format: int64
          type: integer
        refreshedAt:
          format: int64
          type: integer
        newUser:
          type: boolean
        device:
          $ref: '#/components/schemas/Device'
        systemAccess:
          type: boolean
        expired:
          type: boolean
        authenticated:
          type: boolean
      required:
      - authenticatedBy
      - device
      - entry
      - expiresAt
      - id
      - identifiedBy
      - newUser
      - nextFactors
      - refreshedAt
      - signedInAt
      - systemAccess
      - unconfirmedAuths
      type: object
      x-order: 2013237977-0
    Tokens:
      example:
        access: access
        accessTokenExpiresAt: 0
        refresh: refresh
      properties:
        access:
          type: string
          x-order: -2026363309-3
        refresh:
          type: string
          x-order: -2026363309-5
        accessTokenExpiresAt:
          format: int64
          type: integer
      required:
      - access
      - refresh
      type: object
      x-order: -2026363309-0
    UnconfirmedAuth:
      example:
        sentCodes:
        - attemptsLeft: 1
          usedAttempts: 6
          hasAttemptsLeft: true
          validUntil: 0
          id: id
          sentAt: 5
        - attemptsLeft: 1
          usedAttempts: 6
          hasAttemptsLeft: true
          validUntil: 0
          id: id
          sentAt: 5
      properties:
        sentCodes:
          items:
            $ref: '#/components/schemas/CodeVerifier'
          type: array
      type: object
      x-order: 320227009-0
    RefreshTokenReq:
      example:
        refreshToken: refreshToken
      properties:
        refreshToken:
          type: string
          x-order: -2026363309-5
      required:
      - refreshToken
      type: object
      x-order: 68856176-1
    DbHealthRes:
      example:
        rateLimiter:
          msg: msg
          status: null
        session:
          msg: msg
          status: null
        user:
          msg: msg
          status: null
      properties:
        user:
          $ref: '#/components/schemas/HealthStatusRes'
        session:
          $ref: '#/components/schemas/HealthStatusRes'
        rateLimiter:
          $ref: '#/components/schemas/HealthStatusRes'
      required:
      - rateLimiter
      - session
      - user
      type: object
      x-order: -517526772-2
    HealthRes:
      example:
        msg: msg
        auth:
          key:
            msg: msg
            status: null
        db:
          rateLimiter:
            msg: msg
            status: null
          session:
            msg: msg
            status: null
          user:
            msg: msg
            status: null
        status: null
      properties:
        db:
          $ref: '#/components/schemas/DbHealthRes'
        auth:
          additionalProperties:
            $ref: '#/components/schemas/HealthStatusRes'
          type: object
        status:
          $ref: '#/components/schemas/HealthStatus'
        msg:
          type: string
          x-nullable: true
      required:
      - auth
      - db
      - status
      type: object
      x-order: -517526772-1
    HealthStatus:
      enum:
      - HEALTHY
      - UNAVAILABLE
      - ERR
      type: string
    HealthStatusRes:
      example:
        msg: msg
        status: null
      properties:
        status:
          $ref: '#/components/schemas/HealthStatus'
        msg:
          type: string
          x-nullable: true
      required:
      - status
      type: object
      x-order: -814092127-1
    AuthData:
      example:
        public:
          key: ""
        login: login
      properties:
        public:
          additionalProperties: true
          type: object
        login:
          type: string
          x-nullable: true
      required:
      - public
      type: object
      x-order: 332570507-3
    AuthExecRes:
      example:
        sentCode:
          attemptsLeft: 2
          usedAttempts: 5
          hasAttemptsLeft: true
          validUntil: 5
          id: id
          sentAt: 7
        err:
          msg: msg
          code: code
          devMsg: devMsg
        resData: null
        status: OK
      properties:
        status:
          enum:
          - OK
          - ERR
          - SKIPPED
          type: string
        sentCode:
          $ref: '#/components/schemas/Code'
        err:
          $ref: '#/components/schemas/Err'
        resData:
          $ref: '#/components/schemas/AuthExecRes_resData'
      required:
      - status
      type: object
      x-order: -73723375-2
      x-sealed: true
    AuthResData:
      type: object
      x-order: -1249106462-7
    AuthResDataJson:
      additionalProperties: true
      properties:
        key:
          type: object
          x-nullable: true
      type: object
      x-order: -1249106462-8
      x-super: '#/components/schemas/AuthResData'
    AuthUserCfg:
      example:
        data:
          public:
            key: ""
          login: login
        sentCodes:
        - code:
            attemptsLeft: 1
            usedAttempts: 6
            hasAttemptsLeft: true
            validUntil: 0
            id: id
            sentAt: 5
          data:
            public:
              key: ""
            login: login
        - code:
            attemptsLeft: 1
            usedAttempts: 6
            hasAttemptsLeft: true
            validUntil: 0
            id: id
            sentAt: 5
          data:
            public:
              key: ""
            login: login
        confirmed: true
      properties:
        data:
          $ref: '#/components/schemas/AuthData'
        sentCodes:
          description: |
            List of auths that wait for confirmation.
          items:
            $ref: '#/components/schemas/UnconfirmedAuthData'
          type: array
        confirmed:
          type: boolean
      type: object
      x-order: 332570507-0
    AuthenticateRes:
      example:
        session:
          authenticated: true
          systemAccess: true
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        tokens:
          access: access
          accessTokenExpiresAt: 0
          refresh: refresh
        user:
          new: true
          signedUpAt: 6
          systemAccess: true
          auths:
            key:
              data:
                public:
                  key: ""
                login: login
              sentCodes:
              - code:
                  attemptsLeft: 1
                  usedAttempts: 6
                  hasAttemptsLeft: true
                  validUntil: 0
                  id: id
                  sentAt: 5
                data:
                  public:
                    key: ""
                  login: login
              - code:
                  attemptsLeft: 1
                  usedAttempts: 6
                  hasAttemptsLeft: true
                  validUntil: 0
                  id: id
                  sentAt: 5
                data:
                  public:
                    key: ""
                  login: login
              confirmed: true
          id: 2c24704f-198a-4bc4-9718-306ccc97bbdc
          isNew: true
          logins:
          - unconfirmedLogin: unconfirmedLogin
            type: type
            login: login
            confirmed: true
          - unconfirmedLogin: unconfirmedLogin
            type: type
            login: login
            confirmed: true
          factors:
          - factors
          - factors
          updatedAt: 1
        authRes:
          key:
            sentCode:
              attemptsLeft: 2
              usedAttempts: 5
              hasAttemptsLeft: true
              validUntil: 5
              id: id
              sentAt: 7
            err:
              msg: msg
              code: code
              devMsg: devMsg
            resData: null
            status: OK
      properties:
        tokens:
          $ref: '#/components/schemas/Tokens'
        session:
          $ref: '#/components/schemas/Session'
        user:
          $ref: '#/components/schemas/User'
        authRes:
          additionalProperties:
            $ref: '#/components/schemas/AuthExecRes'
          type: object
      required:
      - authRes
      type: object
      x-order: 2094520596-3
    Code:
      example:
        attemptsLeft: 2
        usedAttempts: 5
        hasAttemptsLeft: true
        validUntil: 5
        id: id
        sentAt: 7
      properties:
        id:
          type: string
        validUntil:
          format: int64
          type: integer
        usedAttempts:
          format: int32
          type: integer
        attemptsLeft:
          format: int32
          type: integer
        sentAt:
          format: int64
          type: integer
        hasAttemptsLeft:
          type: boolean
      required:
      - attemptsLeft
      - sentAt
      - usedAttempts
      - validUntil
      type: object
      x-order: -1249106462-3
    EmailAuthRes:
      properties:
        emailSentTo:
          description: "Shows user email, that was used to send a code. Email will\
            \ be partially hidden."
          type: string
      type: object
      x-order: -701605246-5
      x-super: '#/components/schemas/AuthResData'
    ErrAuthExecRes:
      properties:
        status:
          enum:
          - OK
          - ERR
          - SKIPPED
          type: string
        sentCode:
          $ref: '#/components/schemas/Code'
        err:
          $ref: '#/components/schemas/Err'
      required:
      - err
      - status
      type: object
      x-order: -73723375-4
      x-super: '#/components/schemas/AuthExecRes'
    IpAuthRes:
      properties:
        ipEncoded:
          type: string
      required:
      - ipEncoded
      type: object
      x-order: 2116983897-1
      x-super: '#/components/schemas/AuthResData'
    Login:
      example:
        unconfirmedLogin: unconfirmedLogin
        type: type
        login: login
        confirmed: true
      properties:
        type:
          description: Type of login
          type: string
        login:
          description: "User unique identifier, email, username, etc."
          type: string
        unconfirmedLogin:
          type: string
          x-nullable: true
        confirmed:
          type: boolean
      required:
      - login
      - type
      type: object
      x-order: -2010674509-0
    OAuthRes:
      properties:
        login:
          type: string
        publicData:
          additionalProperties:
            type: object
          type: object
      required:
      - login
      - publicData
      type: object
      x-order: -51011121-2
      x-super: '#/components/schemas/AuthResData'
    OkAuthExecRes:
      properties:
        status:
          enum:
          - OK
          - ERR
          - SKIPPED
          type: string
        sentCode:
          $ref: '#/components/schemas/Code'
        resData:
          $ref: '#/components/schemas/AuthExecRes_resData'
      required:
      - status
      type: object
      x-order: -73723375-3
      x-super: '#/components/schemas/AuthExecRes'
    PasswordUpdateRes:
      properties:
        password:
          description: If password was generated by app this field contains generated
            password.
          type: string
        strength:
          description: Calculated strength of password. Null means that all checks
            failed.
          type: string
          x-nullable: true
      required:
      - password
      type: object
      x-order: -266447761-5
      x-super: '#/components/schemas/AuthResData'
    QuestionsAuthenticateRes:
      properties:
        correct:
          additionalProperties:
            type: boolean
          description: |
            Shows is answer was correct.
          example:
            HOME_CITY: true
            MOTHER_NAME: false
          type: object
      required:
      - correct
      type: object
      x-order: 131730481-3
      x-super: '#/components/schemas/AuthResData'
    QuestionsUpdateRes:
      properties:
        answersSavedAt:
          additionalProperties:
            format: int64
            type: integer
          description: Date of last update
          type: object
      required:
      - answersSavedAt
      type: object
      x-order: 131730481-4
      x-super: '#/components/schemas/AuthResData'
    SkippedAuthExecRes:
      properties:
        status:
          enum:
          - OK
          - ERR
          - SKIPPED
          type: string
        sentCode:
          $ref: '#/components/schemas/Code'
      required:
      - status
      type: object
      x-order: -73723375-5
      x-super: '#/components/schemas/AuthExecRes'
    UnconfirmedAuthData:
      example:
        code:
          attemptsLeft: 1
          usedAttempts: 6
          hasAttemptsLeft: true
          validUntil: 0
          id: id
          sentAt: 5
        data:
          public:
            key: ""
          login: login
      properties:
        data:
          $ref: '#/components/schemas/AuthData'
        code:
          $ref: '#/components/schemas/CodeVerifier'
      required:
      - code
      - data
      type: object
      x-order: 332570507-4
    User:
      example:
        new: true
        signedUpAt: 6
        systemAccess: true
        auths:
          key:
            data:
              public:
                key: ""
              login: login
            sentCodes:
            - code:
                attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              data:
                public:
                  key: ""
                login: login
            - code:
                attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              data:
                public:
                  key: ""
                login: login
            confirmed: true
        id: 2c24704f-198a-4bc4-9718-306ccc97bbdc
        isNew: true
        logins:
        - unconfirmedLogin: unconfirmedLogin
          type: type
          login: login
          confirmed: true
        - unconfirmedLogin: unconfirmedLogin
          type: type
          login: login
          confirmed: true
        factors:
        - factors
        - factors
        updatedAt: 1
      properties:
        id:
          description: |
            Generated user uuid
          example: 2c24704f-198a-4bc4-9718-306ccc97bbdc
          type: string
        logins:
          items:
            $ref: '#/components/schemas/Login'
          type: array
        auths:
          additionalProperties:
            $ref: '#/components/schemas/AuthUserCfg'
          description: |
            Public data of confirmed auths and sent codes for unconfirmed auths.
          type: object
        factors:
          description: Enabled factors
          items:
            type: string
          type: array
          uniqueItems: true
        signedUpAt:
          format: int64
          type: integer
        updatedAt:
          format: int64
          type: integer
        isNew:
          type: boolean
        systemAccess:
          description: Allows to access to any user in the app.
          type: boolean
        new:
          type: boolean
      required:
      - auths
      - factors
      - id
      - logins
      - signedUpAt
      - updatedAt
      type: object
      x-order: 276900135-0
    json:
      additionalProperties: true
      type: object
    AppSecretReq:
      properties:
        secret:
          type: string
      required:
      - secret
      type: object
      x-order: 791325901-3
      x-super: '#/components/schemas/AuthReqData'
    AuthReqData:
      type: object
      x-order: 1333651370-0
    AuthReqDataJson:
      additionalProperties: true
      properties:
        key:
          type: object
          x-nullable: true
      type: object
      x-order: 1333651370-1
      x-super: '#/components/schemas/AuthReqData'
    AuthenticateReq:
      example:
        authReqs:
          key: null
        dryRun: true
        factors:
          key: factors
      properties:
        factors:
          additionalProperties:
            type: string
            x-additionalPropertiesName: factor
          description: "Forces specific auth to be used for factor.\nTakes place only\
            \ when multiple auths is provided within request and auth can be\nassigned\
            \ to several factors.\nIf used in sign-up mode, it just enables those\
            \ factors.\n"
          type: object
        authReqs:
          additionalProperties:
            $ref: '#/components/schemas/AuthenticateReq_authReqs_value'
          description: |
            Request for authenticators
          type: object
        dryRun:
          description: Execute only validation ща authenticator requests.
          type: boolean
      type: object
      x-order: 2094520596-2
    EmailAuthenticateReq:
      properties:
        email:
          description: "User email. If email is not null - auth allow identification\
            \ by email (email auth also must be listed in\nlogins config). Otherwise,\
            \ uses email of already identified user."
          type: string
          x-nullable: true
        template:
          description: Template to use.
          type: string
          x-nullable: true
      type: object
      x-order: -701605246-3
      x-super: '#/components/schemas/AuthReqData'
    EmailUpdateReq:
      properties:
        email:
          description: New email to set.
          type: string
        template:
          description: Template to use.
          type: string
          x-nullable: true
      required:
      - email
      type: object
      x-order: -701605246-4
      x-super: '#/components/schemas/AuthReqData'
    NewSessionReq:
      example:
        authReqs:
          key: null
        entry: entry
        dryRun: true
        signIn: true
        logins:
          key: logins
        signUp: true
        factors:
          key: factors
      properties:
        entry:
          type: string
        logins:
          additionalProperties:
            type: string
            x-additionalPropertiesName: loginType
          type: object
        factors:
          additionalProperties:
            type: string
            x-additionalPropertiesName: factor
          description: "Forces specific auth to be used for factor.\nTakes place only\
            \ when multiple auths is provided within request and auth can be\nassigned\
            \ to several factors.\nIf used in sign-up mode, it just enables those\
            \ factors.\n"
          type: object
        authReqs:
          additionalProperties:
            $ref: '#/components/schemas/AuthenticateReq_authReqs_value'
          description: |
            Request for authenticators
          type: object
        signIn:
          type: boolean
        signUp:
          type: boolean
        dryRun:
          description: Execute only validation ща authenticator requests.
          type: boolean
      required:
      - entry
      type: object
      x-order: 2094520596-1
    OAuthReq:
      properties:
        accessToken:
          description: If you have access-token - put it here.
          type: string
          x-nullable: true
        authorizationCode:
          description: If you have authorisation-code - app will exchange it for access-token.
          type: string
          x-nullable: true
      type: object
      x-order: -51011121-1
      x-super: '#/components/schemas/AuthReqData'
    PasswordAuthenticateReq:
      properties:
        password:
          description: User password.
          type: string
      required:
      - password
      type: object
      x-order: -266447761-3
      x-super: '#/components/schemas/AuthReqData'
    PasswordUpdateReq:
      properties:
        password:
          description: New password to set. If null app generates password automatically.
          type: string
          x-nullable: true
        confirmPassword:
          description: Password confirmation. If null app doesn't perform this check.
          type: string
          x-nullable: true
      type: object
      x-order: -266447761-4
      x-super: '#/components/schemas/AuthReqData'
    QuestionsAuthenticateReq:
      properties:
        answers:
          additionalProperties:
            type: string
          description: |
            Given answers for questions.
          example:
            HOME_CITY: New-York
            MOTHER_NAME: Emma
          type: object
      required:
      - answers
      type: object
      x-order: 131730481-1
      x-super: '#/components/schemas/AuthReqData'
    QuestionsUpdateReq:
      properties:
        answers:
          additionalProperties:
            type: string
          description: |
            Answers to save. `null` as value removes answer
          example:
            HOME_CITY: London
            MOTHER_NAME: null
          type: object
      required:
      - answers
      type: object
      x-order: 131730481-2
      x-super: '#/components/schemas/AuthReqData'
    ConfirmSessionAuthsReq:
      example:
        receivedCodes:
          key:
            key: receivedCodes
        sessionId: sessionId
      properties:
        sessionId:
          type: string
          x-nullable: true
        receivedCodes:
          additionalProperties:
            additionalProperties:
              type: string
              x-additionalPropertiesName: codeId
            type: object
            x-additionalPropertiesName: auth
          type: object
      required:
      - receivedCodes
      type: object
      x-order: 2094520596-4
    SignOutRes:
      type: object
      x-order: 2094520596-5
    FindSessionsRes:
      example:
        sessions:
        - authenticated: true
          systemAccess: true
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        - authenticated: true
          systemAccess: true
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        tooManySessions: true
      properties:
        sessions:
          items:
            $ref: '#/components/schemas/Session'
          type: array
        tooManySessions:
          type: boolean
      required:
      - sessions
      type: object
      x-order: 400707106-4
    SaveUserRes:
      example:
        user:
          new: true
          signedUpAt: 6
          systemAccess: true
          auths:
            key:
              data:
                public:
                  key: ""
                login: login
              sentCodes:
              - code:
                  attemptsLeft: 1
                  usedAttempts: 6
                  hasAttemptsLeft: true
                  validUntil: 0
                  id: id
                  sentAt: 5
                data:
                  public:
                    key: ""
                  login: login
              - code:
                  attemptsLeft: 1
                  usedAttempts: 6
                  hasAttemptsLeft: true
                  validUntil: 0
                  id: id
                  sentAt: 5
                data:
                  public:
                    key: ""
                  login: login
              confirmed: true
          id: 2c24704f-198a-4bc4-9718-306ccc97bbdc
          isNew: true
          logins:
          - unconfirmedLogin: unconfirmedLogin
            type: type
            login: login
            confirmed: true
          - unconfirmedLogin: unconfirmedLogin
            type: type
            login: login
            confirmed: true
          factors:
          - factors
          - factors
          updatedAt: 1
        authRes:
          key:
            sentCode:
              attemptsLeft: 2
              usedAttempts: 5
              hasAttemptsLeft: true
              validUntil: 5
              id: id
              sentAt: 7
            err:
              msg: msg
              code: code
              devMsg: devMsg
            resData: null
            status: OK
      properties:
        user:
          $ref: '#/components/schemas/User'
        authRes:
          additionalProperties:
            $ref: '#/components/schemas/AuthExecRes'
          type: object
      required:
      - authRes
      type: object
      x-order: -1847312442-2
    ConfirmUserAuthsReq:
      example:
        receivedCodes:
          key:
            key: receivedCodes
        userId: userId
      properties:
        userId:
          type: string
          x-nullable: true
        receivedCodes:
          additionalProperties:
            additionalProperties:
              type: string
              x-additionalPropertiesName: codeId
            type: object
            x-additionalPropertiesName: auth
          type: object
      required:
      - receivedCodes
      type: object
      x-order: -1847312442-4
    EditUserReq:
      example:
        authReqs:
          key: null
        dryRun: true
        systemAccess: true
        logins:
          key: logins
        factors:
          key: true
      properties:
        factors:
          additionalProperties:
            type: boolean
            x-additionalPropertiesName: factor
          description: "Optional factors to enable/disable. If factor marked as required\
            \ in config, it will be considered enabled\nby default and this request\
            \ doesn't change this.\n"
          type: object
        logins:
          additionalProperties:
            type: string
            x-additionalPropertiesName: loginType
          type: object
        authReqs:
          additionalProperties:
            $ref: '#/components/schemas/AuthenticateReq_authReqs_value'
          type: object
        dryRun:
          type: boolean
        systemAccess:
          type: boolean
          x-nullable: true
      type: object
      x-order: -1847312442-3
      x-super: '#/components/schemas/SaveUserReq'
    SaveUserReq:
      example:
        authReqs:
          key: null
        dryRun: true
        logins:
          key: logins
        factors:
          key: true
      properties:
        factors:
          additionalProperties:
            type: boolean
            x-additionalPropertiesName: factor
          description: "Optional factors to enable/disable. If factor marked as required\
            \ in config, it will be considered enabled\nby default and this request\
            \ doesn't change this.\n"
          type: object
        logins:
          additionalProperties:
            type: string
            x-additionalPropertiesName: loginType
          type: object
        authReqs:
          additionalProperties:
            $ref: '#/components/schemas/AuthenticateReq_authReqs_value'
          type: object
        dryRun:
          type: boolean
      type: object
      x-order: -1847312442-1
    AuthoriseRes:
      example:
        session:
          authenticated: true
          systemAccess: true
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
      properties:
        session:
          $ref: '#/components/schemas/Session'
      type: object
      x-order: -2047680577-2
    AuthoriseReq:
      example:
        rateLimiter:
          quotaToBurn: 0.8008281904610115
          id: id
      properties:
        rateLimiter:
          $ref: '#/components/schemas/RateLimiterReq'
      type: object
      x-order: -2047680577-1
    RateLimiterReq:
      example:
        quotaToBurn: 0.8008281904610115
        id: id
      properties:
        id:
          type: string
        quotaToBurn:
          format: double
          type: number
      required:
      - id
      - quotaToBurn
      type: object
      x-order: -2047680577-3
    AccessTokenCfg:
      description: Short-living token used for authentication.
      example:
        cache: null
        cookie: true
        cacheUnauthenticated: true
        ttl: 1d
      properties:
        cookie:
          description: Send token in `access_token` cookie
          type: boolean
        cache:
          $ref: '#/components/schemas/Cache'
        cacheUnauthenticated:
          description: "By default, unauthenticated sessions can't be cached."
          type: boolean
        ttl:
          description: "Lifetime for access token. 1d, 30m, etc.\n"
          example: 1d
          type: string
      type: object
      x-order: -1195634750-1
    AppSecretAuthCfg:
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
      type: object
      x-order: 791325901-2
      x-super: '#/components/schemas/BuiltInAuthCfg'
    AuthCfg:
      description: Authentication implementation config
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
      type: object
      x-order: 2102313733-0
    AuthCodeHandlerCfg:
      properties:
        tokenUrl:
          description: Url to get access token by authorisation code.
          type: string
        clientId:
          description: "OAuth client id. Client must be registered on OAuth provider\
            \ (e.g. facebook, google)"
          type: string
        clientSecret:
          description: OAuth client secret.
          type: string
          x-nullable: true
      required:
      - clientId
      - tokenUrl
      type: object
      x-order: -51011121-5
    BuiltInAuthCfg:
      description: Authentication implementation config
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
      type: object
      x-order: -824080721-0
      x-super: '#/components/schemas/AuthCfg'
    Cache:
      enum:
      - JWT
      - BINARY
      type: string
    CodeCfg:
      description: If specified - app generates code and requires auth to be confirmed
      properties:
        length:
          description: Length of code to be generated
          format: int32
          type: integer
        ttl:
          description: "Generated code lifetime. e.g. 1m, 60s, 1d, etc."
          type: string
        alphabet:
          description: Symbols used to generate a code. By default `a-z + A-Z + 0-9`.
          type: string
        easyToRemember:
          description: "If true, every second letter will be the same, that allows\
            \ the codes to rhyme."
          type: boolean
        maxAttempts:
          description: Max attempts to enter the code.
          format: int32
          type: integer
      type: object
      x-order: 2102313733-1
    DbCfg:
      type: object
      x-order: -1580107990-0
    DbsCfg:
      description: Database connection configs
      example:
        rateLimiter: null
        session: null
        user: null
      properties:
        user:
          $ref: '#/components/schemas/DbsCfg_user'
        session:
          $ref: '#/components/schemas/DbsCfg_session'
        rateLimiter:
          $ref: '#/components/schemas/DbsCfg_rateLimiter'
      required:
      - rateLimiter
      - session
      - user
      type: object
      x-order: -1723799702-3
    Duration:
      type: string
    EmailAuthCfg:
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
        server:
          description: Email server address/IP.
          type: string
        sender:
          description: Email address of sender.
          type: string
        username:
          description: SMTP username.
          type: string
          x-nullable: true
        password:
          description: SMTP password.
          type: string
          x-nullable: true
        confirmationUrl:
          description: "If not null, server will create template param `confirmationUrl`\
            \ that will contain query parameters with\nconfirmation code, session\
            \ id, etc."
          type: string
          x-nullable: true
        templates:
          additionalProperties:
            type: string
            x-additionalPropertiesName: templateName
          description: "List of email templates. Key - name of template (can be used\
            \ lately on frontend), value - path to template.\nApp uses handlebars\
            \ templates to generate emails. See docs here https://handlebarsjs.com\n\
            \nEmail templates received `confirmationUrl`, `action`, `user`, `session`,\
            \ `codeId`, `code`, `lang`, `headers`\nas template params, e.g. you can\
            \ print user id as `{{ user.id }}`.\n\nTemplate engine also provides `i18n`\
            \ helper for localisation. E.g. `{{i18n 'confirmationButton' default='Confirm'}}`\n\
            searches key `confirmationButton` in files specified by `i18n.dir` config.\n\
            \nIt allows setting subject of email using `title` html tag, e.g. `<title>Email\
            \ subject</title>`.\n\n"
          example:
            welcome: ./welcome.html.hbs
            restoreAccess: ./restore.html.hbs
          type: object
        templateParams:
          additionalProperties:
            type: string
            x-additionalPropertiesName: paramName
          description: |
            Additional params for template.
          type: object
        code:
          $ref: '#/components/schemas/CodeCfg'
      required:
      - sender
      - server
      type: object
      x-order: -701605246-6
      x-super: '#/components/schemas/BuiltInAuthCfg'
    EntryAccessTokenCfg:
      example:
        cache: true
        ttl: ttl
      properties:
        ttl:
          description: Override access token ttl
          type: string
          x-nullable: true
        cache:
          description: Enable or disable client-side caching of access token
          type: boolean
          x-nullable: true
      type: object
      x-order: -842539141-1
    EntryCfg:
      description: Configuration for app entry.
      example:
        editAccount: true
        factorsRequired:
          first:
          - password
          - facebook
          - email
        factorsOptional:
          second:
          - sms
        requiresEntry:
        - requiresEntry
        - requiresEntry
        accessToken:
          cache: true
          ttl: ttl
        ttl: 3M
      properties:
        factorsRequired:
          additionalProperties:
            description: |
              List of auths that could be chosen for this factor.
            items:
              type: string
            type: array
            x-additionalPropertiesName: factor
          description: |+
            Specifies factors that always required to be authenticated.

            Usually it's main auth method (e.g. password) + social login (e.g. facebook) +
            reserve auth option in case of lost/forgotten main auth credentials (e.g. secret questions or email auth).

            These factors are always required even when user hasn't enabled them explicitly.

          example:
            first:
            - password
            - facebook
            - email
          type: object
        factorsOptional:
          additionalProperties:
            items:
              type: string
            type: array
            x-additionalPropertiesName: factor
          description: |
            This factors can be skipped if user hasn't enabled them. Used for optional 2FA.
            E.g. If user added mobile phone -> use it for 2FA otherwise skip 2FA.
          example:
            second:
            - sms
          type: object
        requiresEntry:
          description: "Require user to be already signed in by one of the listed\
            \ entries. Usually it used for action confirmation, e.g.\n\"payment\"\
            \ that requires confirmation by sms, requires user to be already signed\
            \ in (e.g. with entry \"app\"."
          items:
            type: string
          type: array
        accessToken:
          $ref: '#/components/schemas/EntryAccessTokenCfg'
        ttl:
          description: |
            Max lifetime of session.
          example: 3M
          type: string
          x-nullable: true
        editAccount:
          description: "Is this session allowed to add/remove new auth, enable/disable\
            \ factors, etc.?"
          type: boolean
      type: object
      x-order: -842539141-0
    I18nCfg:
      description: "Configuration for localization of error messages, emails, etc."
      example:
        default: en
        dir: ./i18n
      properties:
        dir:
          description: |
            Directory when messages are stored. To support new language add `<lang>.json5` file. App will create helpful
            templates after start if dir is not null.
          example: ./i18n
          type: string
          x-nullable: true
        default:
          description: |
            Default language to use.
          example: en
          type: string
      type: object
      x-order: -1723799702-4
    InMemoryCfg:
      properties:
        inMemory:
          type: boolean
      type: object
      x-order: 1129812999-3
      x-super: '#/components/schemas/DbCfg'
    InTokenCfg:
      properties:
        inToken:
          type: boolean
      type: object
      x-order: -291817267-1
      x-super: '#/components/schemas/DbCfg'
    IpAuthCfg:
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
        ipBytesToIgnore:
          description: "This allows to drop last bytes of IP. So it allows to authenticate\
            \ factor when ip has rough match, e.g.\nthe same country, same city, or\
            \ same internet provider."
          format: int32
          type: integer
        historySize:
          description: |-
            History of IP addresses user used to sign-in. Authenticated when user attempts to sign in with one of stored
            IPs.
          format: int32
          type: integer
      type: object
      x-order: 2116983897-2
      x-super: '#/components/schemas/BuiltInAuthCfg'
    JdbcCfg:
      properties:
        username:
          type: string
        password:
          type: string
        maxConnections:
          format: int32
          type: integer
      type: object
      x-order: -1497406623-0
      x-super: '#/components/schemas/DbCfg'
    MongoCfg:
      properties:
        mongodb:
          type: string
        database:
          type: string
      required:
      - database
      - mongodb
      type: object
      x-order: -592385449-0
      x-super: '#/components/schemas/DbCfg'
    MysqlCfg:
      properties:
        mysql:
          type: string
        username:
          type: string
        maxConnections:
          format: int32
          type: integer
        password:
          type: string
      type: object
      x-order: -577347408-2
      x-super: '#/components/schemas/JdbcCfg'
    OAuthCfg:
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
        extractLogin:
          description: "Path for login in id-token or user-info endpoint response.\n\
            e.g. `res.user.id` extracts user login from `{ \"res\": { \"user\": {\
            \ \"id\": \"...\" } } }`"
          type: string
        tokenUrl:
          description: Url to get access token by authorisation code.
          type: string
        clientId:
          description: "OAuth client id. Client must be registered on OAuth provider\
            \ (e.g. facebook, google)"
          type: string
        clientSecret:
          description: OAuth client secret.
          type: string
          x-nullable: true
        userInfoUrl:
          description: "If access token provided in request, app tries to extract\
            \ user id from user-info endpoint."
          type: string
        sendTokenInQuery:
          description: Send token in query param.
          type: string
          x-nullable: true
        sendTokenInHeader:
          description: Send token in Authorisation header.
          type: boolean
        extractPublicData:
          additionalProperties:
            type: string
          description: Can fill public data by a response of user-info or id-token.
          type: object
      required:
      - extractLogin
      type: object
      x-order: -51011121-4
      x-super: '#/components/schemas/BuiltInAuthCfg'
    PasswordAuthCfg:
      description: "Password authentication. To enable this auth set auth name to\
        \ \"password\" or use \"builtin\": \"password\" param."
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
        maxLength:
          description: Max allowed Length of the password.
          format: int32
          type: integer
        minLength:
          description: Minimal length of password
          format: int32
          type: integer
        requireNumber:
          description: Require password to contain at least one digit.
          type: boolean
        requireSymbol:
          description: "Require password to contain at least one symbol e.g. @, !,\
            \ &..."
          type: boolean
        requireUpperCase:
          description: This requires password to contain both lowercase and uppercase
            letters.
          type: boolean
        forbidCommonPasswords:
          description: "Password will be checked against table 1,000,000 of most overused\
            \ passwords."
          type: boolean
        forbidLoginAsPassword:
          description: "Rejects passwords that match username, email, anything that\
            \ used as a login according to logins config."
          type: boolean
        forbidReusingPassword:
          $ref: '#/components/schemas/PasswordHistoryCfg'
        strength:
          additionalProperties:
            $ref: '#/components/schemas/PasswordStrengthRequirements'
          description: |
            Allows to calculate password strength based on mentioned criteria. Requirements will be checked one by one
            until first failed.
          type: object
      type: object
      x-order: -266447761-6
      x-super: '#/components/schemas/BuiltInAuthCfg'
    PasswordHistoryCfg:
      description: Forbids user to change password to the old one. Useful if you force
        user to change password regularly.
      properties:
        passwordHistorySize:
          description: Number of current user passwords to store in database.
          format: int32
          type: integer
        passwordHistoryTtl:
          description: "Lifetime for the password. Accepts time string e.g. 1y, 3m,\
            \ 2y 6m, etc."
          type: string
      type: object
      x-order: 378192899-2
    PasswordStrengthRequirements:
      description: Requirements for password
      properties:
        minLength:
          description: Minimal length of password
          format: int32
          type: integer
        requireNumber:
          description: Require password to contain at least one digit.
          type: boolean
        requireSymbol:
          description: "Require password to contain at least one symbol e.g. @, !,\
            \ &..."
          type: boolean
        requireUpperCase:
          description: This requires password to contain both lowercase and uppercase
            letters.
          type: boolean
        forbidCommonPasswords:
          description: "Password will be checked against table 1,000,000 of most overused\
            \ passwords."
          type: boolean
        forbidLoginAsPassword:
          description: "Rejects passwords that match username, email, anything that\
            \ used as a login according to logins config."
          type: boolean
      type: object
      x-order: -266447761-7
    PostgresCfg:
      properties:
        postgres:
          type: string
        username:
          type: string
        maxConnections:
          format: int32
          type: integer
        password:
          type: string
      type: object
      x-order: 893841315-2
      x-super: '#/components/schemas/JdbcCfg'
    QuestionsAuthCfg:
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
        lowercase:
          description: "Transform user answer to lowercase letters. This allows user\
            \ still pass a check when he wrote name or city\nwith different cases.\
            \ `false` means strict match, so \"John\" != \"john\""
          type: boolean
        removeSymbols:
          description: Remove all non-letters from user answer.
          type: boolean
        removeSpaces:
          description: Remove all spaces from user answer.
          type: boolean
        minLength:
          description: Min length of answer. Length are checked after all answer transformation.
          format: int32
          type: integer
        maxLength:
          description: Max length of answer.
          format: int32
          type: integer
        answersRequired:
          description: Min number of answers required to pass this check.
          format: int32
          type: integer
        maxAnswers:
          description: Max answers that user can save.
          format: int32
          type: integer
      type: object
      x-order: 131730481-5
      x-super: '#/components/schemas/BuiltInAuthCfg'
    RateLimiterCfg:
      description: Rate limiter configuration
      example:
        parent: parent
        period: 30s
        ip: true
        quota: 0.8008281904610115
        alignLoad: true
        userId: true
      properties:
        userId:
          description: Create different rate limiters for different users.
          type: boolean
        ip:
          description: Create different rate limiters for different ips.
          type: boolean
        quota:
          description: |-
            Total quota available for time period. Quota means "weight" of a request. So quota 1.0 and period 1s
            allows 10 request with weight 0.1 per seconds or 5 request with weight 0.2 per second.
          format: double
          type: number
        period:
          description: |
            Quota restoring period
          example: 30s
          type: string
        alignLoad:
          description: Insert delays between requests if there are too many simultaneous
            requests.
          type: boolean
        parent:
          description: "Allows to combine rate limiters. Let's say rt1 allows 10 reqs\
            \ per seconds, and rt2 allows 20 reqs per minute.\nIf the rt1 has the\
            \ rt2 as a parent, that means that rt1 allows 10 reqs per seconds but\
            \ not more than 20 per minute."
          type: string
          x-nullable: true
      type: object
      x-order: -1666811215-0
    RedisCfg:
      properties:
        redis:
          items:
            type: string
          type: array
        cluster:
          type: boolean
        database:
          format: int32
          type: integer
        user:
          type: string
          x-nullable: true
        password:
          type: string
          x-nullable: true
        ssl:
          type: boolean
        maxConnections:
          format: int32
          type: integer
      type: object
      x-order: -2007275575-0
      x-super: '#/components/schemas/DbCfg'
    RefreshTokenCfg:
      description: |-
        Long-living token used for generation of new access token.
        THis is optional. You can set longer access-token lifetime instead.
      example:
        allowReuse: true
        unauthenticatedTtl: 1d
        maxTtl: 1Y
        ttl: 3M
      properties:
        ttl:
          description: "Lifetime for refresh token. 10d, 3M, etc.\n"
          example: 3M
          type: string
        maxTtl:
          description: |
            Refresh token can be prolonged by refresh.
          example: 1Y
          type: string
        unauthenticatedTtl:
          description: "Lifetime of token for unauthenticated session. Limits time\
            \ that user has to sign in/up, restoring password etc.\n"
          example: 1d
          type: string
        allowReuse:
          description: If false - one refresh token can't be used twice. New refresh
            token will be provided by refresh API.
          type: boolean
      type: object
      x-order: -1195634750-5
    RemoteAuthCfg:
      description: Authentication implementation config
      properties:
        remote:
          description: Path to the API that implements plugin.
          type: string
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
        query:
          additionalProperties:
            type: string
            x-additionalPropertiesName: queryParam
          description: |
            Add query params after `?` symbol in url.
          type: object
        headers:
          additionalProperties:
            type: string
            x-additionalPropertiesName: header
          description: |
            Add headers to request.
          type: object
        code:
          $ref: '#/components/schemas/CodeCfg'
      required:
      - remote
      type: object
      x-order: 658063406-0
      x-super: '#/components/schemas/AuthCfg'
    RemoteDbCfg:
      properties:
        remote:
          type: string
        query:
          additionalProperties:
            type: string
          type: object
        headers:
          additionalProperties:
            type: string
          type: object
      required:
      - remote
      type: object
      x-order: 842893688-0
      x-super: '#/components/schemas/DbCfg'
    SHAppCfg:
      example:
        entries:
          key:
            editAccount: true
            factorsRequired:
              first:
              - password
              - facebook
              - email
            factorsOptional:
              second:
              - sms
            requiresEntry:
            - requiresEntry
            - requiresEntry
            accessToken:
              cache: true
              ttl: ttl
            ttl: 3M
        healthCheckKey: healthCheckKey
        $schema: $schema
        auths:
          email: {}
          password: {}
          facebook:
            builtin: oauth
        http:
          proxy: true
          bind: 127.0.0.1
          port: 9876
        rateLimiters:
          key:
            parent: parent
            period: 30s
            ip: true
            quota: 0.8008281904610115
            alignLoad: true
            userId: true
        secret: secret
        logins:
        - username
        - facebook
        - email
        db:
          rateLimiter: null
          session: null
          user: null
        i18n:
          default: en
          dir: ./i18n
        token:
          access:
            cache: null
            cookie: true
            cacheUnauthenticated: true
            ttl: 1d
          sameUserAgent: true
          refresh:
            allowReuse: true
            unauthenticatedTtl: 1d
            maxTtl: 1Y
            ttl: 3M
      properties:
        http:
          $ref: '#/components/schemas/SHHttpCfg'
        logins:
          description: "Types of logins that can be used for identification.\n\nIf\
            \ the login type is not specified in the auth config - it will be considered\
            \ a simple login:\nthe user can set any name. E.g. username.\n\nIf the\
            \ login type is specified in the auth config, this login will be generated\
            \ by\nthe corresponding authenticator. E.g. email, phone or facebook account\
            \ id.\n\n"
          example:
          - username
          - facebook
          - email
          items:
            type: string
          type: array
          uniqueItems: true
        auths:
          additionalProperties:
            $ref: '#/components/schemas/SHAppCfg_auths_value'
          description: "List of auth names and auth configs\n\nTo use builtin auths\
            \ (not a plugin or remote) follow the example: `\"password\": { ... }`\
            \ or\n`\"anyAuthName\": { \"builtin\": \"password\", ... }`\n"
          example:
            email: {}
            password: {}
            facebook:
              builtin: oauth
          type: object
        entries:
          additionalProperties:
            $ref: '#/components/schemas/EntryCfg'
          description: "List of app entries. Entry usually represents UI used for\
            \ signing in/up or additional authentication\nbefore action. E.g.:\n-\
            \ app: main entry that requests user login/email + password and 2fa (if\
            \ enabled)\n- api: entry that allows user to generate API keys and connect\
            \ third-party app\n- action: additional authentication (e.g. code from\
            \ sms) requested before e.g. payment\n"
          type: object
        db:
          $ref: '#/components/schemas/DbsCfg'
        token:
          $ref: '#/components/schemas/TokenCfg'
        rateLimiters:
          additionalProperties:
            $ref: '#/components/schemas/RateLimiterCfg'
          description: |
            List of rate limiters
          type: object
        secret:
          description: |-
            THe key that app uses for RSA certificate generation used for token signature.
            If `null` - app will generate secret automatically during startup.
          type: string
        healthCheckKey:
          description: Set this key if you want to restrict access to the health-check.
          type: string
          x-nullable: true
        i18n:
          $ref: '#/components/schemas/I18nCfg'
        $schema:
          type: string
      type: object
      x-order: 578911261-0
    SHHttpCfg:
      description: Http server config
      example:
        proxy: true
        bind: 127.0.0.1
        port: 9876
      properties:
        port:
          description: |
            A port that the server will use to accept http requests
          example: 9876
          format: int32
          type: integer
        bind:
          description: |
            IP address to bind to. Usually 0.0.0.0 to accept for any connection or 127.0.0.1 to accept only localhost
          example: 127.0.0.1
          type: string
        proxy:
          description: "If true, X-Forwarded-For header is used to get client's IP\
            \ address"
          type: boolean
      type: object
      x-order: 578911261-1
    SqliteCfg:
      properties:
        username:
          type: string
        password:
          type: string
        maxConnections:
          format: int32
          type: integer
        sqlite:
          type: string
      type: object
      x-order: -1872929936-3
      x-super: '#/components/schemas/JdbcCfg'
    TokenCfg:
      description: Token lifetime config.
      example:
        access:
          cache: null
          cookie: true
          cacheUnauthenticated: true
          ttl: 1d
        sameUserAgent: true
        refresh:
          allowReuse: true
          unauthenticatedTtl: 1d
          maxTtl: 1Y
          ttl: 3M
      properties:
        access:
          $ref: '#/components/schemas/AccessTokenCfg'
        refresh:
          $ref: '#/components/schemas/RefreshTokenCfg'
        sameUserAgent:
          description: Require all request to be made from the same device.
          type: boolean
      type: object
      x-order: -1195634750-0
    TokenHandlerCfg:
      properties:
        userInfoUrl:
          description: "If access token provided in request, app tries to extract\
            \ user id from user-info endpoint."
          type: string
        sendTokenInQuery:
          description: Send token in query param.
          type: string
          x-nullable: true
        sendTokenInHeader:
          description: Send token in Authorisation header.
          type: boolean
      required:
      - userInfoUrl
      type: object
      x-order: -51011121-6
    AuthExecRes_resData:
      oneOf:
      - $ref: '#/components/schemas/AuthResDataJson'
      - $ref: '#/components/schemas/EmailAuthRes'
      - $ref: '#/components/schemas/IpAuthRes'
      - $ref: '#/components/schemas/OAuthRes'
      - $ref: '#/components/schemas/PasswordUpdateRes'
      - $ref: '#/components/schemas/QuestionsAuthenticateRes'
      - $ref: '#/components/schemas/QuestionsUpdateRes'
    AuthenticateReq_authReqs_value:
      oneOf:
      - $ref: '#/components/schemas/AppSecretReq'
      - $ref: '#/components/schemas/AuthReqDataJson'
      - $ref: '#/components/schemas/EmailAuthenticateReq'
      - $ref: '#/components/schemas/EmailUpdateReq'
      - $ref: '#/components/schemas/OAuthReq'
      - $ref: '#/components/schemas/PasswordAuthenticateReq'
      - $ref: '#/components/schemas/PasswordUpdateReq'
      - $ref: '#/components/schemas/QuestionsAuthenticateReq'
      - $ref: '#/components/schemas/QuestionsUpdateReq'
      x-additionalPropertiesName: auth
    DbsCfg_user:
      description: User database config
      oneOf:
      - $ref: '#/components/schemas/InMemoryCfg'
      - $ref: '#/components/schemas/InTokenCfg'
      - $ref: '#/components/schemas/MongoCfg'
      - $ref: '#/components/schemas/RedisCfg'
      - $ref: '#/components/schemas/RemoteDbCfg'
      - $ref: '#/components/schemas/MysqlCfg'
      - $ref: '#/components/schemas/PostgresCfg'
      - $ref: '#/components/schemas/SqliteCfg'
    DbsCfg_session:
      description: "Session database config.\n\nIf you aren't using cluster, prefer\
        \ in-memory database.\n\nYou can use in-token to not use database at all.\
        \ Use it with `token.access.cacheUnauthenticated = true` and\n`token.access.cache\
        \ != null` values."
      oneOf:
      - $ref: '#/components/schemas/InMemoryCfg'
      - $ref: '#/components/schemas/InTokenCfg'
      - $ref: '#/components/schemas/MongoCfg'
      - $ref: '#/components/schemas/RedisCfg'
      - $ref: '#/components/schemas/RemoteDbCfg'
      - $ref: '#/components/schemas/MysqlCfg'
      - $ref: '#/components/schemas/PostgresCfg'
      - $ref: '#/components/schemas/SqliteCfg'
    DbsCfg_rateLimiter:
      description: "Database for rate-limiters. If you don't use rate-limiter leave\
        \ this empty (`{}`)."
      oneOf:
      - $ref: '#/components/schemas/InMemoryCfg'
      - $ref: '#/components/schemas/InTokenCfg'
      - $ref: '#/components/schemas/MongoCfg'
      - $ref: '#/components/schemas/RedisCfg'
      - $ref: '#/components/schemas/RemoteDbCfg'
      - $ref: '#/components/schemas/MysqlCfg'
      - $ref: '#/components/schemas/PostgresCfg'
      - $ref: '#/components/schemas/SqliteCfg'
    SHAppCfg_auths_value:
      oneOf:
      - $ref: '#/components/schemas/RemoteAuthCfg'
      - $ref: '#/components/schemas/AppSecretAuthCfg'
      - $ref: '#/components/schemas/EmailAuthCfg'
      - $ref: '#/components/schemas/IpAuthCfg'
      - $ref: '#/components/schemas/OAuthCfg'
      - $ref: '#/components/schemas/PasswordAuthCfg'
      - $ref: '#/components/schemas/QuestionsAuthCfg'
      x-additionalPropertiesName: auth
  securitySchemes:
    access-token:
      in: query
      name: access-token
      type: apiKey
x-tagGroups:
- name: Api
  tags:
  - session
  - token
  - authorisation
  - user
  - server
  - signature

