openapi: 3.0.1
info:
  title: Kntrl API
  version: "1.0"
servers:
- url: /
tags:
- name: token
  x-displayName:
  - Tokens
- name: server
  x-displayName:
  - Server API
- description: "API for signing in/up/out, listing all sessions, etc.\n"
  name: session
  x-displayName:
  - Session
- description: |
    User API
  name: user
  x-displayName:
  - Users
- name: authorisation
  x-displayName:
  - Authorization API
- description: |
    Utilities for client side cache of data and validation.
  name: signature
  x-displayName:
  - Signature
paths:
  /api/server/health:
    get:
      description: Get server plugins state
      operationId: health
      parameters:
      - explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      tags:
      - server
      x-order: 1
      x-accepts: application/json
  /api/session:
    delete:
      operationId: signOut
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 7
      x-accepts: application/json
    get:
      description: |
        Get current session data.
      operationId: getSession
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 1
      x-accepts: application/json
    patch:
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 4
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: "Create new session.\nif session entry requires another entry,\
        \ access token must be provided."
      operationId: newSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSessionReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      tags:
      - session
      x-order: 3
      x-content-type: application/json
      x-accepts: application/json
  /api/user:
    get:
      operationId: getUser
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - user
      x-order: 1
      x-accepts: application/json
    patch:
      operationId: saveUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - user
      x-order: 7
      x-content-type: application/json
      x-accepts: application/json
  /api/authorise:
    post:
      description: |
        Validates token and executes rate limiter.
        This API should be called by backend.
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthoriseReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthoriseRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - authorisation
      x-order: 1
      x-content-type: application/json
      x-accepts: application/json
  /api/signature/public-key:
    get:
      description: |
        Public key generated from app-secret from config used for signature validation.
      operationId: getPublicKey
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - signature
      x-order: 1
      x-accepts: application/json
  /api/server/cfg:
    get:
      description: |
        Current server configuration. Available only for users with system-access.
      operationId: cfg
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SHAppCfg'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - server
      x-order: 1
      x-accepts: application/json
  /api/token/refresh:
    post:
      description: Get new access token using refresh token.
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      tags:
      - token
      x-order: 2
      x-content-type: application/json
      x-accepts: application/json
  /api/rate-limiter/limit:
    post:
      description: "Executes rate limiter if no authorisation is required. Otherwise,\
        \ this works similarly to /authorise.\n"
      operationId: limit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimiterReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthoriseRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - authorisation
      x-order: 2
      x-content-type: application/json
      x-accepts: application/json
  /api/signature/verify:
    post:
      description: Validates data signature.
      operationId: verify
      parameters:
      - explode: true
        in: query
        name: signature
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: secret
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      tags:
      - signature
      x-order: 2
      x-content-type: application/json
      x-accepts: application/json
  /api/signature/sign:
    post:
      description: |
        Sign data using specified secret.
      operationId: sign
      parameters:
      - explode: true
        in: query
        name: secret
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - signature
      x-order: 3
      x-content-type: application/json
      x-accepts: application/json
  /api/session/auth/confirm:
    post:
      description: "Confirm auth with received code. To get code id, check response\
        \ of sign in / sign up / authenticate API.\n"
      operationId: confirmSessionAuths
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmSessionAuthsReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 6
      x-content-type: application/json
      x-accepts: application/json
  /api/session/{session-id}:
    delete:
      operationId: delSession
      parameters:
      - explode: false
        in: path
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 8
      x-accepts: application/json
  /api/session/all:
    get:
      operationId: getAll
      parameters:
      - explode: true
        in: query
        name: entry
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindSessionsRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - session
      x-order: 9
      x-accepts: application/json
  /api/user/{id}:
    patch:
      operationId: editUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - user
      x-order: 9
      x-content-type: application/json
      x-accepts: application/json
  /api/user/auth/confirm:
    post:
      operationId: confirmUserAuths
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmUserAuthsReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      tags:
      - user
      x-order: 10
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    Err:
      discriminator:
        mapping:
          SESSION_EXPIRED: '#/components/schemas/SessionExpired'
          ACCESS_DENIED: '#/components/schemas/AccessDenied'
          USER_NOT_FOUND: '#/components/schemas/UserNotFound'
          SIGNATURE_IS_INCORRECT: '#/components/schemas/SignatureIsIncorrect'
          SERVER_ERR: '#/components/schemas/ServerErr'
          INTEGRATION_ERR: '#/components/schemas/IntegrationErr'
          ANY_ERR: '#/components/schemas/AnyErr'
          USER_LOGIN_ALREADY_TAKEN: '#/components/schemas/UserLoginAlreadyTaken'
          AUTH_IS_NOT_ENABLED: '#/components/schemas/AuthIsNotEnabled'
          TOKEN_EXPIRED: '#/components/schemas/TokenExpired'
          TOO_MANY_REQS: '#/components/schemas/TooManyReqs'
          AUTH_IS_NOT_CONFIRMED: '#/components/schemas/AuthIsNotConfirmed'
          NO_AUTH_AVAILABLE_FOR_FACTOR: '#/components/schemas/NoAuthAvailableForFactor'
          AUTH_REQUIRES_ANOTHER: '#/components/schemas/AuthRequiresAnother'
          CODE_IS_EXPIRED: '#/components/schemas/CodeIsExpired'
          CODE_TOO_MANY_ATTEMPTS: '#/components/schemas/CodeTooManyAttempts'
          CODE_IS_INCORRECT: '#/components/schemas/CodeIsIncorrect'
          UNAUTHENTICATED: '#/components/schemas/Unauthenticated'
          PLUGIN_ERR: '#/components/schemas/PluginErr'
          PLUGIN_CLIENT_ERR: '#/components/schemas/PluginClientErr'
          PASSWORD_IS_INCORRECT: '#/components/schemas/PasswordIsIncorrect'
          PASSWORD_IS_INVALID: '#/components/schemas/PasswordIsInvalid'
          EMAIL_IS_INCORRECT: '#/components/schemas/EmailIsIncorrect'
          IP_NEW: '#/components/schemas/IpNew'
          QUESTIONS_ANSWERS_INCORRECT: '#/components/schemas/QuestionsAnswersIncorrect'
          QUESTIONS_ANSWERS_INVALID: '#/components/schemas/QuestionsAnswersInvalid'
        propertyName: code
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      required:
      - code
      - devMsg
      type: object
      x-order: kntrl/core/domain/err-base.kt0
      x-sealed: false
    AccessDenied:
      allOf:
      - $ref: '#/components/schemas/Unauthenticated'
      type: object
      x-order: kntrl/core/app/err.kt1
    AnswerErr:
      properties:
        tooShort:
          type: boolean
        tooLong:
          type: boolean
      required:
      - tooLong
      - tooShort
      type: object
      x-order: kntrl/core/infra/err.kt9
    AnyErr:
      additionalProperties: true
      allOf:
      - $ref: '#/components/schemas/Err'
      - $ref: '#/components/schemas/AnyErr_allOf'
      required:
      - devMsg
      type: object
      x-order: kntrl/core/domain/err-base.kt5
    AuthIsNotConfirmed:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/domain/err.kt2
    AuthIsNotEnabled:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/domain/err.kt1
    AuthRequiresAnother:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/domain/err.kt4
    ClientErr:
      allOf:
      - $ref: '#/components/schemas/Err'
      - $ref: '#/components/schemas/AnyErr_allOf'
      discriminator:
        mapping:
          SESSION_EXPIRED: '#/components/schemas/SessionExpired'
          ACCESS_DENIED: '#/components/schemas/AccessDenied'
          USER_NOT_FOUND: '#/components/schemas/UserNotFound'
          SIGNATURE_IS_INCORRECT: '#/components/schemas/SignatureIsIncorrect'
          USER_LOGIN_ALREADY_TAKEN: '#/components/schemas/UserLoginAlreadyTaken'
          AUTH_IS_NOT_ENABLED: '#/components/schemas/AuthIsNotEnabled'
          TOKEN_EXPIRED: '#/components/schemas/TokenExpired'
          TOO_MANY_REQS: '#/components/schemas/TooManyReqs'
          AUTH_IS_NOT_CONFIRMED: '#/components/schemas/AuthIsNotConfirmed'
          AUTH_REQUIRES_ANOTHER: '#/components/schemas/AuthRequiresAnother'
          CODE_IS_EXPIRED: '#/components/schemas/CodeIsExpired'
          CODE_TOO_MANY_ATTEMPTS: '#/components/schemas/CodeTooManyAttempts'
          CODE_IS_INCORRECT: '#/components/schemas/CodeIsIncorrect'
          UNAUTHENTICATED: '#/components/schemas/Unauthenticated'
          PLUGIN_CLIENT_ERR: '#/components/schemas/PluginClientErr'
          PASSWORD_IS_INCORRECT: '#/components/schemas/PasswordIsIncorrect'
          PASSWORD_IS_INVALID: '#/components/schemas/PasswordIsInvalid'
          EMAIL_IS_INCORRECT: '#/components/schemas/EmailIsIncorrect'
          IP_NEW: '#/components/schemas/IpNew'
          QUESTIONS_ANSWERS_INCORRECT: '#/components/schemas/QuestionsAnswersIncorrect'
          QUESTIONS_ANSWERS_INVALID: '#/components/schemas/QuestionsAnswersInvalid'
        propertyName: code
      required:
      - code
      - devMsg
      type: object
      x-order: kntrl/core/domain/err-base.kt4
      x-sealed: false
    CodeIsExpired:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/domain/err.kt5
    CodeIsIncorrect:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/domain/err.kt7
    CodeTooManyAttempts:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/domain/err.kt6
    EmailIsIncorrect:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/infra/err.kt5
    Instant:
      format: int64
      type: integer
    IntegrationErr:
      allOf:
      - $ref: '#/components/schemas/Err'
      - $ref: '#/components/schemas/AnyErr_allOf'
      discriminator:
        mapping:
          INTEGRATION_ERR: '#/components/schemas/IntegrationErr'
          NO_AUTH_AVAILABLE_FOR_FACTOR: '#/components/schemas/NoAuthAvailableForFactor'
        propertyName: code
      required:
      - code
      - devMsg
      type: object
      x-order: kntrl/core/domain/err-base.kt3
      x-sealed: false
    IpNew:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/infra/err.kt6
    LoginId:
      example:
        type: type
        login: login
      properties:
        type:
          description: Type of login
          type: string
        login:
          description: "User unique identifier, email, username, etc."
          type: string
      required:
      - login
      - type
      type: object
      x-order: kntrl/core/domain/user/Login.kt2
    NoAuthAvailableForFactor:
      allOf:
      - $ref: '#/components/schemas/IntegrationErr'
      type: object
      x-order: kntrl/core/domain/err.kt3
    PasswordIsIncorrect:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      - $ref: '#/components/schemas/PasswordIsIncorrect_allOf'
      type: object
      x-order: kntrl/core/infra/err.kt3
    PasswordIsInvalid:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      - $ref: '#/components/schemas/PasswordIsInvalid_allOf'
      required:
      - commonPassword
      - missingLowerCase
      - missingNumber
      - missingSymbol
      - missingUpperCase
      - passwordsMismatch
      - tooLong
      - tooShort
      type: object
      x-order: kntrl/core/infra/err.kt4
    PluginClientErr:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      - $ref: '#/components/schemas/PluginClientErr_allOf'
      type: object
      x-order: kntrl/core/infra/err.kt2
    PluginErr:
      allOf:
      - $ref: '#/components/schemas/ServerErr'
      type: object
      x-order: kntrl/core/infra/err.kt1
    QuestionsAnswersIncorrect:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      - $ref: '#/components/schemas/QuestionsAnswersIncorrect_allOf'
      required:
      - incorrectAnswers
      - questionsNotFound
      - requiresMoreAnswers
      type: object
      x-order: kntrl/core/infra/err.kt7
    QuestionsAnswersInvalid:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      - $ref: '#/components/schemas/QuestionsAnswersInvalid_allOf'
      required:
      - invalidAnswers
      - tooManyAnswers
      type: object
      x-order: kntrl/core/infra/err.kt8
    ServerErr:
      allOf:
      - $ref: '#/components/schemas/Err'
      - $ref: '#/components/schemas/AnyErr_allOf'
      discriminator:
        mapping:
          SERVER_ERR: '#/components/schemas/ServerErr'
          PLUGIN_ERR: '#/components/schemas/PluginErr'
        propertyName: code
      required:
      - code
      - devMsg
      type: object
      x-order: kntrl/core/domain/err-base.kt2
      x-sealed: false
    SessionExpired:
      allOf:
      - $ref: '#/components/schemas/Unauthenticated'
      type: object
      x-order: kntrl/core/app/err.kt0
    SignatureIsIncorrect:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/app/err.kt3
    TokenExpired:
      allOf:
      - $ref: '#/components/schemas/Unauthenticated'
      - $ref: '#/components/schemas/TokenExpired_allOf'
      type: object
      x-order: kntrl/core/domain/err.kt10
    TooManyReqs:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      - $ref: '#/components/schemas/TooManyReqs_allOf'
      type: object
      x-order: kntrl/core/domain/err.kt11
    Unauthenticated:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      discriminator:
        mapping:
          SESSION_EXPIRED: '#/components/schemas/SessionExpired'
          ACCESS_DENIED: '#/components/schemas/AccessDenied'
          USER_NOT_FOUND: '#/components/schemas/UserNotFound'
          TOKEN_EXPIRED: '#/components/schemas/TokenExpired'
          UNAUTHENTICATED: '#/components/schemas/Unauthenticated'
        propertyName: code
      required:
      - code
      type: object
      x-order: kntrl/core/domain/err.kt8
      x-sealed: false
    UserLoginAlreadyTaken:
      allOf:
      - $ref: '#/components/schemas/ClientErr'
      type: object
      x-order: kntrl/core/domain/err.kt0
    UserNotFound:
      allOf:
      - $ref: '#/components/schemas/Unauthenticated'
      type: object
      x-order: kntrl/core/app/err.kt2
    AccessToken:
      type: string
      x-order: kntrl/core/domain/token/Token.kt3
    CodeVerifier:
      properties:
        id:
          type: string
        validUntil:
          format: int64
          type: integer
        usedAttempts:
          format: int32
          type: integer
        attemptsLeft:
          format: int32
          type: integer
        sentAt:
          format: int64
          type: integer
        hasAttemptsLeft:
          type: boolean
      required:
      - attemptsLeft
      - sentAt
      - usedAttempts
      - validUntil
      type: object
      x-order: kntrl/core/domain/confirm/CodeVerifier.kt0
    Device:
      example:
        browser: browser
        mobile: true
        userAgent: userAgent
        type: type
      properties:
        type:
          type: string
          x-nullable: true
        browser:
          type: string
          x-nullable: true
        userAgent:
          type: string
        mobile:
          type: boolean
      required:
      - userAgent
      type: object
      x-order: kntrl/core/domain/session/Device.kt0
    NextFactor:
      example:
        supportedAuths:
        - supportedAuths
        - supportedAuths
        factor: factor
      properties:
        factor:
          type: string
        supportedAuths:
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - factor
      - supportedAuths
      type: object
      x-order: kntrl/core/domain/session/NextFactors.kt0
    RefreshToken:
      type: string
      x-order: kntrl/core/domain/token/Token.kt5
    RefreshTokenRes:
      example:
        session:
          authenticated: true
          systemAccess: true
          signedInAt: 0
          userId: userId
          expiresAt: 6
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 1
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key: null
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        tokens:
          access: access
          accessTokenExpiresAt: 0
          refresh: refresh
      properties:
        tokens:
          $ref: '#/components/schemas/Tokens'
        session:
          $ref: '#/components/schemas/Session'
      required:
      - session
      - tokens
      type: object
      x-order: kntrl/core/app/TokenMng.kt2
    Session:
      example:
        authenticated: true
        systemAccess: true
        signedInAt: 0
        userId: userId
        expiresAt: 6
        nextFactors:
        - supportedAuths:
          - supportedAuths
          - supportedAuths
          factor: factor
        - supportedAuths:
          - supportedAuths
          - supportedAuths
          factor: factor
        entry: entry
        expired: true
        authenticatedBy:
          key: authenticatedBy
        newUser: true
        refreshedAt: 1
        id: id
        identifiedBy:
        - type: type
          login: login
        - type: type
          login: login
        unconfirmedAuths:
          key: null
        device:
          browser: browser
          mobile: true
          userAgent: userAgent
          type: type
      properties:
        id:
          type: string
        entry:
          description: Entry that authenticates this session
          type: string
        identifiedBy:
          description: Login used to identify this user
          items:
            $ref: '#/components/schemas/LoginId'
          type: array
        userId:
          type: string
          x-nullable: true
        authenticatedBy:
          additionalProperties:
            type: string
            x-additionalPropertiesName: factor
          description: |
            Authenticator used for factors
          type: object
        unconfirmedAuths:
          additionalProperties:
            $ref: '#/components/schemas/Session_unconfirmedAuths_value'
          description: |
            Auths that waiting for confirmation
          type: object
        nextFactors:
          description: List of factors needed to authenticate this session
          items:
            $ref: '#/components/schemas/NextFactor'
          type: array
        signedInAt:
          format: int64
          type: integer
        expiresAt:
          format: int64
          type: integer
        refreshedAt:
          format: int64
          type: integer
        newUser:
          type: boolean
        device:
          $ref: '#/components/schemas/Device'
        systemAccess:
          type: boolean
        expired:
          type: boolean
        authenticated:
          type: boolean
      required:
      - authenticatedBy
      - device
      - entry
      - expiresAt
      - id
      - identifiedBy
      - newUser
      - nextFactors
      - refreshedAt
      - signedInAt
      - systemAccess
      - unconfirmedAuths
      type: object
      x-order: kntrl/core/domain/session/Session.kt0
    Tokens:
      example:
        access: access
        accessTokenExpiresAt: 0
        refresh: refresh
      properties:
        access:
          type: string
          x-order: kntrl/core/domain/token/Token.kt3
        refresh:
          type: string
          x-order: kntrl/core/domain/token/Token.kt5
        accessTokenExpiresAt:
          format: int64
          type: integer
      required:
      - access
      - refresh
      type: object
      x-order: kntrl/core/domain/token/Token.kt0
    UnconfirmedAuth:
      properties:
        sentCodes:
          items:
            $ref: '#/components/schemas/CodeVerifier'
          type: array
      type: object
      x-order: kntrl/core/domain/session/UnconfirmedAuth.kt0
    RefreshTokenReq:
      example:
        refreshToken: refreshToken
      properties:
        refreshToken:
          type: string
          x-order: kntrl/core/domain/token/Token.kt5
      required:
      - refreshToken
      type: object
      x-order: kntrl/core/app/TokenMng.kt1
    DbHealthRes:
      example:
        rateLimiter:
          msg: msg
          status: null
        session:
          msg: msg
          status: null
        user:
          msg: msg
          status: null
      properties:
        user:
          $ref: '#/components/schemas/HealthStatusRes'
        session:
          $ref: '#/components/schemas/HealthStatusRes'
        rateLimiter:
          $ref: '#/components/schemas/HealthStatusRes'
      required:
      - rateLimiter
      - session
      - user
      type: object
      x-order: kntrl/core/app/server/ServerSvc.kt2
    HealthRes:
      example:
        msg: msg
        auth:
          key: null
        db:
          rateLimiter:
            msg: msg
            status: null
          session:
            msg: msg
            status: null
          user:
            msg: msg
            status: null
        status: null
      properties:
        db:
          $ref: '#/components/schemas/DbHealthRes'
        auth:
          additionalProperties:
            $ref: '#/components/schemas/HealthRes_auth_value'
          type: object
        status:
          $ref: '#/components/schemas/HealthStatus'
        msg:
          type: string
          x-nullable: true
      required:
      - auth
      - db
      - status
      type: object
      x-order: kntrl/core/app/server/ServerSvc.kt1
    HealthStatus:
      enum:
      - HEALTHY
      - UNAVAILABLE
      - ERR
      type: string
    HealthStatusRes:
      example:
        msg: msg
        status: null
      properties:
        status:
          $ref: '#/components/schemas/HealthStatus'
        msg:
          type: string
          x-nullable: true
      required:
      - status
      type: object
      x-order: kntrl/core/app/server/HasHealthStatus.kt1
    AuthData:
      properties:
        public:
          type: object
        login:
          type: string
          x-nullable: true
      required:
      - public
      type: object
      x-order: kntrl/core/domain/user/AuthUserCfg.kt3
    AuthExecRes:
      discriminator:
        mapping:
          OK: '#/components/schemas/OkAuthExecRes'
          ERR: '#/components/schemas/ErrAuthExecRes'
          SKIPPED: '#/components/schemas/SkippedAuthExecRes'
        propertyName: status
      example:
        sentCode:
          attemptsLeft: 2
          usedAttempts: 5
          hasAttemptsLeft: true
          validUntil: 5
          id: id
          sentAt: 7
        status: status
      properties:
        status:
          type: string
        sentCode:
          $ref: '#/components/schemas/Code'
      required:
      - status
      type: object
      x-order: kntrl/core/app/auth/AuthExec.kt2
      x-sealed: true
    AuthUserCfg:
      properties:
        data:
          $ref: '#/components/schemas/AuthData'
        sentCodes:
          description: |
            List of auths that wait for confirmation.
          items:
            $ref: '#/components/schemas/UnconfirmedAuthData'
          type: array
        confirmed:
          type: boolean
      type: object
      x-order: kntrl/core/domain/user/AuthUserCfg.kt0
    AuthenticateRes:
      example:
        session:
          authenticated: true
          systemAccess: true
          signedInAt: 0
          userId: userId
          expiresAt: 6
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 1
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key: null
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        tokens:
          access: access
          accessTokenExpiresAt: 0
          refresh: refresh
        user:
          new: true
          signedUpAt: 6
          systemAccess: true
          auths:
            key: null
          id: 2c24704f-198a-4bc4-9718-306ccc97bbdc
          isNew: true
          logins:
          - unconfirmedLogin: unconfirmedLogin
            type: type
            login: login
            confirmed: true
          - unconfirmedLogin: unconfirmedLogin
            type: type
            login: login
            confirmed: true
          factors:
          - factors
          - factors
          updatedAt: 1
        authRes:
          key:
            sentCode:
              attemptsLeft: 2
              usedAttempts: 5
              hasAttemptsLeft: true
              validUntil: 5
              id: id
              sentAt: 7
            status: status
      properties:
        tokens:
          $ref: '#/components/schemas/Tokens'
        session:
          $ref: '#/components/schemas/Session'
        user:
          $ref: '#/components/schemas/User'
        authRes:
          additionalProperties:
            $ref: '#/components/schemas/AuthExecRes'
          type: object
      required:
      - authRes
      type: object
      x-order: kntrl/core/app/session/SessionMng.kt3
    Code:
      example:
        attemptsLeft: 2
        usedAttempts: 5
        hasAttemptsLeft: true
        validUntil: 5
        id: id
        sentAt: 7
      properties:
        id:
          type: string
        validUntil:
          format: int64
          type: integer
        usedAttempts:
          format: int32
          type: integer
        attemptsLeft:
          format: int32
          type: integer
        sentAt:
          format: int64
          type: integer
        hasAttemptsLeft:
          type: boolean
      required:
      - attemptsLeft
      - sentAt
      - usedAttempts
      - validUntil
      type: object
      x-order: kntrl/core/app/auth/Auth.kt3
    ErrAuthExecRes:
      allOf:
      - $ref: '#/components/schemas/AuthExecRes'
      - $ref: '#/components/schemas/ErrAuthExecRes_allOf'
      required:
      - err
      type: object
      x-order: kntrl/core/app/auth/AuthExec.kt4
    Login:
      example:
        unconfirmedLogin: unconfirmedLogin
        type: type
        login: login
        confirmed: true
      properties:
        type:
          description: Type of login
          type: string
        login:
          description: "User unique identifier, email, username, etc."
          type: string
        unconfirmedLogin:
          type: string
          x-nullable: true
        confirmed:
          type: boolean
      required:
      - login
      - type
      type: object
      x-order: kntrl/core/domain/user/Login.kt0
    OkAuthExecRes:
      allOf:
      - $ref: '#/components/schemas/AuthExecRes'
      - $ref: '#/components/schemas/OkAuthExecRes_allOf'
      type: object
      x-order: kntrl/core/app/auth/AuthExec.kt3
    SkippedAuthExecRes:
      allOf:
      - $ref: '#/components/schemas/AuthExecRes'
      - $ref: '#/components/schemas/SkippedAuthExecRes_allOf'
      type: object
      x-order: kntrl/core/app/auth/AuthExec.kt5
    UnconfirmedAuthData:
      properties:
        data:
          $ref: '#/components/schemas/AuthData'
        code:
          $ref: '#/components/schemas/CodeVerifier'
      required:
      - code
      - data
      type: object
      x-order: kntrl/core/domain/user/AuthUserCfg.kt4
    User:
      example:
        new: true
        signedUpAt: 6
        systemAccess: true
        auths:
          key: null
        id: 2c24704f-198a-4bc4-9718-306ccc97bbdc
        isNew: true
        logins:
        - unconfirmedLogin: unconfirmedLogin
          type: type
          login: login
          confirmed: true
        - unconfirmedLogin: unconfirmedLogin
          type: type
          login: login
          confirmed: true
        factors:
        - factors
        - factors
        updatedAt: 1
      properties:
        id:
          description: |
            Generated user uuid
          example: 2c24704f-198a-4bc4-9718-306ccc97bbdc
          type: string
        logins:
          items:
            $ref: '#/components/schemas/Login'
          type: array
        auths:
          additionalProperties:
            $ref: '#/components/schemas/User_auths_value'
          description: |
            Public data of confirmed auths and sent codes for unconfirmed auths.
          type: object
        factors:
          description: Enabled factors
          items:
            type: string
          type: array
          uniqueItems: true
        signedUpAt:
          format: int64
          type: integer
        updatedAt:
          format: int64
          type: integer
        isNew:
          type: boolean
        systemAccess:
          description: Allows to access to any user in the app.
          type: boolean
        new:
          type: boolean
      required:
      - auths
      - factors
      - id
      - logins
      - signedUpAt
      - updatedAt
      type: object
      x-order: kntrl/core/domain/user/User.kt0
    json:
      type: object
    AuthenticateReq:
      example:
        authReqs:
          key: ""
        dryRun: true
        factors:
          key: factors
      properties:
        factors:
          additionalProperties:
            type: string
            x-additionalPropertiesName: factor
          type: object
        authReqs:
          additionalProperties:
            x-additionalPropertiesName: auth
          description: |
            Request for authenticators
          type: object
        dryRun:
          type: boolean
      type: object
      x-order: kntrl/core/app/session/SessionMng.kt2
    NewSessionReq:
      example:
        authReqs:
          key: ""
        entry: entry
        dryRun: true
        signIn: true
        logins:
          key: logins
        signUp: true
        factors:
          key: factors
      properties:
        entry:
          type: string
        logins:
          additionalProperties:
            type: string
          type: object
        factors:
          additionalProperties:
            type: string
            x-additionalPropertiesName: factor
          type: object
        authReqs:
          additionalProperties:
            x-additionalPropertiesName: auth
          description: |
            Authenticator requests
          type: object
        signIn:
          type: boolean
        signUp:
          type: boolean
        dryRun:
          description: Execute only validation ща authenticator requests.
          type: boolean
      required:
      - entry
      type: object
      x-order: kntrl/core/app/session/SessionMng.kt1
    ConfirmSessionAuthsReq:
      example:
        receivedCodes:
          key:
            key: receivedCodes
        sessionId: sessionId
      properties:
        sessionId:
          type: string
          x-nullable: true
        receivedCodes:
          additionalProperties:
            additionalProperties:
              type: string
              x-additionalPropertiesName: codeId
            type: object
            x-additionalPropertiesName: auth
          type: object
      required:
      - receivedCodes
      type: object
      x-order: kntrl/core/app/session/SessionMng.kt4
    SignOutRes:
      type: object
      x-order: kntrl/core/app/session/SessionMng.kt5
    FindSessionsRes:
      example:
        sessions:
        - authenticated: true
          systemAccess: true
          signedInAt: 0
          userId: userId
          expiresAt: 6
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 1
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key: null
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        - authenticated: true
          systemAccess: true
          signedInAt: 0
          userId: userId
          expiresAt: 6
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 1
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key: null
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        tooManySessions: true
      properties:
        sessions:
          items:
            $ref: '#/components/schemas/Session'
          type: array
        tooManySessions:
          type: boolean
      required:
      - sessions
      type: object
      x-order: kntrl/core/app/session/SessionRepo.kt4
    SaveUserRes:
      example:
        user:
          new: true
          signedUpAt: 6
          systemAccess: true
          auths:
            key: null
          id: 2c24704f-198a-4bc4-9718-306ccc97bbdc
          isNew: true
          logins:
          - unconfirmedLogin: unconfirmedLogin
            type: type
            login: login
            confirmed: true
          - unconfirmedLogin: unconfirmedLogin
            type: type
            login: login
            confirmed: true
          factors:
          - factors
          - factors
          updatedAt: 1
        authRes:
          key:
            sentCode:
              attemptsLeft: 2
              usedAttempts: 5
              hasAttemptsLeft: true
              validUntil: 5
              id: id
              sentAt: 7
            status: status
      properties:
        user:
          $ref: '#/components/schemas/User'
        authRes:
          additionalProperties:
            $ref: '#/components/schemas/AuthExecRes'
          type: object
      required:
      - authRes
      type: object
      x-order: kntrl/core/app/user/UserMng.kt2
    ConfirmUserAuthsReq:
      example:
        receivedCodes:
          key:
            key: receivedCodes
        userId: userId
      properties:
        userId:
          type: string
          x-nullable: true
        receivedCodes:
          additionalProperties:
            additionalProperties:
              type: string
              x-additionalPropertiesName: codeId
            type: object
            x-additionalPropertiesName: auth
          type: object
      required:
      - receivedCodes
      type: object
      x-order: kntrl/core/app/user/UserMng.kt4
    EditUserReq:
      allOf:
      - $ref: '#/components/schemas/SaveUserReq'
      - $ref: '#/components/schemas/EditUserReq_allOf'
      type: object
      x-order: kntrl/core/app/user/UserMng.kt3
    SaveUserReq:
      example:
        authReqs:
          key: ""
        dryRun: true
        logins:
          key: logins
        factors:
          key: true
      properties:
        factors:
          additionalProperties:
            type: boolean
            x-additionalPropertiesName: factor
          description: "Optional factors to enable/disable. If factor marked as required\
            \ in config, it will be considered enabled\nby default and this request\
            \ doesn't change this.\n"
          type: object
        logins:
          additionalProperties:
            type: string
            x-additionalPropertiesName: loginType
          type: object
        authReqs:
          additionalProperties:
            x-additionalPropertiesName: auth
          type: object
        dryRun:
          type: boolean
      type: object
      x-order: kntrl/core/app/user/UserMng.kt1
    AuthoriseRes:
      example:
        session:
          authenticated: true
          systemAccess: true
          signedInAt: 0
          userId: userId
          expiresAt: 6
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 1
          id: id
          identifiedBy:
          - type: type
            login: login
          - type: type
            login: login
          unconfirmedAuths:
            key: null
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
      properties:
        session:
          $ref: '#/components/schemas/Session'
      type: object
      x-order: kntrl/core/app/utils/AuthorisationSvc.kt2
    AuthoriseReq:
      example:
        rateLimiter:
          quotaToBurn: 0.8008281904610115
          id: id
      properties:
        rateLimiter:
          $ref: '#/components/schemas/RateLimiterReq'
      type: object
      x-order: kntrl/core/app/utils/AuthorisationSvc.kt1
    RateLimiterReq:
      example:
        quotaToBurn: 0.8008281904610115
        id: id
      properties:
        id:
          type: string
        quotaToBurn:
          format: double
          type: number
      required:
      - id
      - quotaToBurn
      type: object
      x-order: kntrl/core/app/utils/AuthorisationSvc.kt3
    AccessTokenCfg:
      description: Short-living token used for authentication.
      example:
        cache: null
        cookie: true
        cacheUnauthenticated: true
        ttl: 1d
      properties:
        cookie:
          description: Send token in `access_token` cookie
          type: boolean
        cache:
          $ref: '#/components/schemas/Cache'
        cacheUnauthenticated:
          description: "By default, unauthenticated sessions can't be cached."
          type: boolean
        ttl:
          description: "Lifetime for access token. 1d, 30m, etc.\n"
          example: 1d
          type: string
      type: object
      x-order: kntrl/core/domain/cfg/TokenCfg.kt1
    AppSecretAuthCfg:
      allOf:
      - $ref: '#/components/schemas/BuiltInAuthCfg'
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/AppSecretAuth.kt2
    AuthCfg:
      description: Authentication implementation config
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
      type: object
      x-order: kntrl/core/domain/cfg/AuthCfg.kt0
    AuthCodeHandlerCfg:
      properties:
        tokenUrl:
          description: Url to get access token by authorisation code.
          type: string
        clientId:
          description: "OAuth client id. Client must be registered on OAuth provider\
            \ (e.g. facebook, google)"
          type: string
        clientSecret:
          description: OAuth client secret.
          type: string
          x-nullable: true
      required:
      - clientId
      - tokenUrl
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/OAuth.kt5
    BuiltInAuthCfg:
      allOf:
      - $ref: '#/components/schemas/AuthCfg'
      - $ref: '#/components/schemas/BuiltInAuthCfg_allOf'
      description: Authentication implementation config
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/BuiltInAuthCfg.kt0
    Cache:
      enum:
      - JWT
      - BINARY
      type: string
    CodeCfg:
      description: If specified - app generates code and requires auth to be confirmed
      properties:
        length:
          description: Length of code to be generated
          format: int32
          type: integer
        ttl:
          description: "Generated code lifetime. e.g. 1m, 60s, 1d, etc."
          type: string
        alphabet:
          description: Symbols used to generate a code. By default `a-z + A-Z + 0-9`.
          type: string
        easyToRemember:
          description: "If true, every second letter will be the same, that allows\
            \ the codes to rhyme."
          type: boolean
        maxAttempts:
          description: Max attempts to enter the code.
          format: int32
          type: integer
      type: object
      x-order: kntrl/core/domain/cfg/AuthCfg.kt1
    DbCfg:
      type: object
      x-order: kntrl/core/infra/impl/repo/DbCfg.kt0
    DbsCfg:
      description: Database connection configs
      example:
        rateLimiter: null
        session: null
        user: null
      properties:
        user:
          $ref: '#/components/schemas/DbsCfg_user'
        session:
          $ref: '#/components/schemas/DbsCfg_session'
        rateLimiter:
          $ref: '#/components/schemas/DbsCfg_rateLimiter'
      required:
      - rateLimiter
      - session
      - user
      type: object
      x-order: kntrl/core/domain/cfg/AppCfg.kt3
    Duration:
      type: string
    EmailAuthCfg:
      allOf:
      - $ref: '#/components/schemas/BuiltInAuthCfg'
      - $ref: '#/components/schemas/EmailAuthCfg_allOf'
      required:
      - sender
      - server
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/EmailAuth.kt6
    EntryAccessTokenCfg:
      properties:
        ttl:
          description: Override access token ttl
          type: string
          x-nullable: true
        cache:
          description: Enable or disable client-side caching of access token
          type: boolean
          x-nullable: true
      type: object
      x-order: kntrl/core/domain/cfg/EntryCfg.kt1
    EntryCfg:
      description: Configuration for app entry.
      properties:
        factorsRequired:
          additionalProperties:
            description: |
              List of auths that could be chosen for this factor.
            items:
              type: string
            type: array
            x-additionalPropertiesName: factor
          description: |+
            Specifies factors that always required to be authenticated.

            Usually it's main auth method (e.g. password) + social login (e.g. facebook) +
            reserve auth option in case of lost/forgotten main auth credentials (e.g. secret questions or email auth).

            These factors are always required even when user hasn't enabled them explicitly.

          example:
            first:
            - password
            - facebook
            - email
          type: object
        factorsOptional:
          additionalProperties:
            items:
              type: string
            type: array
            x-additionalPropertiesName: factor
          description: |
            This factors can be skipped if user hasn't enabled them. Used for optional 2FA.
            E.g. If user added mobile phone -> use it for 2FA otherwise skip 2FA.
          example:
            second:
            - sms
          type: object
        requiresEntry:
          description: "Require user to be already signed in by one of the listed\
            \ entries. Usually it used for action confirmation, e.g.\n\"payment\"\
            \ that requires confirmation by sms, requires user to be already signed\
            \ in (e.g. with entry \"app\"."
          items:
            type: string
          type: array
        accessToken:
          $ref: '#/components/schemas/EntryAccessTokenCfg'
        ttl:
          description: |
            Max lifetime of session.
          example: 3M
          type: string
          x-nullable: true
        editAccount:
          description: "Is this session allowed to add/remove new auth, enable/disable\
            \ factors, etc.?"
          type: boolean
      type: object
      x-order: kntrl/core/domain/cfg/EntryCfg.kt0
    I18nCfg:
      description: "Configuration for localization of error messages, emails, etc."
      example:
        default: en
        dir: ./i18n
      properties:
        dir:
          description: |
            Directory when messages are stored. To support new language add `<lang>.json5` file. App will create helpful
            templates after start if dir is not null.
          example: ./i18n
          type: string
          x-nullable: true
        default:
          description: |
            Default language to use.
          example: en
          type: string
      type: object
      x-order: kntrl/core/domain/cfg/AppCfg.kt4
    InMemoryCfg:
      allOf:
      - $ref: '#/components/schemas/DbCfg'
      - $ref: '#/components/schemas/InMemoryCfg_allOf'
      type: object
      x-order: kntrl/core/infra/impl/repo/in-memory.kt3
    InTokenCfg:
      allOf:
      - $ref: '#/components/schemas/DbCfg'
      - $ref: '#/components/schemas/InTokenCfg_allOf'
      type: object
      x-order: kntrl/core/infra/impl/repo/in-token.kt1
    IpAuthCfg:
      allOf:
      - $ref: '#/components/schemas/BuiltInAuthCfg'
      - $ref: '#/components/schemas/IpAuthCfg_allOf'
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/IpAuth.kt2
    JdbcCfg:
      allOf:
      - $ref: '#/components/schemas/DbCfg'
      - $ref: '#/components/schemas/JdbcCfg_allOf'
      type: object
      x-order: kntrl/core/infra/impl/repo/jdbc/jdbc.kt0
    MongoCfg:
      allOf:
      - $ref: '#/components/schemas/DbCfg'
      - $ref: '#/components/schemas/MongoCfg_allOf'
      required:
      - database
      - mongodb
      type: object
      x-order: kntrl/core/infra/impl/repo/mongo/mongo.kt0
    MysqlCfg:
      allOf:
      - $ref: '#/components/schemas/JdbcCfg'
      - $ref: '#/components/schemas/MysqlCfg_allOf'
      type: object
      x-order: kntrl/core/infra/impl/repo/jdbc/mysql.kt2
    OAuthCfg:
      allOf:
      - $ref: '#/components/schemas/BuiltInAuthCfg'
      - $ref: '#/components/schemas/OAuthCfg_allOf'
      required:
      - extractLogin
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/OAuth.kt4
    PasswordAuthCfg:
      allOf:
      - $ref: '#/components/schemas/BuiltInAuthCfg'
      - $ref: '#/components/schemas/PasswordAuthCfg_allOf'
      description: "Password authentication. To enable this auth set auth name to\
        \ \"password\" or use \"builtin\": \"password\" param."
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/password/PasswordAuth.kt6
    PasswordHistoryCfg:
      description: Forbids user to change password to the old one. Useful if you force
        user to change password regularly.
      properties:
        passwordHistorySize:
          description: Number of current user passwords to store in database.
          format: int32
          type: integer
        passwordHistoryTtl:
          description: "Lifetime for the password. Accepts time string e.g. 1y, 3m,\
            \ 2y 6m, etc."
          type: string
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/password/PasswordHistory.kt2
    PasswordStrengthRequirements:
      description: Requirements for password
      properties:
        minLength:
          description: Minimal length of password
          format: int32
          type: integer
        requireNumber:
          description: Require password to contain at least one digit.
          type: boolean
        requireSymbol:
          description: "Require password to contain at least one symbol e.g. @, !,\
            \ &..."
          type: boolean
        requireUpperCase:
          description: This requires password to contain both lowercase and uppercase
            letters.
          type: boolean
        forbidCommonPasswords:
          description: "Password will be checked against table 1,000,000 of most overused\
            \ passwords."
          type: boolean
        forbidLoginAsPassword:
          description: "Rejects passwords that match username, email, anything that\
            \ used as a login according to logins config."
          type: boolean
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/password/PasswordAuth.kt7
    PostgresCfg:
      allOf:
      - $ref: '#/components/schemas/JdbcCfg'
      - $ref: '#/components/schemas/PostgresCfg_allOf'
      type: object
      x-order: kntrl/core/infra/impl/repo/jdbc/postgres.kt2
    QuestionsAuthCfg:
      allOf:
      - $ref: '#/components/schemas/BuiltInAuthCfg'
      - $ref: '#/components/schemas/QuestionsAuthCfg_allOf'
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/QuestionsAuth.kt5
    RateLimiterCfg:
      description: Rate limiter configuration
      properties:
        userId:
          description: Create different rate limiters for different users.
          type: boolean
        ip:
          description: Create different rate limiters for different ips.
          type: boolean
        quota:
          description: |-
            Total quota available for time period. Quota means "weight" of a request. So quota 1.0 and period 1s
            allows 10 request with weight 0.1 per seconds or 5 request with weight 0.2 per second.
          format: double
          type: number
        period:
          description: |
            Quota restoring period
          example: 30s
          type: string
        alignLoad:
          description: Insert delays between requests if there are too many simultaneous
            requests.
          type: boolean
        parent:
          description: "Allows to combine rate limiters. Let's say rt1 allows 10 reqs\
            \ per seconds, and rt2 allows 20 reqs per minute.\nIf the rt1 has the\
            \ rt2 as a parent, that means that rt1 allows 10 reqs per seconds but\
            \ not more than 20 per minute."
          type: string
          x-nullable: true
      type: object
      x-order: kntrl/core/domain/cfg/RateLimiterCfg.kt0
    RedisCfg:
      allOf:
      - $ref: '#/components/schemas/DbCfg'
      - $ref: '#/components/schemas/RedisCfg_allOf'
      type: object
      x-order: kntrl/core/infra/impl/repo/redis/redis.kt0
    RefreshTokenCfg:
      description: |-
        Long-living token used for generation of new access token.
        THis is optional. You can set longer access-token lifetime instead.
      example:
        allowReuse: true
        unauthenticatedTtl: 1d
        maxTtl: 1Y
        ttl: 3M
      properties:
        ttl:
          description: "Lifetime for refresh token. 10d, 3M, etc.\n"
          example: 3M
          type: string
        maxTtl:
          description: |
            Refresh token can be prolonged by refresh.
          example: 1Y
          type: string
        unauthenticatedTtl:
          description: "Lifetime of token for unauthenticated session. Limits time\
            \ that user has to sign in/up, restoring password etc.\n"
          example: 1d
          type: string
        allowReuse:
          description: If false - one refresh token can't be used twice. New refresh
            token will be provided by refresh API.
          type: boolean
      type: object
      x-order: kntrl/core/domain/cfg/TokenCfg.kt5
    RemoteAuthCfg:
      allOf:
      - $ref: '#/components/schemas/AuthCfg'
      - $ref: '#/components/schemas/RemoteAuthCfg_allOf'
      description: Authentication implementation config
      required:
      - remote
      type: object
      x-order: kntrl/core/infra/impl/auth/remote.kt0
    RemoteDbCfg:
      allOf:
      - $ref: '#/components/schemas/DbCfg'
      - $ref: '#/components/schemas/RemoteDbCfg_allOf'
      required:
      - remote
      type: object
      x-order: kntrl/core/infra/impl/repo/remote.kt0
    SHAppCfg:
      example:
        entries:
          key: null
        healthCheckKey: healthCheckKey
        $schema: $schema
        auths:
          email: {}
          password: {}
          facebook:
            builtin: oauth
        http:
          proxy: true
          bind: 127.0.0.1
          port: 9876
        rateLimiters:
          key: null
        secret: secret
        logins:
        - username
        - facebook
        - email
        db:
          rateLimiter: null
          session: null
          user: null
        i18n:
          default: en
          dir: ./i18n
        token:
          access:
            cache: null
            cookie: true
            cacheUnauthenticated: true
            ttl: 1d
          sameUserAgent: true
          refresh:
            allowReuse: true
            unauthenticatedTtl: 1d
            maxTtl: 1Y
            ttl: 3M
      properties:
        http:
          $ref: '#/components/schemas/SHHttpCfg'
        logins:
          description: "Types of logins that can be used for identification.\n\nIf\
            \ the login type is not specified in the auth config - it will be considered\
            \ a simple login:\nthe user can set any name. E.g. username.\n\nIf the\
            \ login type is specified in the auth config, this login will be generated\
            \ by\nthe corresponding authenticator. E.g. email, phone or facebook account\
            \ id.\n\n"
          example:
          - username
          - facebook
          - email
          items:
            type: string
          type: array
          uniqueItems: true
        auths:
          additionalProperties:
            $ref: '#/components/schemas/SHAppCfg_auths_value'
          description: "List of auth names and auth configs\n\nTo use builtin auths\
            \ (not a plugin or remote) follow the example: `\"password\": { ... }`\
            \ or\n`\"anyAuthName\": { \"builtin\": \"password\", ... }`\n"
          example:
            email: {}
            password: {}
            facebook:
              builtin: oauth
          type: object
        entries:
          additionalProperties:
            $ref: '#/components/schemas/SHAppCfg_entries_value'
          description: "List of app entries. Entry usually represents UI used for\
            \ signing in/up or additional authentication\nbefore action. E.g.:\n-\
            \ app: main entry that requests user login/email + password and 2fa (if\
            \ enabled)\n- api: entry that allows user to generate API keys and connect\
            \ third-party app\n- action: additional authentication (e.g. code from\
            \ sms) requested before e.g. payment\n"
          type: object
        db:
          $ref: '#/components/schemas/DbsCfg'
        token:
          $ref: '#/components/schemas/TokenCfg'
        rateLimiters:
          additionalProperties:
            $ref: '#/components/schemas/SHAppCfg_rateLimiters_value'
          description: |
            List of rate limiters
          type: object
        secret:
          description: |-
            THe key that app uses for RSA certificate generation used for token signature.
            If `null` - app will generate secret automatically during startup.
          type: string
        healthCheckKey:
          description: Set this key if you want to restrict access to the health-check.
          type: string
          x-nullable: true
        i18n:
          $ref: '#/components/schemas/I18nCfg'
        $schema:
          type: string
      type: object
      x-order: kntrl/selfhosted/infra/cfg/SHAppCfg.kt0
    SHHttpCfg:
      description: Http server config
      example:
        proxy: true
        bind: 127.0.0.1
        port: 9876
      properties:
        port:
          description: |
            A port that the server will use to accept http requests
          example: 9876
          format: int32
          type: integer
        bind:
          description: |
            IP address to bind to. Usually 0.0.0.0 to accept for any connection or 127.0.0.1 to accept only localhost
          example: 127.0.0.1
          type: string
        proxy:
          description: "If true, X-Forwarded-For header is used to get client's IP\
            \ address"
          type: boolean
      type: object
      x-order: kntrl/selfhosted/infra/cfg/SHAppCfg.kt1
    SqliteCfg:
      allOf:
      - $ref: '#/components/schemas/JdbcCfg'
      - $ref: '#/components/schemas/SqliteCfg_allOf'
      type: object
      x-order: kntrl/core/infra/impl/repo/jdbc/sqlite.kt3
    TokenCfg:
      description: Token lifetime config.
      example:
        access:
          cache: null
          cookie: true
          cacheUnauthenticated: true
          ttl: 1d
        sameUserAgent: true
        refresh:
          allowReuse: true
          unauthenticatedTtl: 1d
          maxTtl: 1Y
          ttl: 3M
      properties:
        access:
          $ref: '#/components/schemas/AccessTokenCfg'
        refresh:
          $ref: '#/components/schemas/RefreshTokenCfg'
        sameUserAgent:
          description: Require all request to be made from the same device.
          type: boolean
      type: object
      x-order: kntrl/core/domain/cfg/TokenCfg.kt0
    TokenHandlerCfg:
      properties:
        userInfoUrl:
          description: "If access token provided in request, app tries to extract\
            \ user id from user-info endpoint."
          type: string
        sendTokenInQuery:
          description: Send token in query param.
          type: string
          x-nullable: true
        sendTokenInHeader:
          description: Send token in Authorisation header.
          type: boolean
      required:
      - userInfoUrl
      type: object
      x-order: kntrl/core/infra/impl/auth/builtin/OAuth.kt6
    AnyErr_allOf:
      properties:
        code:
          type: string
        devMsg:
          description: Message for developers.
          type: string
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
      type: object
    PasswordIsIncorrect_allOf:
      properties:
        changedAt:
          format: int64
          type: integer
          x-nullable: true
        changedDaysAgo:
          format: int64
          type: integer
          x-nullable: true
      type: object
    PasswordIsInvalid_allOf:
      properties:
        tooLong:
          type: boolean
        tooShort:
          type: boolean
        missingNumber:
          type: boolean
        missingSymbol:
          type: boolean
        missingUpperCase:
          type: boolean
        missingLowerCase:
          type: boolean
        commonPassword:
          type: boolean
        wasUsedBeforeAt:
          format: int64
          type: integer
          x-nullable: true
        matchesLogin:
          $ref: '#/components/schemas/LoginId'
        passwordsMismatch:
          type: boolean
        strength:
          type: string
          x-nullable: true
        wasUsedDaysAgo:
          format: int64
          type: integer
      type: object
    PluginClientErr_allOf:
      properties:
        data:
          additionalProperties:
            type: object
          type: object
          writeOnly: true
      type: object
    QuestionsAnswersIncorrect_allOf:
      properties:
        incorrectAnswers:
          items:
            type: string
          type: array
        requiresMoreAnswers:
          type: boolean
        questionsNotFound:
          items:
            type: string
          type: array
      type: object
    QuestionsAnswersInvalid_allOf:
      properties:
        invalidAnswers:
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/AnswerErr'
          type: object
        tooManyAnswers:
          type: boolean
      type: object
    TokenExpired_allOf:
      properties:
        expiredAt:
          format: int64
          type: integer
          x-nullable: true
      type: object
    TooManyReqs_allOf:
      properties:
        waitTimeMs:
          format: int32
          type: integer
          x-nullable: true
        waitTimeSeconds:
          format: int32
          type: integer
          x-nullable: true
        waitTimeMinutes:
          format: int32
          type: integer
          x-nullable: true
      type: object
    Session_unconfirmedAuths_value:
      oneOf:
      - $ref: '#/components/schemas/UnconfirmedAuth'
      x-additionalPropertiesName: auth
    HealthRes_auth_value:
      oneOf:
      - $ref: '#/components/schemas/HealthStatusRes'
      x-additionalPropertiesName: auth
    ErrAuthExecRes_allOf:
      properties:
        sentCode:
          $ref: '#/components/schemas/Code'
        err:
          $ref: '#/components/schemas/Err'
      type: object
    OkAuthExecRes_allOf:
      properties:
        sentCode:
          $ref: '#/components/schemas/Code'
        resData:
          type: object
      type: object
    SkippedAuthExecRes_allOf:
      properties:
        sentCode:
          $ref: '#/components/schemas/Code'
      type: object
    User_auths_value:
      oneOf:
      - $ref: '#/components/schemas/AuthUserCfg'
      x-additionalPropertiesName: auth
    EditUserReq_allOf:
      properties:
        factors:
          additionalProperties:
            type: boolean
            x-additionalPropertiesName: factor
          description: "Optional factors to enable/disable. If factor marked as required\
            \ in config, it will be considered enabled\nby default and this request\
            \ doesn't change this.\n"
          type: object
        logins:
          additionalProperties:
            type: string
            x-additionalPropertiesName: loginType
          type: object
        authReqs:
          additionalProperties:
            x-additionalPropertiesName: auth
          type: object
        dryRun:
          type: boolean
        systemAccess:
          type: boolean
          x-nullable: true
      type: object
    BuiltInAuthCfg_allOf:
      properties:
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
      type: object
    DbsCfg_user:
      description: User database config
      oneOf:
      - $ref: '#/components/schemas/InMemoryCfg'
      - $ref: '#/components/schemas/InTokenCfg'
      - $ref: '#/components/schemas/MongoCfg'
      - $ref: '#/components/schemas/RedisCfg'
      - $ref: '#/components/schemas/RemoteDbCfg'
      - $ref: '#/components/schemas/MysqlCfg'
      - $ref: '#/components/schemas/PostgresCfg'
      - $ref: '#/components/schemas/SqliteCfg'
    DbsCfg_session:
      description: "Session database config.\n\nIf you aren't using cluster, prefer\
        \ in-memory database.\n\nYou can use in-token to not use database at all.\
        \ Use it with `token.access.cacheUnauthenticated = true` and\n`token.access.cache\
        \ != null` values."
      oneOf:
      - $ref: '#/components/schemas/InMemoryCfg'
      - $ref: '#/components/schemas/InTokenCfg'
      - $ref: '#/components/schemas/MongoCfg'
      - $ref: '#/components/schemas/RedisCfg'
      - $ref: '#/components/schemas/RemoteDbCfg'
      - $ref: '#/components/schemas/MysqlCfg'
      - $ref: '#/components/schemas/PostgresCfg'
      - $ref: '#/components/schemas/SqliteCfg'
    DbsCfg_rateLimiter:
      description: "Database for rate-limiters. If you don't use rate-limiter leave\
        \ this empty (`{}`)."
      oneOf:
      - $ref: '#/components/schemas/InMemoryCfg'
      - $ref: '#/components/schemas/InTokenCfg'
      - $ref: '#/components/schemas/MongoCfg'
      - $ref: '#/components/schemas/RedisCfg'
      - $ref: '#/components/schemas/RemoteDbCfg'
      - $ref: '#/components/schemas/MysqlCfg'
      - $ref: '#/components/schemas/PostgresCfg'
      - $ref: '#/components/schemas/SqliteCfg'
    EmailAuthCfg_allOf:
      properties:
        server:
          description: Email server address/IP.
          type: string
        sender:
          description: Email address of sender.
          type: string
        username:
          description: SMTP username.
          type: string
          x-nullable: true
        password:
          description: SMTP password.
          type: string
          x-nullable: true
        confirmationUrl:
          description: "If not null, server will create template param `confirmationUrl`\
            \ that will contain query parameters with\nconfirmation code, session\
            \ id, etc."
          type: string
          x-nullable: true
        templates:
          additionalProperties:
            type: string
            x-additionalPropertiesName: templateName
          description: "List of email templates. Key - name of template (can be used\
            \ lately on frontend), value - path to template.\nApp uses handlebars\
            \ templates to generate emails. See docs here https://handlebarsjs.com\n\
            \nEmail templates received `confirmationUrl`, `action`, `user`, `session`,\
            \ `codeId`, `code`, `lang`, `headers`\nas template params, e.g. you can\
            \ print user id as `{{ user.id }}`.\n\nTemplate engine also provides `i18n`\
            \ helper for localisation. E.g. `{{i18n 'confirmationButton' default='Confirm'}}`\n\
            searches key `confirmationButton` in files specified by `i18n.dir` config.\n\
            \nIt allows setting subject of email using `title` html tag, e.g. `<title>Email\
            \ subject</title>`.\n\n"
          example:
            welcome: ./welcome.html.hbs
            restoreAccess: ./restore.html.hbs
          type: object
        templateParams:
          additionalProperties:
            type: string
            x-additionalPropertiesName: paramName
          description: |
            Additional params for template.
          type: object
        code:
          $ref: '#/components/schemas/CodeCfg'
      type: object
    InMemoryCfg_allOf:
      properties:
        inMemory:
          type: boolean
      type: object
    InTokenCfg_allOf:
      properties:
        inToken:
          type: boolean
      type: object
    IpAuthCfg_allOf:
      properties:
        ipBytesToIgnore:
          description: "This allows to drop last bytes of IP. So it allows to authenticate\
            \ factor when ip has rough match, e.g.\nthe same country, same city, or\
            \ same internet provider."
          format: int32
          type: integer
        historySize:
          description: |-
            History of IP addresses user used to sign-in. Authenticated when user attempts to sign in with one of stored
            IPs.
          format: int32
          type: integer
      type: object
    JdbcCfg_allOf:
      properties:
        username:
          type: string
        password:
          type: string
        maxConnections:
          format: int32
          type: integer
      type: object
    MongoCfg_allOf:
      properties:
        mongodb:
          type: string
        database:
          type: string
      type: object
    MysqlCfg_allOf:
      properties:
        mysql:
          type: string
        username:
          type: string
        maxConnections:
          format: int32
          type: integer
        password:
          type: string
      type: object
    OAuthCfg_allOf:
      properties:
        extractLogin:
          description: "Path for login in id-token or user-info endpoint response.\n\
            e.g. `res.user.id` extracts user login from `{ \"res\": { \"user\": {\
            \ \"id\": \"...\" } } }`"
          type: string
        tokenUrl:
          description: Url to get access token by authorisation code.
          type: string
        clientId:
          description: "OAuth client id. Client must be registered on OAuth provider\
            \ (e.g. facebook, google)"
          type: string
        clientSecret:
          description: OAuth client secret.
          type: string
          x-nullable: true
        userInfoUrl:
          description: "If access token provided in request, app tries to extract\
            \ user id from user-info endpoint."
          type: string
        sendTokenInQuery:
          description: Send token in query param.
          type: string
          x-nullable: true
        sendTokenInHeader:
          description: Send token in Authorisation header.
          type: boolean
        extractPublicData:
          additionalProperties:
            type: string
          description: Can fill public data by a response of user-info or id-token.
          type: object
      type: object
    PasswordAuthCfg_allOf:
      properties:
        maxLength:
          description: Max allowed Length of the password.
          format: int32
          type: integer
        minLength:
          description: Minimal length of password
          format: int32
          type: integer
        requireNumber:
          description: Require password to contain at least one digit.
          type: boolean
        requireSymbol:
          description: "Require password to contain at least one symbol e.g. @, !,\
            \ &..."
          type: boolean
        requireUpperCase:
          description: This requires password to contain both lowercase and uppercase
            letters.
          type: boolean
        forbidCommonPasswords:
          description: "Password will be checked against table 1,000,000 of most overused\
            \ passwords."
          type: boolean
        forbidLoginAsPassword:
          description: "Rejects passwords that match username, email, anything that\
            \ used as a login according to logins config."
          type: boolean
        forbidReusingPassword:
          $ref: '#/components/schemas/PasswordHistoryCfg'
        strength:
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/PasswordStrengthRequirements'
            x-additionalPropertiesName: PASSWORD_STRENGTH
          description: |
            Allows to calculate password strength based on mentioned criteria. Requirements will be checked one by one
            until first failed.
          type: object
      type: object
    PostgresCfg_allOf:
      properties:
        postgres:
          type: string
        username:
          type: string
        maxConnections:
          format: int32
          type: integer
        password:
          type: string
      type: object
    QuestionsAuthCfg_allOf:
      properties:
        lowercase:
          description: "Transform user answer to lowercase letters. This allows user\
            \ still pass a check when he wrote name or city\nwith different cases.\
            \ `false` means strict match, so \"John\" != \"john\""
          type: boolean
        removeSymbols:
          description: Remove all non-letters from user answer.
          type: boolean
        removeSpaces:
          description: Remove all spaces from user answer.
          type: boolean
        minLength:
          description: Min length of answer. Length are checked after all answer transformation.
          format: int32
          type: integer
        maxLength:
          description: Max length of answer.
          format: int32
          type: integer
        answersRequired:
          description: Min number of answers required to pass this check.
          format: int32
          type: integer
        maxAnswers:
          description: Max answers that user can save.
          format: int32
          type: integer
      type: object
    RedisCfg_allOf:
      properties:
        redis:
          items:
            type: string
          type: array
        cluster:
          type: boolean
        database:
          format: int32
          type: integer
        user:
          type: string
          x-nullable: true
        password:
          type: string
          x-nullable: true
        ssl:
          type: boolean
        maxConnections:
          format: int32
          type: integer
      type: object
    RemoteAuthCfg_allOf:
      properties:
        remote:
          description: Path to the API that implements plugin.
          type: string
        requiresAuth:
          description: "If this is not null, app forbids to add this auth until listed\
            \ auth enabled.\n- if this a string -> require specified auth to be enabled\
            \ before this.\n- array of strings -> require any of listed auths to be\
            \ enabled\n- array of arrays of strings -> works as `[ [ \"auth1\" and\
            \ \"auth2\" ] or [ \"auth1\" and \"auth2\" ] ]`"
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
        skipOnFail:
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
        burnQuota:
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
        query:
          additionalProperties:
            type: string
            x-additionalPropertiesName: queryParam
          description: |
            Add query params after `?` symbol in url.
          type: object
        headers:
          additionalProperties:
            type: string
            x-additionalPropertiesName: header
          description: |
            Add headers to request.
          type: object
        code:
          $ref: '#/components/schemas/CodeCfg'
      type: object
    RemoteDbCfg_allOf:
      properties:
        remote:
          type: string
        query:
          additionalProperties:
            type: string
          type: object
        headers:
          additionalProperties:
            type: string
          type: object
      type: object
    SHAppCfg_auths_value:
      oneOf:
      - $ref: '#/components/schemas/RemoteAuthCfg'
      - $ref: '#/components/schemas/AppSecretAuthCfg'
      - $ref: '#/components/schemas/EmailAuthCfg'
      - $ref: '#/components/schemas/IpAuthCfg'
      - $ref: '#/components/schemas/OAuthCfg'
      - $ref: '#/components/schemas/PasswordAuthCfg'
      - $ref: '#/components/schemas/QuestionsAuthCfg'
      x-additionalPropertiesName: auth
    SHAppCfg_entries_value:
      oneOf:
      - $ref: '#/components/schemas/EntryCfg'
      x-additionalPropertiesName: entry
    SHAppCfg_rateLimiters_value:
      oneOf:
      - $ref: '#/components/schemas/RateLimiterCfg'
      x-additionalPropertiesName: rate-limiter id
    SqliteCfg_allOf:
      properties:
        username:
          type: string
        password:
          type: string
        maxConnections:
          format: int32
          type: integer
        sqlite:
          type: string
      type: object
  securitySchemes:
    access-token:
      in: query
      name: access-token
      type: apiKey
x-tagGroups:
- name: Api
  tags:
  - session
  - token
  - authorisation
  - user
  - server
  - signature

