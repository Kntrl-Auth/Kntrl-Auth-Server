openapi: 3.0.1
info:
  title: Kntrl API
  version: 0.10.0
  x-logo:
    url: ./logo.png
servers:
- url: /
tags:
- name: token
  x-displayName:
  - Tokens
- name: server
  x-displayName:
  - Server API
- description: |
    API for signing in/up/out, listing all sessions, etc.
  name: session
  x-displayName:
  - Session
- description: |
    User API
  name: user
  x-displayName:
  - Users
- name: authorisation
  x-displayName:
  - Authorization API
- description: |+
    Utilities for token creation. Can be used to implement checks that don't involve database interactions.
    Also, it can be used to generate and check OpenID `id_token`.

  name: custom-token
  x-displayName:
  - Custom token
paths:
  /api/server/health:
    get:
      description: |
        Get server plugins state
      operationId: health
      parameters:
      - explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      summary: Server health status
      tags:
      - server
      x-order: 1
      x-accepts: application/json
  /api/session:
    delete:
      operationId: signOut
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: Sign out current session
      tags:
      - session
      x-order: 7
      x-accepts: application/json
    get:
      description: |
        Get current session data.
      operationId: getSession
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: Get session
      tags:
      - session
      x-order: 1
      x-accepts: application/json
    patch:
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: Authenticate session
      tags:
      - session
      x-order: 4
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: |
        Create new session.
        if session entry requires another entry, access token must be provided.
      operationId: newSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSessionReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      - {}
      summary: New session
      tags:
      - session
      x-order: 3
      x-content-type: application/json
      x-accepts: application/json
  /api/user:
    get:
      operationId: getUser
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: Get user
      tags:
      - user
      x-order: 1
      x-accepts: application/json
    patch:
      description: |
        Saves users.
        Be careful with order. To avoid potential "duplicated entry" problem, remove operation goes firs,
        then update, then insert.
      operationId: saveUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: Save user
      tags:
      - user
      x-order: 7
      x-content-type: application/json
      x-accepts: application/json
  /api/authorize:
    post:
      description: |
        Validates token and executes rate limiter.
        This API should be called by backend.
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizeRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: (Backend API) authorize session
      tags:
      - authorisation
      x-order: 1
      x-content-type: application/json
      x-accepts: application/json
  /api/tokens/custom/jwt:
    post:
      description: |
        Creates JWT token signed with RSA256 key. RSA key is generated from app secret (specified in kntrl.json5)
      operationId: createCustomJwtToken
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: true
              type: object
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: (Backend API) Create JWT token
      tags:
      - custom-token
      x-order: 1
      x-content-type: application/json
      x-accepts: application/json
  /api/server/cfg:
    get:
      description: |
        Current server configuration. Available only for users with system-access.
      operationId: cfg
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShAppCfg'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: Server configuration
      tags:
      - server
      x-order: 1
      x-accepts: application/json
  /api/token/refresh:
    post:
      description: |
        Get new access token using refresh token.
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      summary: Refresh access token
      tags:
      - token
      x-order: 2
      x-content-type: application/json
      x-accepts: application/json
  /api/server/cfg/public:
    get:
      description: |
        Get server configuration.
      operationId: cfgPublic
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicCfgRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      summary: Public server configuration
      tags:
      - server
      x-order: 2
      x-accepts: application/json
  /api/rate-limiter/limit:
    post:
      description: |
        Executes rate limiter if no authorisation is required. Otherwise, this works similarly to /authorise.
      operationId: limit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimiterReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizeRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      - {}
      summary: (Backend API) validate by rate-limiter
      tags:
      - authorisation
      x-order: 2
      x-content-type: application/json
      x-accepts: application/json
  /api/tokens/custom/jwt/parse:
    post:
      description: |
        Validates token signature, expiration time and extracts token data.
        See /jwt API for details.
      operationId: parseCustomJwtToken
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      summary: Parse JWT token
      tags:
      - custom-token
      x-order: 2
      x-content-type: application/json
      x-accepts: application/json
  /api/token/jwt/public-key:
    get:
      description: |
        RSA256 public key that can be used to verify access jwt tokens locally.
      operationId: getPublicKey
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      summary: Get JWT public key
      tags:
      - token
      x-order: 3
      x-accepts: application/json
  /api/tokens/custom/jwt/public-key:
    get:
      description: |
        RSA256 public key generated from app-secret from config used for signature validation.
        Can be used to verify jwt tokens locally.
      operationId: getCustomJwtPublicKey
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      summary: Get JWT public key
      tags:
      - custom-token
      x-order: 3
      x-accepts: application/json
  /api/tokens/custom/binary:
    post:
      description: |
        Creates binary token signed with specified secret.
        When secret is null - use app secret (specified in kntrl.json5) with SHA256withRSA algorithm.
        Otherwise - use secret from query and sign with HmacSHA256 algorithm.
      operationId: createCustomBinaryToken
      parameters:
      - explode: true
        in: query
        name: secret
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: (Backend API) Create binary token
      tags:
      - custom-token
      x-order: 4
      x-content-type: application/json
      x-accepts: application/json
  /api/tokens/custom/binary/parse:
    post:
      description: |
        Validates token signature and extracts token data.
        See /binary API for details.
      operationId: parseCustomBinaryToken
      parameters:
      - explode: true
        in: query
        name: secret
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      summary: Parse binary token
      tags:
      - custom-token
      x-order: 5
      x-content-type: application/json
      x-accepts: application/json
  /api/session/auth/confirm:
    post:
      description: |
        Confirm auth with received code. To get code id, check response of sign in / sign up / authenticate API.
      operationId: confirmSessionAuths
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmSessionAuthsReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      - {}
      summary: Confirm with code
      tags:
      - session
      x-order: 6
      x-content-type: application/json
      x-accepts: application/json
  /api/session/{session-id}:
    delete:
      operationId: delSession
      parameters:
      - explode: false
        in: path
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: Sign out another session
      tags:
      - session
      x-order: 8
      x-accepts: application/json
  /api/session/all:
    get:
      operationId: getAll
      parameters:
      - explode: true
        in: query
        name: entry
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindSessionsRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: List sessions
      tags:
      - session
      x-order: 9
      x-accepts: application/json
  /api/user/{id}:
    patch:
      operationId: editUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: (Backend API) Edit user
      tags:
      - user
      x-order: 9
      x-content-type: application/json
      x-accepts: application/json
  /api/user/auth/confirm:
    post:
      operationId: confirmUserAuths
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmUserAuthsReq'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserRes'
          description: Success
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErr'
          description: Client error
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationErr'
          description: Server error
      security:
      - access-token: []
      summary: Confirm enabled auth
      tags:
      - user
      x-order: 10
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    Err:
      additionalProperties: true
      example:
        msg: msg
        tooShort: true
        incorrectAnswers:
        - incorrectAnswers
        - incorrectAnswers
        code: code
        loginId:
          type: email
          login: john@example.org
        strength: strength
        devMsg: devMsg
        waitTimeMinutes: 6
        tooLong: true
        missingSymbol: true
        matchesLogin:
          type: email
          login: john@example.org
        expiredAt: 7
        incorrectRedirectUri: true
        missingUpperCase: true
        commonPassword: true
        missingNumber: true
        tooManyAnswers: true
        incorrectSecret: true
        questionsNotFound:
        - questionsNotFound
        - questionsNotFound
        wasUsedBeforeAt: 7
        requiresMoreAnswers: true
        waitTimeSeconds: 1
        missingLowerCase: true
        passwordsMismatch: true
        wasUsedDaysAgo: 1
        invalidAnswers:
          key:
            tooShort: true
            tooLong: true
        waitTimeMs: 1
        changedAt: 2
        changedDaysAgo: 4
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        incorrectRedirectUri:
          type: boolean
          example: null
        incorrectSecret:
          type: boolean
          example: null
        changedAt:
          format: int64
          type: integer
          x-nullable: true
          example: null
        changedDaysAgo:
          format: int64
          type: integer
          x-nullable: true
          example: null
        tooLong:
          type: boolean
          example: null
        tooShort:
          type: boolean
          example: null
        missingNumber:
          type: boolean
          example: null
        missingSymbol:
          type: boolean
          example: null
        missingUpperCase:
          type: boolean
          example: null
        missingLowerCase:
          type: boolean
          example: null
        commonPassword:
          type: boolean
          example: null
        wasUsedBeforeAt:
          format: int64
          type: integer
          x-nullable: true
          example: null
        matchesLogin:
          $ref: '#/components/schemas/LoginId'
        passwordsMismatch:
          type: boolean
          example: null
        strength:
          type: string
          x-nullable: true
          example: null
        wasUsedDaysAgo:
          format: int64
          type: integer
          example: null
        incorrectAnswers:
          items:
            type: string
          type: array
          example: null
        requiresMoreAnswers:
          type: boolean
          example: null
        questionsNotFound:
          items:
            type: string
          type: array
          example: null
        invalidAnswers:
          additionalProperties:
            $ref: '#/components/schemas/AnswerErr'
          type: object
          example: null
        tooManyAnswers:
          type: boolean
          example: null
        waitTimeMs:
          format: int32
          type: integer
          x-nullable: true
          example: null
        waitTimeSeconds:
          format: int32
          type: integer
          x-nullable: true
          example: null
        waitTimeMinutes:
          format: int32
          type: integer
          x-nullable: true
          example: null
        expiredAt:
          description: |-
            Token expiration time. If null, token is incorrect (due to incorrect format or invalid signature).
            May be caused by changed app-secret.
          format: int64
          type: integer
          x-nullable: true
          example: null
        loginId:
          $ref: '#/components/schemas/LoginId'
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-0
      x-sealed: false
    AccessDenied:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -2065236468-1
      x-super: '#/components/schemas/Unauthenticated'
      example: null
    AnswerErr:
      example:
        tooShort: true
        tooLong: true
      properties:
        tooShort:
          type: boolean
          example: null
        tooLong:
          type: boolean
          example: null
      required:
      - tooLong
      - tooShort
      type: object
      x-order: -1279700867-9
    AnyErr:
      additionalProperties: true
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-5
      x-super: '#/components/schemas/Err'
      example: null
    AuthIsNotConfirmed:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-3
      x-super: '#/components/schemas/ClientErr'
      example: null
    AuthIsNotEnabled:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-2
      x-super: '#/components/schemas/ClientErr'
      example: null
    AuthRequiresAnother:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-5
      x-super: '#/components/schemas/ClientErr'
      example: null
    ClientErr:
      additionalProperties: true
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        incorrectRedirectUri:
          type: boolean
          example: null
        incorrectSecret:
          type: boolean
          example: null
        changedAt:
          format: int64
          type: integer
          x-nullable: true
          example: null
        changedDaysAgo:
          format: int64
          type: integer
          x-nullable: true
          example: null
        tooLong:
          type: boolean
          example: null
        tooShort:
          type: boolean
          example: null
        missingNumber:
          type: boolean
          example: null
        missingSymbol:
          type: boolean
          example: null
        missingUpperCase:
          type: boolean
          example: null
        missingLowerCase:
          type: boolean
          example: null
        commonPassword:
          type: boolean
          example: null
        wasUsedBeforeAt:
          format: int64
          type: integer
          x-nullable: true
          example: null
        matchesLogin:
          $ref: '#/components/schemas/LoginId'
        passwordsMismatch:
          type: boolean
          example: null
        strength:
          type: string
          x-nullable: true
          example: null
        wasUsedDaysAgo:
          format: int64
          type: integer
          example: null
        incorrectAnswers:
          items:
            type: string
          type: array
          example: null
        requiresMoreAnswers:
          type: boolean
          example: null
        questionsNotFound:
          items:
            type: string
          type: array
          example: null
        invalidAnswers:
          additionalProperties:
            $ref: '#/components/schemas/AnswerErr'
          type: object
          example: null
        tooManyAnswers:
          type: boolean
          example: null
        waitTimeMs:
          format: int32
          type: integer
          x-nullable: true
          example: null
        waitTimeSeconds:
          format: int32
          type: integer
          x-nullable: true
          example: null
        waitTimeMinutes:
          format: int32
          type: integer
          x-nullable: true
          example: null
        expiredAt:
          description: |-
            Token expiration time. If null, token is incorrect (due to incorrect format or invalid signature).
            May be caused by changed app-secret.
          format: int64
          type: integer
          x-nullable: true
          example: null
        loginId:
          $ref: '#/components/schemas/LoginId'
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-4
      x-sealed: false
      x-super: '#/components/schemas/Err'
      example: null
    CodeIsExpired:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-6
      x-super: '#/components/schemas/ClientErr'
      example: null
    CodeIsIncorrect:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-8
      x-super: '#/components/schemas/ClientErr'
      example: null
    CodeTooManyAttempts:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-7
      x-super: '#/components/schemas/ClientErr'
      example: null
    EmailIsIncorrect:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-5
      x-super: '#/components/schemas/ClientErr'
      example: null
    IncorrectTotpCode:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-10
      x-super: '#/components/schemas/ClientErr'
      example: null
    Instant:
      format: int64
      type: integer
    IntegrationErr:
      additionalProperties: true
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-3
      x-sealed: false
      x-super: '#/components/schemas/Err'
      example: null
    IpNew:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-6
      x-super: '#/components/schemas/ClientErr'
      example: null
    LoginId:
      example:
        type: email
        login: john@example.org
      properties:
        type:
          description: |
            Type of login
          example: email
          type: string
        login:
          description: |
            User unique identifier, email, username, etc. User can use it to sign-in.
          example: john@example.org
          type: string
      required:
      - login
      - type
      type: object
      x-order: -2010674509-2
    NoAuthAvailableForFactor:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-4
      x-super: '#/components/schemas/IntegrationErr'
      example: null
    OauthAppErr:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        incorrectRedirectUri:
          type: boolean
          example: null
        incorrectSecret:
          type: boolean
          example: null
      required:
      - code
      - devMsg
      - incorrectRedirectUri
      - incorrectSecret
      type: object
      x-order: -1279700867-11
      x-super: '#/components/schemas/ClientErr'
      example: null
    PasswordIsIncorrect:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        changedAt:
          format: int64
          type: integer
          x-nullable: true
          example: null
        changedDaysAgo:
          format: int64
          type: integer
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-3
      x-super: '#/components/schemas/ClientErr'
      example: null
    PasswordIsInvalid:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        tooLong:
          type: boolean
          example: null
        tooShort:
          type: boolean
          example: null
        missingNumber:
          type: boolean
          example: null
        missingSymbol:
          type: boolean
          example: null
        missingUpperCase:
          type: boolean
          example: null
        missingLowerCase:
          type: boolean
          example: null
        commonPassword:
          type: boolean
          example: null
        wasUsedBeforeAt:
          format: int64
          type: integer
          x-nullable: true
          example: null
        matchesLogin:
          $ref: '#/components/schemas/LoginId'
        passwordsMismatch:
          type: boolean
          example: null
        strength:
          type: string
          x-nullable: true
          example: null
        wasUsedDaysAgo:
          format: int64
          type: integer
          example: null
      required:
      - code
      - commonPassword
      - devMsg
      - missingLowerCase
      - missingNumber
      - missingSymbol
      - missingUpperCase
      - passwordsMismatch
      - tooLong
      - tooShort
      type: object
      x-order: -1279700867-4
      x-super: '#/components/schemas/ClientErr'
      example: null
    PluginClientErr:
      additionalProperties: true
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-2
      x-super: '#/components/schemas/ClientErr'
      example: null
    PluginErr:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -1279700867-1
      x-super: '#/components/schemas/ServerErr'
      example: null
    QuestionsAnswersIncorrect:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        incorrectAnswers:
          items:
            type: string
          type: array
          example: null
        requiresMoreAnswers:
          type: boolean
          example: null
        questionsNotFound:
          items:
            type: string
          type: array
          example: null
      required:
      - code
      - devMsg
      - incorrectAnswers
      - questionsNotFound
      - requiresMoreAnswers
      type: object
      x-order: -1279700867-7
      x-super: '#/components/schemas/ClientErr'
      example: null
    QuestionsAnswersInvalid:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        invalidAnswers:
          additionalProperties:
            $ref: '#/components/schemas/AnswerErr'
          type: object
          example: null
        tooManyAnswers:
          type: boolean
          example: null
      required:
      - code
      - devMsg
      - invalidAnswers
      - tooManyAnswers
      type: object
      x-order: -1279700867-8
      x-super: '#/components/schemas/ClientErr'
      example: null
    ServerErr:
      additionalProperties: true
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: 2025349183-2
      x-sealed: false
      x-super: '#/components/schemas/Err'
      example: null
    SessionExpired:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -2065236468-0
      x-super: '#/components/schemas/Unauthenticated'
      example: null
    TokenExpired:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        expiredAt:
          description: |-
            Token expiration time. If null, token is incorrect (due to incorrect format or invalid signature).
            May be caused by changed app-secret.
          format: int64
          type: integer
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-11
      x-super: '#/components/schemas/Unauthenticated'
      example: null
    TooManyReqs:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        waitTimeMs:
          format: int32
          type: integer
          x-nullable: true
          example: null
        waitTimeSeconds:
          format: int32
          type: integer
          x-nullable: true
          example: null
        waitTimeMinutes:
          format: int32
          type: integer
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-12
      x-super: '#/components/schemas/ClientErr'
      example: null
    Unauthenticated:
      additionalProperties: true
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        expiredAt:
          description: |-
            Token expiration time. If null, token is incorrect (due to incorrect format or invalid signature).
            May be caused by changed app-secret.
          format: int64
          type: integer
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-9
      x-sealed: false
      x-super: '#/components/schemas/ClientErr'
      example: null
    UserLoginAlreadyTaken:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -270554383-1
      x-super: '#/components/schemas/ClientErr'
      example: null
    UserLoginIsInvalid:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
        loginId:
          $ref: '#/components/schemas/LoginId'
      required:
      - code
      - devMsg
      - loginId
      type: object
      x-order: -270554383-0
      x-super: '#/components/schemas/ClientErr'
      example: null
    UserNotFound:
      properties:
        code:
          type: string
          example: null
        devMsg:
          description: Message for developers.
          type: string
          example: null
        msg:
          description: Localised message suitable for UI.
          type: string
          x-nullable: true
          example: null
      required:
      - code
      - devMsg
      type: object
      x-order: -2065236468-2
      x-super: '#/components/schemas/Unauthenticated'
      example: null
    AccessToken:
      type: string
      x-order: -2026363309-3
      example: null
    AuthorizationCodeSessionData:
      additionalProperties: true
      properties:
        agent:
          items:
            $ref: '#/components/schemas/LoginId'
          type: array
          example: null
        scopes:
          items:
            type: string
          type: array
          example: null
      required:
      - agent
      - scopes
      type: object
      x-order: -1836982696-7
      x-super: '#/components/schemas/SessionData'
      example: null
    CodeVerifier:
      example:
        attemptsLeft: 1
        usedAttempts: 6
        hasAttemptsLeft: true
        validUntil: 0
        id: id
        sentAt: 5
      properties:
        id:
          type: string
          example: null
        validUntil:
          format: int64
          type: integer
          example: null
        usedAttempts:
          format: int32
          type: integer
          example: null
        attemptsLeft:
          format: int32
          type: integer
          example: null
        sentAt:
          format: int64
          type: integer
          example: null
        hasAttemptsLeft:
          type: boolean
          example: null
      required:
      - attemptsLeft
      - sentAt
      - usedAttempts
      - validUntil
      type: object
      x-order: 1113303910-0
    Device:
      example:
        browser: browser
        mobile: true
        userAgent: userAgent
        type: type
      properties:
        mobile:
          type: boolean
          example: null
        type:
          type: string
          x-nullable: true
          example: null
        browser:
          type: string
          x-nullable: true
          example: null
        userAgent:
          type: string
          example: null
      required:
      - mobile
      - userAgent
      type: object
      x-order: 1837614569-0
    NextFactor:
      example:
        supportedAuths:
        - supportedAuths
        - supportedAuths
        factor: factor
      properties:
        factor:
          type: string
          example: null
        supportedAuths:
          items:
            type: string
          type: array
          example: null
      required:
      - factor
      - supportedAuths
      type: object
      x-order: 1296788734-0
    RefreshToken:
      type: string
      x-order: -2026363309-5
      example: null
    RefreshTokenRes:
      example:
        session:
          authenticated: true
          systemAccess: true
          data:
            key:
              agent:
              - type: email
                login: john@example.org
              - type: email
                login: john@example.org
              scopes:
              - scopes
              - scopes
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: email
            login: john@example.org
          - type: email
            login: john@example.org
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        tokens:
          access: access
          accessTokenExpiresAt: 0
          refresh: refresh
      properties:
        tokens:
          $ref: '#/components/schemas/Tokens'
        session:
          $ref: '#/components/schemas/Session'
      required:
      - session
      - tokens
      type: object
      x-order: 68856176-2
    ScopesSessionData:
      additionalProperties: true
      properties:
        agent:
          items:
            $ref: '#/components/schemas/LoginId'
          type: array
          x-nullable: true
          example: null
        scopes:
          items:
            type: string
          type: array
          example: null
      required:
      - scopes
      type: object
      x-order: 2741601-4
      x-super: '#/components/schemas/SessionData'
      example: null
    Session:
      example:
        authenticated: true
        systemAccess: true
        data:
          key:
            agent:
            - type: email
              login: john@example.org
            - type: email
              login: john@example.org
            scopes:
            - scopes
            - scopes
        signedInAt: 5
        userId: userId
        expiresAt: 2
        nextFactors:
        - supportedAuths:
          - supportedAuths
          - supportedAuths
          factor: factor
        - supportedAuths:
          - supportedAuths
          - supportedAuths
          factor: factor
        entry: entry
        expired: true
        authenticatedBy:
          key: authenticatedBy
        newUser: true
        refreshedAt: 7
        id: id
        identifiedBy:
        - type: email
          login: john@example.org
        - type: email
          login: john@example.org
        unconfirmedAuths:
          key:
            sentCodes:
            - attemptsLeft: 1
              usedAttempts: 6
              hasAttemptsLeft: true
              validUntil: 0
              id: id
              sentAt: 5
            - attemptsLeft: 1
              usedAttempts: 6
              hasAttemptsLeft: true
              validUntil: 0
              id: id
              sentAt: 5
        device:
          browser: browser
          mobile: true
          userAgent: userAgent
          type: type
      properties:
        id:
          type: string
          example: null
        entry:
          description: Entry that authenticates this session
          type: string
          example: null
        identifiedBy:
          description: Login used to identify this user
          items:
            $ref: '#/components/schemas/LoginId'
          type: array
          example: null
        userId:
          type: string
          x-nullable: true
          example: null
        authenticatedBy:
          additionalProperties:
            type: string
            x-additionalPropertiesName: factor
          description: |
            Authenticator used for factors
          type: object
          example: null
        unconfirmedAuths:
          additionalProperties:
            $ref: '#/components/schemas/UnconfirmedAuth'
          description: |
            Auths that waiting for confirmation
          type: object
          example: null
        nextFactors:
          description: List of factors needed to authenticate this session
          items:
            $ref: '#/components/schemas/NextFactor'
          type: array
          example: null
        signedInAt:
          format: int64
          type: integer
          example: null
        expiresAt:
          format: int64
          type: integer
          example: null
        refreshedAt:
          format: int64
          type: integer
          example: null
        newUser:
          type: boolean
          example: null
        device:
          $ref: '#/components/schemas/Device'
        systemAccess:
          type: boolean
          example: null
        data:
          additionalProperties:
            $ref: '#/components/schemas/Session_data_value'
          type: object
          example: null
        expired:
          type: boolean
          example: null
        authenticated:
          type: boolean
          example: null
      required:
      - authenticatedBy
      - data
      - device
      - entry
      - expiresAt
      - id
      - identifiedBy
      - newUser
      - nextFactors
      - refreshedAt
      - signedInAt
      - systemAccess
      - unconfirmedAuths
      type: object
      x-order: 2013237977-0
    SessionData:
      additionalProperties: true
      type: object
      x-order: -255987249-0
      example: null
    Tokens:
      example:
        access: access
        accessTokenExpiresAt: 0
        refresh: refresh
      properties:
        access:
          description: Access token for authentication
          type: string
          x-super: '#/components/schemas/AccessToken'
          example: null
        refresh:
          description: Refresh token for obtaining new access token
          type: string
          x-super: '#/components/schemas/RefreshToken'
          example: null
        accessTokenExpiresAt:
          format: int64
          type: integer
          example: null
      required:
      - access
      - refresh
      type: object
      x-order: -2026363309-0
    UnconfirmedAuth:
      example:
        sentCodes:
        - attemptsLeft: 1
          usedAttempts: 6
          hasAttemptsLeft: true
          validUntil: 0
          id: id
          sentAt: 5
        - attemptsLeft: 1
          usedAttempts: 6
          hasAttemptsLeft: true
          validUntil: 0
          id: id
          sentAt: 5
      properties:
        sentCodes:
          items:
            $ref: '#/components/schemas/CodeVerifier'
          type: array
          example: null
      type: object
      x-order: 320227009-0
    RefreshTokenReq:
      example:
        refreshToken: refreshToken
      properties:
        refreshToken:
          type: string
          x-order: -2026363309-5
          example: null
      required:
      - refreshToken
      type: object
      x-order: 68856176-1
    PublicCfgAuth:
      example:
        auth: auth
        authType: authType
      properties:
        auth:
          type: string
          example: null
        authType:
          type: string
          example: null
      required:
      - auth
      - authType
      type: object
      x-order: -517526772-4
    PublicCfgRes:
      example:
        auths:
        - auth: auth
          authType: authType
        - auth: auth
          authType: authType
        loginRequirements:
          key: loginRequirements
        logins:
        - logins
        - logins
      properties:
        logins:
          items:
            type: string
          type: array
          example: null
        loginRequirements:
          additionalProperties:
            type: string
          type: object
          example: null
        auths:
          items:
            $ref: '#/components/schemas/PublicCfgAuth'
          type: array
          example: null
      required:
      - auths
      - loginRequirements
      - logins
      type: object
      x-order: -517526772-3
    DbHealthRes:
      example:
        rateLimiter:
          msg: msg
          status: null
        session:
          msg: msg
          status: null
        user:
          msg: msg
          status: null
      properties:
        user:
          $ref: '#/components/schemas/HealthStatusRes'
        session:
          $ref: '#/components/schemas/HealthStatusRes'
        rateLimiter:
          $ref: '#/components/schemas/HealthStatusRes'
      required:
      - rateLimiter
      - session
      - user
      type: object
      x-order: -517526772-2
    HealthRes:
      example:
        msg: msg
        auth:
          key:
            msg: msg
            status: null
        db:
          rateLimiter:
            msg: msg
            status: null
          session:
            msg: msg
            status: null
          user:
            msg: msg
            status: null
        status: null
      properties:
        db:
          $ref: '#/components/schemas/DbHealthRes'
        auth:
          additionalProperties:
            $ref: '#/components/schemas/HealthStatusRes'
          type: object
          example: null
        status:
          $ref: '#/components/schemas/HealthStatus'
        msg:
          type: string
          x-nullable: true
          example: null
      required:
      - auth
      - db
      - status
      type: object
      x-order: -517526772-1
    HealthStatus:
      enum:
      - HEALTHY
      - UNAVAILABLE
      - ERR
      type: string
    HealthStatusRes:
      example:
        msg: msg
        status: null
      properties:
        status:
          $ref: '#/components/schemas/HealthStatus'
        msg:
          type: string
          x-nullable: true
          example: null
      required:
      - status
      type: object
      x-order: -814092127-1
    AuthData:
      example:
        public:
          answersSavedAt:
            key: 1
          redirectUris:
          - redirectUris
          - redirectUris
          email: email
          updatedAt: 6
        login: login
      properties:
        public:
          $ref: '#/components/schemas/AuthData_public'
        login:
          description: |-
            If authenticator supports identification, it provides login here. This can be email, phone number,
            facebook account id, etc.
          type: string
          x-nullable: true
          example: null
      required:
      - public
      type: object
      x-order: 332570507-3
    AuthExecRes:
      example:
        sentCode:
          attemptsLeft: 9
          usedAttempts: 7
          hasAttemptsLeft: true
          validUntil: 2
          id: id
          sentAt: 3
        err:
          msg: msg
          tooShort: true
          incorrectAnswers:
          - incorrectAnswers
          - incorrectAnswers
          code: code
          loginId:
            type: email
            login: john@example.org
          strength: strength
          devMsg: devMsg
          waitTimeMinutes: 6
          tooLong: true
          missingSymbol: true
          matchesLogin:
            type: email
            login: john@example.org
          expiredAt: 7
          incorrectRedirectUri: true
          missingUpperCase: true
          commonPassword: true
          missingNumber: true
          tooManyAnswers: true
          incorrectSecret: true
          questionsNotFound:
          - questionsNotFound
          - questionsNotFound
          wasUsedBeforeAt: 7
          requiresMoreAnswers: true
          waitTimeSeconds: 1
          missingLowerCase: true
          passwordsMismatch: true
          wasUsedDaysAgo: 1
          invalidAnswers:
            key:
              tooShort: true
              tooLong: true
          waitTimeMs: 1
          changedAt: 2
          changedDaysAgo: 4
        resData:
          emailSentTo: emailSentTo
          clientId: clientId
          answersSavedAt:
            key: 1
          strength: strength
          correct:
            HOMETOWN: true
            MOTHER_NAME: false
          otpUrl: otpUrl
          authorizationCode: authorizationCode
          secret: secret
          redirectUris:
          - redirectUris
          - redirectUris
          password: password
          ipEncoded: ipEncoded
          clientSecret: clientSecret
          extractedPublicData:
            key: ""
          otpUrlQrCode: otpUrlQrCode
          extractedLogin: extractedLogin
        status: OK
      properties:
        status:
          enum:
          - OK
          - ERR
          - SKIPPED
          type: string
        sentCode:
          $ref: '#/components/schemas/Code'
        err:
          $ref: '#/components/schemas/Err'
        resData:
          $ref: '#/components/schemas/AuthExecRes_resData'
      required:
      - status
      type: object
      x-order: -73723375-2
      x-sealed: true
    AuthPrivateData:
      additionalProperties: true
      description: Data available only for authenticator.
      type: object
      x-order: 332570507-6
      example: null
    AuthPublicData:
      additionalProperties: true
      description: Data that are available for API.
      type: object
      x-order: 332570507-4
      example: null
    AuthResData:
      additionalProperties: true
      type: object
      x-order: -1249106462-10
      example: null
    AuthUserCfg:
      example:
        data:
          public:
            answersSavedAt:
              key: 1
            redirectUris:
            - redirectUris
            - redirectUris
            email: email
            updatedAt: 6
          login: login
        sentCodes:
        - code:
            attemptsLeft: 1
            usedAttempts: 6
            hasAttemptsLeft: true
            validUntil: 0
            id: id
            sentAt: 5
          data:
            public:
              answersSavedAt:
                key: 1
              redirectUris:
              - redirectUris
              - redirectUris
              email: email
              updatedAt: 6
            login: login
        - code:
            attemptsLeft: 1
            usedAttempts: 6
            hasAttemptsLeft: true
            validUntil: 0
            id: id
            sentAt: 5
          data:
            public:
              answersSavedAt:
                key: 1
              redirectUris:
              - redirectUris
              - redirectUris
              email: email
              updatedAt: 6
            login: login
        confirmed: true
      properties:
        data:
          $ref: '#/components/schemas/AuthUserCfg_data'
        sentCodes:
          description: |
            List of auths that wait for confirmation.
          items:
            $ref: '#/components/schemas/UnconfirmedAuthData'
          type: array
          example: null
        confirmed:
          type: boolean
      type: object
      x-order: 332570507-0
    AuthenticateRes:
      example:
        session:
          authenticated: true
          systemAccess: true
          data:
            key:
              agent:
              - type: email
                login: john@example.org
              - type: email
                login: john@example.org
              scopes:
              - scopes
              - scopes
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: email
            login: john@example.org
          - type: email
            login: john@example.org
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        tokens:
          access: access
          accessTokenExpiresAt: 0
          refresh: refresh
        user:
          new: false
          signedUpAt: 5
          systemAccess: false
          auths:
            key:
              data:
                public:
                  answersSavedAt:
                    key: 1
                  redirectUris:
                  - redirectUris
                  - redirectUris
                  email: email
                  updatedAt: 6
                login: login
              sentCodes:
              - code:
                  attemptsLeft: 1
                  usedAttempts: 6
                  hasAttemptsLeft: true
                  validUntil: 0
                  id: id
                  sentAt: 5
                data:
                  public:
                    answersSavedAt:
                      key: 1
                    redirectUris:
                    - redirectUris
                    - redirectUris
                    email: email
                    updatedAt: 6
                  login: login
              - code:
                  attemptsLeft: 1
                  usedAttempts: 6
                  hasAttemptsLeft: true
                  validUntil: 0
                  id: id
                  sentAt: 5
                data:
                  public:
                    answersSavedAt:
                      key: 1
                    redirectUris:
                    - redirectUris
                    - redirectUris
                    email: email
                    updatedAt: 6
                  login: login
              confirmed: true
          id: fewfvc23f
          logins:
          - unconfirmedLogin: unconfirmedLogin
            type: email
            login: john@example.org
            confirmed: true
          - unconfirmedLogin: unconfirmedLogin
            type: email
            login: john@example.org
            confirmed: true
          factors:
          - factors
          - factors
          updatedAt: 5
        authRes:
          key:
            sentCode:
              attemptsLeft: 9
              usedAttempts: 7
              hasAttemptsLeft: true
              validUntil: 2
              id: id
              sentAt: 3
            err:
              msg: msg
              tooShort: true
              incorrectAnswers:
              - incorrectAnswers
              - incorrectAnswers
              code: code
              loginId:
                type: email
                login: john@example.org
              strength: strength
              devMsg: devMsg
              waitTimeMinutes: 6
              tooLong: true
              missingSymbol: true
              matchesLogin:
                type: email
                login: john@example.org
              expiredAt: 7
              incorrectRedirectUri: true
              missingUpperCase: true
              commonPassword: true
              missingNumber: true
              tooManyAnswers: true
              incorrectSecret: true
              questionsNotFound:
              - questionsNotFound
              - questionsNotFound
              wasUsedBeforeAt: 7
              requiresMoreAnswers: true
              waitTimeSeconds: 1
              missingLowerCase: true
              passwordsMismatch: true
              wasUsedDaysAgo: 1
              invalidAnswers:
                key:
                  tooShort: true
                  tooLong: true
              waitTimeMs: 1
              changedAt: 2
              changedDaysAgo: 4
            resData:
              emailSentTo: emailSentTo
              clientId: clientId
              answersSavedAt:
                key: 1
              strength: strength
              correct:
                HOMETOWN: true
                MOTHER_NAME: false
              otpUrl: otpUrl
              authorizationCode: authorizationCode
              secret: secret
              redirectUris:
              - redirectUris
              - redirectUris
              password: password
              ipEncoded: ipEncoded
              clientSecret: clientSecret
              extractedPublicData:
                key: ""
              otpUrlQrCode: otpUrlQrCode
              extractedLogin: extractedLogin
            status: OK
      properties:
        tokens:
          $ref: '#/components/schemas/Tokens'
        session:
          $ref: '#/components/schemas/Session'
        user:
          $ref: '#/components/schemas/User'
        authRes:
          additionalProperties:
            $ref: '#/components/schemas/AuthExecRes'
          type: object
          example: null
      required:
      - authRes
      type: object
      x-order: 2094520596-3
    AuthorizationCodeUpdateResData:
      additionalProperties: true
      properties:
        authorizationCode:
          type: string
          example: null
      required:
      - authorizationCode
      type: object
      x-order: -1836982696-5
      x-super: '#/components/schemas/AuthResData'
      example: null
    Code:
      example:
        attemptsLeft: 9
        usedAttempts: 7
        hasAttemptsLeft: true
        validUntil: 2
        id: id
        sentAt: 3
      properties:
        id:
          type: string
          example: null
        validUntil:
          format: int64
          type: integer
          example: null
        usedAttempts:
          format: int32
          type: integer
          example: null
        attemptsLeft:
          format: int32
          type: integer
          example: null
        sentAt:
          format: int64
          type: integer
          example: null
        hasAttemptsLeft:
          type: boolean
          example: null
      required:
      - attemptsLeft
      - sentAt
      - usedAttempts
      - validUntil
      type: object
      x-order: -1249106462-3
    EmailAuthResData:
      additionalProperties: true
      properties:
        emailSentTo:
          description: "Shows user email, that was used to send a code. Email will\
            \ be partially hidden."
          type: string
          example: null
      type: object
      x-order: 1021533909-5
      x-super: '#/components/schemas/AuthResData'
      example: null
    EmailPublicData:
      additionalProperties: true
      description: Data that are available for API.
      properties:
        email:
          description: User email.
          type: string
          example: null
        updatedAt:
          description: Last time when email was changed.
          format: int64
          type: integer
          example: null
      required:
      - email
      - updatedAt
      type: object
      x-order: 1021533909-2
      x-super: '#/components/schemas/AuthPublicData'
      example: null
    ErrAuthExecRes:
      properties:
        status:
          enum:
          - OK
          - ERR
          - SKIPPED
          type: string
        sentCode:
          $ref: '#/components/schemas/Code'
        err:
          $ref: '#/components/schemas/Err'
      required:
      - err
      - status
      type: object
      x-order: -73723375-4
      x-super: '#/components/schemas/AuthExecRes'
      example: null
    IpAuthResData:
      additionalProperties: true
      properties:
        ipEncoded:
          type: string
          example: null
      required:
      - ipEncoded
      type: object
      x-order: 2116983897-2
      x-super: '#/components/schemas/AuthResData'
      example: null
    IpPrivateData:
      additionalProperties: true
      description: Data available only for authenticator.
      properties:
        encodedIps:
          additionalProperties:
            format: int64
            type: integer
          type: object
          example: null
      type: object
      x-order: 2116983897-1
      x-super: '#/components/schemas/AuthPrivateData'
      example: null
    Login:
      example:
        unconfirmedLogin: unconfirmedLogin
        type: email
        login: john@example.org
        confirmed: true
      properties:
        type:
          description: |
            Type of login
          example: email
          type: string
        login:
          description: |
            User unique identifier, email, username, etc. User can use it to sign-in.
          example: john@example.org
          type: string
        unconfirmedLogin:
          description: Login that waits for confirmation.
          type: string
          x-nullable: true
          example: null
        confirmed:
          type: boolean
          example: null
      required:
      - login
      - type
      type: object
      x-order: -2010674509-0
    NoAuthPrivateData:
      additionalProperties: true
      description: Data available only for authenticator.
      type: object
      x-order: 332570507-7
      x-super: '#/components/schemas/AuthPrivateData'
      example: null
    NoAuthPublicData:
      additionalProperties: true
      description: Data that are available for API.
      type: object
      x-order: 332570507-5
      x-super: '#/components/schemas/AuthPublicData'
      example: null
    OAuthAppPrivateData:
      additionalProperties: true
      description: Data available only for authenticator.
      properties:
        secretHash:
          type: string
          example: null
      required:
      - secretHash
      type: object
      x-order: -1247144074-3
      x-super: '#/components/schemas/AuthPrivateData'
      example: null
    OAuthAppPublicData:
      additionalProperties: true
      description: Data that are available for API.
      properties:
        redirectUris:
          items:
            type: string
          type: array
          x-nullable: true
          example: null
      type: object
      x-order: -1247144074-2
      x-super: '#/components/schemas/AuthPublicData'
      example: null
    OAuthAppUpdateResData:
      additionalProperties: true
      properties:
        clientId:
          type: string
          example: null
        redirectUris:
          items:
            type: string
          type: array
          x-nullable: true
          example: null
        clientSecret:
          description: Provided only when generated first time or generated again.
          type: string
          x-nullable: true
          example: null
      required:
      - clientId
      type: object
      x-order: -1247144074-6
      x-super: '#/components/schemas/AuthResData'
      example: null
    OAuthPublicData:
      additionalProperties: true
      description: Data that are available for API.
      type: object
      x-order: -893636857-2
      example: null
    OAuthResData:
      additionalProperties: true
      properties:
        extractedLogin:
          type: string
          example: null
        extractedPublicData:
          additionalProperties: true
          description: Data that are available for API.
          type: object
          x-order: -893636857-2
          example: null
      required:
      - extractedLogin
      - extractedPublicData
      type: object
      x-order: -893636857-5
      x-super: '#/components/schemas/AuthResData'
      example: null
    OkAuthExecRes:
      properties:
        status:
          enum:
          - OK
          - ERR
          - SKIPPED
          type: string
        sentCode:
          $ref: '#/components/schemas/Code'
        resData:
          $ref: '#/components/schemas/AuthExecRes_resData'
      required:
      - status
      type: object
      x-order: -73723375-3
      x-super: '#/components/schemas/AuthExecRes'
      example: null
    Password:
      properties:
        hash:
          type: string
          example: null
        createdAt:
          format: int64
          type: integer
          example: null
      required:
      - createdAt
      - hash
      type: object
      x-order: 378192899-3
      example: null
    PasswordHistory:
      additionalProperties: true
      description: Data available only for authenticator.
      properties:
        passwords:
          items:
            $ref: '#/components/schemas/Password'
          type: array
          example: null
        changedAt:
          format: int64
          type: integer
          x-nullable: true
          example: null
      type: object
      x-order: 378192899-0
      x-super: '#/components/schemas/AuthPrivateData'
      example: null
    PasswordPublicData:
      additionalProperties: true
      description: Data that are available for API.
      properties:
        updatedAt:
          description: Time when password was updated last time.
          format: int64
          type: integer
          example: null
      required:
      - updatedAt
      type: object
      x-order: -266447761-2
      x-super: '#/components/schemas/AuthPublicData'
      example: null
    PasswordUpdateResData:
      additionalProperties: true
      properties:
        password:
          description: If password was generated by app this field contains generated
            password.
          type: string
          example: null
        strength:
          description: Calculated strength of password. Null means that all checks
            failed.
          type: string
          x-nullable: true
          example: null
      required:
      - password
      type: object
      x-order: -266447761-5
      x-super: '#/components/schemas/AuthResData'
      example: null
    QuestionsAuthResData:
      additionalProperties: true
      properties:
        correct:
          additionalProperties:
            type: boolean
            x-additionalPropertiesName: question id
          description: |
            Shows is answer was correct.
          example:
            HOMETOWN: true
            MOTHER_NAME: false
          type: object
      required:
      - correct
      type: object
      x-order: -213229069-4
      x-super: '#/components/schemas/AuthResData'
      example: null
    QuestionsPrivateData:
      additionalProperties: true
      description: Data available only for authenticator.
      properties:
        answers:
          additionalProperties:
            type: string
          type: object
          example: null
      type: object
      x-order: -213229069-2
      x-super: '#/components/schemas/AuthPrivateData'
      example: null
    QuestionsPublicData:
      additionalProperties: true
      description: Data that are available for API.
      properties:
        answersSavedAt:
          additionalProperties:
            format: int64
            type: integer
            x-additionalPropertiesName: question id
          type: object
          example: null
      type: object
      x-order: -213229069-1
      x-super: '#/components/schemas/AuthPublicData'
      example: null
    QuestionsUpdateResData:
      additionalProperties: true
      properties:
        answersSavedAt:
          additionalProperties:
            format: int64
            type: integer
            x-additionalPropertiesName: question id
          description: |
            Date of last update
          type: object
          example: null
      required:
      - answersSavedAt
      type: object
      x-order: -213229069-6
      x-super: '#/components/schemas/AuthResData'
      example: null
    SkippedAuthExecRes:
      properties:
        status:
          enum:
          - OK
          - ERR
          - SKIPPED
          type: string
        sentCode:
          $ref: '#/components/schemas/Code'
      required:
      - status
      type: object
      x-order: -73723375-5
      x-super: '#/components/schemas/AuthExecRes'
      example: null
    TotpPrivateDate:
      additionalProperties: true
      description: Data available only for authenticator.
      properties:
        secret:
          type: string
          example: null
      required:
      - secret
      type: object
      x-order: 820555017-2
      x-super: '#/components/schemas/AuthPrivateData'
      example: null
    TotpUpdateResData:
      additionalProperties: true
      properties:
        secret:
          description: Base32 SHA-1 key.
          type: string
          example: null
        otpUrl:
          type: string
          example: null
        otpUrlQrCode:
          description: |-
            QR code URL. Use it like this:
            `<img style="image-rendering: pixelated;" width="200" src="<otpUrlQrCode>"/>`
          type: string
          example: null
      required:
      - otpUrl
      - otpUrlQrCode
      - secret
      type: object
      x-order: 820555017-5
      x-super: '#/components/schemas/AuthResData'
      example: null
    UnconfirmedAuthData:
      example:
        code:
          attemptsLeft: 1
          usedAttempts: 6
          hasAttemptsLeft: true
          validUntil: 0
          id: id
          sentAt: 5
        data:
          public:
            answersSavedAt:
              key: 1
            redirectUris:
            - redirectUris
            - redirectUris
            email: email
            updatedAt: 6
          login: login
      properties:
        data:
          $ref: '#/components/schemas/AuthData'
        code:
          $ref: '#/components/schemas/CodeVerifier'
      required:
      - code
      - data
      type: object
      x-order: 332570507-8
    User:
      example:
        new: false
        signedUpAt: 5
        systemAccess: false
        auths:
          key:
            data:
              public:
                answersSavedAt:
                  key: 1
                redirectUris:
                - redirectUris
                - redirectUris
                email: email
                updatedAt: 6
              login: login
            sentCodes:
            - code:
                attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              data:
                public:
                  answersSavedAt:
                    key: 1
                  redirectUris:
                  - redirectUris
                  - redirectUris
                  email: email
                  updatedAt: 6
                login: login
            - code:
                attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              data:
                public:
                  answersSavedAt:
                    key: 1
                  redirectUris:
                  - redirectUris
                  - redirectUris
                  email: email
                  updatedAt: 6
                login: login
            confirmed: true
        id: fewfvc23f
        logins:
        - unconfirmedLogin: unconfirmedLogin
          type: email
          login: john@example.org
          confirmed: true
        - unconfirmedLogin: unconfirmedLogin
          type: email
          login: john@example.org
          confirmed: true
        factors:
        - factors
        - factors
        updatedAt: 5
      properties:
        id:
          description: |
            Generated user id
          example: fewfvc23f
          type: string
        logins:
          items:
            $ref: '#/components/schemas/Login'
          type: array
          example: null
        auths:
          additionalProperties:
            $ref: '#/components/schemas/AuthUserCfg'
          description: |
            Data of confirmed auths and sent codes for unconfirmed auths.
          type: object
          example: null
        factors:
          description: Enabled factors
          items:
            type: string
          type: array
          example: null
        signedUpAt:
          format: int64
          type: integer
          example: null
        updatedAt:
          format: int64
          type: integer
          example: null
        new:
          default: false
          type: boolean
          example: null
        systemAccess:
          default: false
          description: Allows to access backend-only APIs. Use `appSecret` auth to
            obtain token with this access.
          type: boolean
          example: null
      required:
      - auths
      - factors
      - id
      - logins
      - signedUpAt
      - updatedAt
      type: object
      x-order: 276900135-0
    AppSecretReqData:
      additionalProperties: true
      properties:
        secret:
          type: string
          example: null
      required:
      - secret
      type: object
      x-order: 791325901-2
      x-super: '#/components/schemas/AuthReqData'
      example: null
    AuthReqData:
      additionalProperties: true
      type: object
      x-order: -1249106462-4
      example: null
    AuthenticateReq:
      example:
        authReqs:
          key:
            template: template
            redirectUri: redirectUri
            clientId: clientId
            code: code
            authorizationCode: authorizationCode
            accountName: accountName
            newClientSecret: false
            answers:
              HOMETOWN: London
              MOTHER_NAME: null
            agentLogins:
            - type: email
              login: john@example.org
            - type: email
              login: john@example.org
            secret: secret
            agentAccessToken: agentAccessToken
            accessToken: accessToken
            redirectUris:
            - redirectUris
            - redirectUris
            issuer: issuer
            password: password
            templateParams:
              key: "{}"
            confirmPassword: confirmPassword
            clientSecret: clientSecret
            scopes:
            - scopes
            - scopes
            email: email
        dryRun: false
        factors:
          key: factors
      properties:
        factors:
          additionalProperties:
            type: string
            x-additionalPropertiesName: factor
          description: |
            If this field is not specified, server tries to execute and assign auth for the `next-factor`
            (see `session` model). Otherwise, auths will be assigned to the factors specified in this field.

            Useful when:
            - "Retry mode". User didn't receive confirmation code and wants to retry.
            In this case you should provide `authReq` for auth you want to retry and set it to the same factor.
            - "Replace mode". User can't receive confirmation code and wants to try another auth. E.g. they lost email and
            want to proceed with a secret-questions auth.
            In this case you should provide `authReq` for auth you want to replace with and set it to the same factor.

            If it's used in sign-up mode, it just enables those factors (so actual value is ignored and can be `null`).
            E.g. `"factors": { "second": null }` will enable second factor during sign-up.
          type: object
          example: null
        authReqs:
          additionalProperties:
            $ref: '#/components/schemas/AuthenticateReq_authReqs_value'
          description: |
            Request for authenticators
          type: object
          example: null
        dryRun:
          default: false
          description: Execute only validation ща authenticator requests.
          type: boolean
          example: null
      type: object
      x-order: 2094520596-2
    AuthorizationCodeAuthReqData:
      additionalProperties: true
      properties:
        authorizationCode:
          description: Authorization code provided by `authorizationCode` update request.
          type: string
          example: null
        agentAccessToken:
          description: Access token of user that will be able to act of behalf of
            current user.
          type: string
          x-order: -2026363309-3
          example: null
      required:
      - agentAccessToken
      - authorizationCode
      type: object
      x-order: -1836982696-6
      x-super: '#/components/schemas/AuthReqData'
      example: null
    AuthorizationCodeUpdateReqData:
      additionalProperties: true
      properties:
        agentLogins:
          description: Login or logins of the user that will get access-token and
            be able to act of behalf of current user.
          items:
            $ref: '#/components/schemas/LoginId'
          type: array
          example: null
        scopes:
          items:
            type: string
          type: array
          x-nullable: true
          example: null
      required:
      - agentLogins
      type: object
      x-order: -1836982696-4
      x-super: '#/components/schemas/AuthReqData'
      example: null
    EmailAuthReqData:
      additionalProperties: true
      properties:
        email:
          description: |-
            User email. If email is not null - auth allow identification by email (email auth also must be listed in
            logins config). Otherwise, uses email of already identified user.
          type: string
          x-nullable: true
          example: null
        template:
          description: Template to use.
          type: string
          x-nullable: true
          example: null
        templateParams:
          additionalProperties:
            type: object
          description: Template params
          type: object
          x-nullable: true
          example: null
      type: object
      x-order: 1021533909-3
      x-super: '#/components/schemas/AuthReqData'
      example: null
    EmailUpdateReqData:
      additionalProperties: true
      properties:
        email:
          description: New email to set.
          type: string
          example: null
        template:
          description: Template to use.
          type: string
          x-nullable: true
          example: null
        templateParams:
          additionalProperties:
            type: object
          description: Template params
          type: object
          x-nullable: true
          example: null
      required:
      - email
      type: object
      x-order: 1021533909-4
      x-super: '#/components/schemas/AuthReqData'
      example: null
    NewSessionReq:
      example:
        authReqs:
          key:
            template: template
            redirectUri: redirectUri
            clientId: clientId
            code: code
            authorizationCode: authorizationCode
            accountName: accountName
            newClientSecret: false
            answers:
              HOMETOWN: London
              MOTHER_NAME: null
            agentLogins:
            - type: email
              login: john@example.org
            - type: email
              login: john@example.org
            secret: secret
            agentAccessToken: agentAccessToken
            accessToken: accessToken
            redirectUris:
            - redirectUris
            - redirectUris
            issuer: issuer
            password: password
            templateParams:
              key: "{}"
            confirmPassword: confirmPassword
            clientSecret: clientSecret
            scopes:
            - scopes
            - scopes
            email: email
        entry: entry
        dryRun: false
        signIn: false
        logins:
          key: logins
        signUp: false
        factors:
          key: factors
      properties:
        entry:
          type: string
          example: null
        logins:
          additionalProperties:
            type: string
            x-additionalPropertiesName: loginType
          type: object
          example: null
        factors:
          additionalProperties:
            type: string
            x-additionalPropertiesName: factor
          description: |
            If this field is not specified, server tries to execute and assign auth for the `next-factor`
            (see `session` model). Otherwise, auths will be assigned to the factors specified in this field.

            Useful when:
            - "Retry mode". User didn't receive confirmation code and wants to retry.
            In this case you should provide `authReq` for auth you want to retry and set it to the same factor.
            - "Replace mode". User can't receive confirmation code and wants to try another auth. E.g. they lost email and
            want to proceed with a secret-questions auth.
            In this case you should provide `authReq` for auth you want to replace with and set it to the same factor.

            If it's used in sign-up mode, it just enables those factors (so actual value is ignored and can be `null`).
            E.g. `"factors": { "second": null }` will enable second factor during sign-up.
          type: object
          example: null
        authReqs:
          additionalProperties:
            $ref: '#/components/schemas/AuthenticateReq_authReqs_value'
          description: |
            Request for authenticators
          type: object
          example: null
        signIn:
          default: false
          type: boolean
          example: null
        signUp:
          default: false
          type: boolean
          example: null
        dryRun:
          default: false
          description: Execute only validation ща authenticator requests.
          type: boolean
          example: null
      required:
      - entry
      type: object
      x-order: 2094520596-1
    NoAuthReqData:
      additionalProperties: true
      type: object
      x-order: -1249106462-5
      x-super: '#/components/schemas/AuthReqData'
      example: null
    OAuthAppAuthReqData:
      additionalProperties: true
      properties:
        clientId:
          type: string
          example: null
        clientSecret:
          type: string
          x-nullable: true
          example: null
        redirectUri:
          type: string
          x-nullable: true
          example: null
      required:
      - clientId
      type: object
      x-order: -1247144074-4
      x-super: '#/components/schemas/AuthReqData'
      example: null
    OAuthAppUpdateReqData:
      additionalProperties: true
      properties:
        redirectUris:
          description: "Null - don't validate redirectUrl, empty array will lead to\
            \ all authenticate request fail."
          items:
            type: string
          type: array
          x-nullable: true
          example: null
        newClientSecret:
          default: false
          description: "If previous secret lost or compromised, it allows to generate\
            \ a new one."
          type: boolean
          example: null
      type: object
      x-order: -1247144074-5
      x-super: '#/components/schemas/AuthReqData'
      example: null
    OAuthReqData:
      additionalProperties: true
      properties:
        accessToken:
          description: If you have access-token - put it here.
          type: string
          x-nullable: true
          example: null
        authorizationCode:
          description: If you have authorisation-code - app will exchange it for access-token.
          type: string
          x-nullable: true
          example: null
        redirectUri:
          description: Redirect uri used when requested user login.
          type: string
          x-nullable: true
          example: null
      type: object
      x-order: -893636857-4
      x-super: '#/components/schemas/AuthReqData'
      example: null
    PasswordAuthReqData:
      additionalProperties: true
      properties:
        password:
          description: User password.
          type: string
          example: null
      required:
      - password
      type: object
      x-order: -266447761-3
      x-super: '#/components/schemas/AuthReqData'
      example: null
    PasswordUpdateReqData:
      additionalProperties: true
      properties:
        password:
          description: New password to set. If null app generates password automatically.
          type: string
          x-nullable: true
          example: null
        confirmPassword:
          description: Password confirmation. If null app doesn't perform this check.
          type: string
          x-nullable: true
          example: null
      type: object
      x-order: -266447761-4
      x-super: '#/components/schemas/AuthReqData'
      example: null
    QuestionsAuthReqData:
      additionalProperties: true
      properties:
        answers:
          additionalProperties:
            type: string
            x-additionalPropertiesName: question id
          description: |
            Given answers for questions.
          example:
            HOMETOWN: New-York
            MOTHER_NAME: Emma
          type: object
      required:
      - answers
      type: object
      x-order: -213229069-3
      x-super: '#/components/schemas/AuthReqData'
      example: null
    QuestionsUpdateReqData:
      additionalProperties: true
      properties:
        answers:
          additionalProperties:
            type: string
            x-additionalPropertiesName: question id
          description: |
            Answers to save. `null` as value removes answer
          example:
            HOMETOWN: London
            MOTHER_NAME: null
          type: object
      required:
      - answers
      type: object
      x-order: -213229069-5
      x-super: '#/components/schemas/AuthReqData'
      example: null
    ScopesAuthReqData:
      additionalProperties: true
      properties:
        agentLogins:
          description: Login or logins of the user that will get access-token and
            be able to act of behalf of current user.
          items:
            $ref: '#/components/schemas/LoginId'
          type: array
          x-nullable: true
          example: null
        scopes:
          items:
            type: string
          type: array
          x-nullable: true
          example: null
      type: object
      x-order: 2741601-3
      x-super: '#/components/schemas/AuthReqData'
      example: null
    TotpAuthReqData:
      additionalProperties: true
      properties:
        code:
          type: string
          example: null
      required:
      - code
      type: object
      x-order: 820555017-3
      x-super: '#/components/schemas/AuthReqData'
      example: null
    TotpUpdateReqData:
      additionalProperties: true
      properties:
        secret:
          description: |-
            Base32 SHA-1 key.
            If null, secret is generated automatically.
          type: string
          x-nullable: true
          example: null
        issuer:
          description: Used only to generate `otpauth://` url.
          type: string
          example: null
        accountName:
          description: Used only to generate `otpauth://` url.
          type: string
          example: null
      required:
      - accountName
      - issuer
      type: object
      x-order: 820555017-4
      x-super: '#/components/schemas/AuthReqData'
      example: null
    ConfirmSessionAuthsReq:
      example:
        receivedCodes:
          key:
            key: receivedCodes
        sessionId: sessionId
      properties:
        sessionId:
          description: |-
            If null, session id will be extracted from access-token.
            Useful to confirm auth from another device where no access-token available.
          type: string
          x-nullable: true
          example: null
        receivedCodes:
          additionalProperties:
            additionalProperties:
              type: string
              x-additionalPropertiesName: codeId
            type: object
            x-additionalPropertiesName: auth
          description: |
            The code from authenticate/new-session response.
          type: object
          example: null
      required:
      - receivedCodes
      type: object
      x-order: 2094520596-4
    SignOutRes:
      type: object
      x-order: 2094520596-5
      example: null
    FindSessionsRes:
      example:
        sessions:
        - authenticated: true
          systemAccess: true
          data:
            key:
              agent:
              - type: email
                login: john@example.org
              - type: email
                login: john@example.org
              scopes:
              - scopes
              - scopes
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: email
            login: john@example.org
          - type: email
            login: john@example.org
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        - authenticated: true
          systemAccess: true
          data:
            key:
              agent:
              - type: email
                login: john@example.org
              - type: email
                login: john@example.org
              scopes:
              - scopes
              - scopes
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: email
            login: john@example.org
          - type: email
            login: john@example.org
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
        tooManySessions: true
      properties:
        sessions:
          items:
            $ref: '#/components/schemas/Session'
          type: array
          example: null
        tooManySessions:
          description: True if number of sessions in database exceeds some limit
          type: boolean
          example: null
      required:
      - sessions
      type: object
      x-order: 400707106-4
    SaveUserRes:
      example:
        user:
          new: false
          signedUpAt: 5
          systemAccess: false
          auths:
            key:
              data:
                public:
                  answersSavedAt:
                    key: 1
                  redirectUris:
                  - redirectUris
                  - redirectUris
                  email: email
                  updatedAt: 6
                login: login
              sentCodes:
              - code:
                  attemptsLeft: 1
                  usedAttempts: 6
                  hasAttemptsLeft: true
                  validUntil: 0
                  id: id
                  sentAt: 5
                data:
                  public:
                    answersSavedAt:
                      key: 1
                    redirectUris:
                    - redirectUris
                    - redirectUris
                    email: email
                    updatedAt: 6
                  login: login
              - code:
                  attemptsLeft: 1
                  usedAttempts: 6
                  hasAttemptsLeft: true
                  validUntil: 0
                  id: id
                  sentAt: 5
                data:
                  public:
                    answersSavedAt:
                      key: 1
                    redirectUris:
                    - redirectUris
                    - redirectUris
                    email: email
                    updatedAt: 6
                  login: login
              confirmed: true
          id: fewfvc23f
          logins:
          - unconfirmedLogin: unconfirmedLogin
            type: email
            login: john@example.org
            confirmed: true
          - unconfirmedLogin: unconfirmedLogin
            type: email
            login: john@example.org
            confirmed: true
          factors:
          - factors
          - factors
          updatedAt: 5
        authRes:
          key:
            sentCode:
              attemptsLeft: 9
              usedAttempts: 7
              hasAttemptsLeft: true
              validUntil: 2
              id: id
              sentAt: 3
            err:
              msg: msg
              tooShort: true
              incorrectAnswers:
              - incorrectAnswers
              - incorrectAnswers
              code: code
              loginId:
                type: email
                login: john@example.org
              strength: strength
              devMsg: devMsg
              waitTimeMinutes: 6
              tooLong: true
              missingSymbol: true
              matchesLogin:
                type: email
                login: john@example.org
              expiredAt: 7
              incorrectRedirectUri: true
              missingUpperCase: true
              commonPassword: true
              missingNumber: true
              tooManyAnswers: true
              incorrectSecret: true
              questionsNotFound:
              - questionsNotFound
              - questionsNotFound
              wasUsedBeforeAt: 7
              requiresMoreAnswers: true
              waitTimeSeconds: 1
              missingLowerCase: true
              passwordsMismatch: true
              wasUsedDaysAgo: 1
              invalidAnswers:
                key:
                  tooShort: true
                  tooLong: true
              waitTimeMs: 1
              changedAt: 2
              changedDaysAgo: 4
            resData:
              emailSentTo: emailSentTo
              clientId: clientId
              answersSavedAt:
                key: 1
              strength: strength
              correct:
                HOMETOWN: true
                MOTHER_NAME: false
              otpUrl: otpUrl
              authorizationCode: authorizationCode
              secret: secret
              redirectUris:
              - redirectUris
              - redirectUris
              password: password
              ipEncoded: ipEncoded
              clientSecret: clientSecret
              extractedPublicData:
                key: ""
              otpUrlQrCode: otpUrlQrCode
              extractedLogin: extractedLogin
            status: OK
      properties:
        user:
          $ref: '#/components/schemas/User'
        authRes:
          additionalProperties:
            $ref: '#/components/schemas/AuthExecRes'
          type: object
          example: null
      required:
      - authRes
      type: object
      x-order: -1847312442-2
    ConfirmUserAuthsReq:
      example:
        receivedCodes:
          key:
            key: receivedCodes
        userId: userId
      properties:
        userId:
          description: |-
            If null, user id will be extracted from access-token.
            Useful to confirm auth from another device where no access-token available.
          type: string
          x-nullable: true
          example: null
        receivedCodes:
          additionalProperties:
            additionalProperties:
              type: string
              x-additionalPropertiesName: codeId
            type: object
            x-additionalPropertiesName: auth
          description: |
            The code from save-user response.
          type: object
          example: null
      required:
      - receivedCodes
      type: object
      x-order: -1847312442-4
    EditUserReq:
      example:
        authReqs:
          key:
            template: template
            redirectUri: redirectUri
            clientId: clientId
            code: code
            authorizationCode: authorizationCode
            accountName: accountName
            newClientSecret: false
            answers:
              HOMETOWN: London
              MOTHER_NAME: null
            agentLogins:
            - type: email
              login: john@example.org
            - type: email
              login: john@example.org
            secret: secret
            agentAccessToken: agentAccessToken
            accessToken: accessToken
            redirectUris:
            - redirectUris
            - redirectUris
            issuer: issuer
            password: password
            templateParams:
              key: "{}"
            confirmPassword: confirmPassword
            clientSecret: clientSecret
            scopes:
            - scopes
            - scopes
            email: email
        dryRun: false
        systemAccess: true
        logins:
          key: logins
        factors:
          key: true
      properties:
        factors:
          additionalProperties:
            type: boolean
            x-additionalPropertiesName: factor
          description: |
            Optional factors to enable/disable. If factor marked as required in config, it will be considered enabled
            by default and this request doesn't change this.
          type: object
          example: null
        logins:
          additionalProperties:
            type: string
            x-additionalPropertiesName: loginType
          type: object
          example: null
        authReqs:
          additionalProperties:
            $ref: '#/components/schemas/AuthenticateReq_authReqs_value'
          type: object
          example: null
        dryRun:
          default: false
          type: boolean
          example: null
        systemAccess:
          type: boolean
          x-nullable: true
          example: null
      type: object
      x-order: -1847312442-3
      x-super: '#/components/schemas/SaveUserReq'
    SaveUserReq:
      example:
        authReqs:
          key:
            template: template
            redirectUri: redirectUri
            clientId: clientId
            code: code
            authorizationCode: authorizationCode
            accountName: accountName
            newClientSecret: false
            answers:
              HOMETOWN: London
              MOTHER_NAME: null
            agentLogins:
            - type: email
              login: john@example.org
            - type: email
              login: john@example.org
            secret: secret
            agentAccessToken: agentAccessToken
            accessToken: accessToken
            redirectUris:
            - redirectUris
            - redirectUris
            issuer: issuer
            password: password
            templateParams:
              key: "{}"
            confirmPassword: confirmPassword
            clientSecret: clientSecret
            scopes:
            - scopes
            - scopes
            email: email
        dryRun: false
        logins:
          key: logins
        factors:
          key: true
      properties:
        factors:
          additionalProperties:
            type: boolean
            x-additionalPropertiesName: factor
          description: |
            Optional factors to enable/disable. If factor marked as required in config, it will be considered enabled
            by default and this request doesn't change this.
          type: object
          example: null
        logins:
          additionalProperties:
            type: string
            x-additionalPropertiesName: loginType
          type: object
          example: null
        authReqs:
          additionalProperties:
            $ref: '#/components/schemas/AuthenticateReq_authReqs_value'
          type: object
          example: null
        dryRun:
          default: false
          type: boolean
          example: null
      type: object
      x-order: -1847312442-1
    AuthorizeRes:
      example:
        session:
          authenticated: true
          systemAccess: true
          data:
            key:
              agent:
              - type: email
                login: john@example.org
              - type: email
                login: john@example.org
              scopes:
              - scopes
              - scopes
          signedInAt: 5
          userId: userId
          expiresAt: 2
          nextFactors:
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          - supportedAuths:
            - supportedAuths
            - supportedAuths
            factor: factor
          entry: entry
          expired: true
          authenticatedBy:
            key: authenticatedBy
          newUser: true
          refreshedAt: 7
          id: id
          identifiedBy:
          - type: email
            login: john@example.org
          - type: email
            login: john@example.org
          unconfirmedAuths:
            key:
              sentCodes:
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
              - attemptsLeft: 1
                usedAttempts: 6
                hasAttemptsLeft: true
                validUntil: 0
                id: id
                sentAt: 5
          device:
            browser: browser
            mobile: true
            userAgent: userAgent
            type: type
      properties:
        session:
          $ref: '#/components/schemas/Session'
      type: object
      x-order: -2047680577-2
    AuthorizeReq:
      example:
        rateLimiter:
          quotaToBurn: 0.8008281904610115
          id: id
      properties:
        rateLimiter:
          $ref: '#/components/schemas/RateLimiterReq'
      type: object
      x-order: -2047680577-1
    RateLimiterReq:
      example:
        quotaToBurn: 0.8008281904610115
        id: id
      properties:
        id:
          type: string
          example: null
        quotaToBurn:
          format: double
          type: number
          example: null
      required:
      - id
      - quotaToBurn
      type: object
      x-order: -2047680577-3
    json:
      additionalProperties: true
      type: object
    AccessTokenCfg:
      description: Short-living token used for authentication.
      example:
        cache: JWT
        cookie: false
        cacheUnauthenticated: false
        ttl: 1d
      properties:
        cookie:
          default: false
          description: Send token in `access_token` cookie
          type: boolean
          example: null
        cache:
          description: |-
            If not null - access token contains signed session data, so it's not required to request session database for
            access check.
          enum:
          - JWT
          - BINARY
          type: string
          x-nullable: true
          x-super: '#/components/schemas/Cache'
          example: null
        cacheUnauthenticated:
          default: false
          description: "By default, unauthenticated sessions can't be cached."
          type: boolean
          example: null
        ttl:
          default: 1d
          description: |
            Lifetime for access token. 1d, 30m, etc.
          example: 1d
          type: string
      type: object
      x-order: -1195634750-1
    AnswersTransformationCfg:
      properties:
        lowercase:
          default: true
          description: |-
            Transform user answer to lowercase letters. This allows user still pass a check when he wrote name or city
            with different cases. `false` means strict match, so "John" != "john"
          type: boolean
          example: null
        removeSymbols:
          default: true
          description: Remove all non-letters from user answer.
          type: boolean
          example: null
        removeSpaces:
          default: true
          description: Remove all spaces from user answer.
          type: boolean
          example: null
      type: object
      x-order: 545691127-1
      example: null
    AppSecretAuthCfg:
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
      type: object
      x-order: 791325901-3
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    AuthAppCfg:
      description: Authentication implementation config
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
      type: object
      x-order: 377338786-0
      example: null
    AuthorizationCodeAuthCfg:
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        codeTtl:
          default: 10m
          description: |
            Authorization code lifetime.
          type: string
          example: null
        scopes:
          description: Allowed oauth2 scopes.
          items:
            type: string
          type: array
          example: null
      type: object
      x-order: -1836982696-3
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    BuiltInAuthCfg:
      description: Authentication implementation config
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
      type: object
      x-order: -824080721-0
      x-super: '#/components/schemas/AuthAppCfg'
      example: null
    Cache:
      enum:
      - JWT
      - BINARY
      type: string
    CodeCfg:
      description: If specified - app generates code and requires auth to be confirmed
      properties:
        length:
          default: 4
          description: Length of code to be generated
          format: int32
          type: integer
          example: null
        ttl:
          description: "Generated code lifetime. e.g. 1m, 60s, 1d, etc."
          type: string
          example: null
        alphabet:
          description: Symbols used to generate a code. By default `a-z + A-Z + 0-9`.
          type: string
          example: null
        easyToRemember:
          default: true
          description: "If true, every second letter will be the same, that allows\
            \ the codes to rhyme."
          type: boolean
          example: null
        maxAttempts:
          default: 3
          description: Max attempts to enter the code.
          format: int32
          type: integer
          example: null
      type: object
      x-order: 377338786-1
      example: null
    DbCfg:
      type: object
      x-order: -195398693-0
      example: null
    Duration:
      type: string
    EmailAuthCfg:
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        server:
          description: Email server address/IP.
          type: string
          example: null
        sender:
          description: Email address of sender.
          type: string
          example: null
        username:
          description: SMTP username.
          type: string
          x-nullable: true
          example: null
        password:
          description: SMTP password.
          type: string
          x-nullable: true
          example: null
        confirmationUrl:
          description: |-
            If not null, server will create template param `confirmationUrl` that will contain query parameters with
            confirmation code, session id, etc.
          type: string
          x-nullable: true
          example: null
        templates:
          additionalProperties:
            type: string
            x-additionalPropertiesName: templateName
          description: |+
            List of email templates. Key - is name of a template (can be used lately on frontend), value - is path to the template.
            App uses handlebars templates to generate emails. See docs here https://handlebarsjs.com

            Email templates receives `confirmationUrl`, `action`, `user`, `session`, `codeId`, `code`, `codeExpiresInMinutes`,
            `lang`, `headers` as template params, e.g. you can print user id as `{{user.id}}`.

            Template engine also provides `i18n` helper for localisation. E.g. `{{i18n 'confirmationButton' default='Confirm'}}`
            searches key `confirmationButton` in files specified by `i18n.dir` config.

            Use `{{err ERR_CODE msg='Localised message (if null, will be taken from i18n file)' devMsg='dev message'}}` to
            raise an error in a template.

            It allows setting subject of email using `title` html tag, e.g. `<title>Email subject</title>`.

          example:
            welcome: ./welcome.html.hbs
            restoreAccess: ./restore.html.hbs
          type: object
        templateParams:
          additionalProperties:
            type: object
            x-additionalPropertiesName: paramName
          description: |
            Additional params for templates that can be passed in request. Key - is a name of additional parameter, value - is
            a default value for this parameter (when no value present in request)
          type: object
          example: null
        code:
          $ref: '#/components/schemas/CodeCfg'
      required:
      - sender
      - server
      type: object
      x-order: -1025321515-0
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    EntryAccessTokenCfg:
      properties:
        ttl:
          description: Override access token ttl
          type: string
          x-nullable: true
          example: null
        cache:
          description: Enable or disable client-side caching of access token
          type: boolean
          x-nullable: true
          example: null
      type: object
      x-order: -842539141-1
      example: null
    EntryCfg:
      description: Configuration for app entry.
      example:
        editAccount: false
        factorsRequired:
          first:
          - password
          - facebook
          - email
        factorsOptional:
          second:
          - sms
        requiresEntry:
        - requiresEntry
        - requiresEntry
        accessToken:
          cache: true
          ttl: ttl
        ttl: 3M
      properties:
        factorsRequired:
          additionalProperties:
            description: |
              List of auths that could be chosen for this factor.
            items:
              type: string
            type: array
            x-additionalPropertiesName: factor
          description: |+
            Specifies factors that always required to be authenticated.

            Usually it's main auth method (e.g. password) + social login (e.g. facebook) +
            reserve auth option in case of lost/forgotten main auth credentials (e.g. secret questions or email auth).

            These factors are always required even when user hasn't enabled them explicitly.

          example:
            first:
            - password
            - facebook
            - email
          type: object
        factorsOptional:
          additionalProperties:
            items:
              type: string
            type: array
            x-additionalPropertiesName: factor
          description: |
            This factors can be skipped if user hasn't enabled them. Used for optional 2FA.
            E.g. If user added mobile phone -> use it for 2FA otherwise skip 2FA.
          example:
            second:
            - sms
          type: object
        requiresEntry:
          description: |-
            Require user to be already signed in by one of the listed entries. Usually it used for action confirmation, e.g.
            "payment" that requires confirmation by sms, requires user to be already signed in (e.g. with entry "app".
          items:
            type: string
          type: array
          example: null
        accessToken:
          $ref: '#/components/schemas/EntryCfg_accessToken'
        ttl:
          description: |
            Max lifetime of session.
          example: 3M
          type: string
          x-nullable: true
        editAccount:
          default: false
          description: "Is this session allowed to add/remove new auth, enable/disable\
            \ factors, etc.?"
          type: boolean
          example: null
      type: object
      x-order: -842539141-0
    ExchangeAuthCodeCfg:
      properties:
        tokenUrl:
          description: |
            Url to get access token by authorisation code.
          example: https://example.org/token
          type: string
        clientId:
          description: "OAuth client id. Client must be registered on OAuth provider\
            \ (e.g. facebook, google)"
          type: string
          x-nullable: true
          example: null
        clientSecret:
          description: OAuth client secret.
          type: string
          x-nullable: true
          example: null
      required:
      - tokenUrl
      type: object
      x-order: -1532051357-2
      example: null
    I18nCfg:
      description: "Configuration for localization of error messages, emails, etc."
      example:
        default: en
        dir: ./i18n
      properties:
        dir:
          description: |
            Directory when messages are stored. To support new language add `<lang>.json5` file. App will create helpful
            templates after start if dir is not null.
          example: ./i18n
          type: string
          x-nullable: true
        default:
          default: en
          description: |
            Default language to use.
          example: en
          type: string
      type: object
      x-order: -1723799702-4
    InMemoryCfg:
      properties:
        inMemory:
          default: true
          type: boolean
          example: null
      type: object
      x-order: 1129812999-3
      x-super: '#/components/schemas/DbCfg'
      example: null
    InTokenCfg:
      properties:
        inToken:
          default: true
          type: boolean
          example: null
      type: object
      x-order: -291817267-2
      x-super: '#/components/schemas/DbCfg'
      example: null
    IpAuthCfg:
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        ipBytesToIgnore:
          default: 0
          description: |-
            This allows to drop last bytes of IP. So it allows to authenticate factor when ip has rough match, e.g.
            the same country, same city, or same internet provider.
          format: int32
          type: integer
          example: null
        historySize:
          default: 10
          description: |-
            History of IP addresses user used to sign-in. Authenticated when user attempts to sign in with one of stored
            IPs.
          format: int32
          type: integer
          example: null
      type: object
      x-order: 2116983897-3
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    JdbcCfg:
      properties:
        username:
          default: ""
          type: string
          example: null
        password:
          default: ""
          type: string
          example: null
        maxConnections:
          default: 500
          format: int32
          type: integer
          example: null
      type: object
      x-order: -1497406623-0
      x-super: '#/components/schemas/DbCfg'
      example: null
    MongoCfg:
      properties:
        mongodb:
          type: string
          example: null
        database:
          type: string
          example: null
      required:
      - database
      - mongodb
      type: object
      x-order: -592385449-0
      x-super: '#/components/schemas/DbCfg'
      example: null
    MysqlCfg:
      properties:
        mysql:
          default: localhost:3306
          type: string
          example: null
        username:
          default: mysql
          type: string
          example: null
        maxConnections:
          default: 500
          format: int32
          type: integer
          example: null
        password:
          default: mysql
          type: string
          example: null
      type: object
      x-order: -577347408-2
      x-super: '#/components/schemas/JdbcCfg'
      example: null
    OAuthAppAuthCfg:
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
      type: object
      x-order: -1247144074-1
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    OAuthCfg:
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        exchangeAuthCode:
          $ref: '#/components/schemas/OAuthCfg_exchangeAuthCode'
        userInfo:
          $ref: '#/components/schemas/OAuthCfg_userInfo'
        extractLogin:
          description: |
            Json path for login in the exchangeAuthCode or userInfo endpoint response.
            e.g. `access_token.user.id` extracts user login from `{ "access_token": { "user": { "id": "..." } } }`
          example: access_token.user_id
          type: string
        extractPublicData:
          additionalProperties:
            type: string
            x-additionalPropertiesName: public data key
          description: |
            Can fill public data from the exchangeAuthCode or userInfo endpoint response.
          example:
            'photoUrl:': access_token.user_photo_url
            name: access_token.full_name
          type: object
      required:
      - extractLogin
      type: object
      x-order: -1532051357-0
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    PasswordAuthCfg:
      description: "Password authentication. To enable this auth set auth name to\
        \ \"password\" or use \"builtin\": \"password\" param."
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        maxLength:
          default: 256
          description: Max allowed Length of the password.
          format: int32
          type: integer
          example: null
        minLength:
          default: 6
          description: Minimal length of password
          format: int32
          type: integer
          example: null
        requireNumber:
          default: false
          description: Require password to contain at least one digit.
          type: boolean
          example: null
        requireSymbol:
          default: false
          description: "Require password to contain at least one symbol e.g. @, !,\
            \ &..."
          type: boolean
          example: null
        requireUpperCase:
          default: false
          description: This requires password to contain both lowercase and uppercase
            letters.
          type: boolean
          example: null
        forbidCommonPasswords:
          default: false
          description: "Password will be checked against table 1,000,000 of most overused\
            \ passwords."
          type: boolean
          example: null
        forbidLoginAsPassword:
          default: false
          description: "Rejects passwords that match username, email, anything that\
            \ used as a login according to logins config."
          type: boolean
          example: null
        forbidReusingPassword:
          $ref: '#/components/schemas/PasswordHistoryCfg'
        strength:
          additionalProperties:
            $ref: '#/components/schemas/PasswordStrengthRequirements'
          description: |
            Allows to calculate password strength based on mentioned criteria. Requirements will be checked one by one
            until first failed.
          type: object
          example: null
      type: object
      x-order: -49430021-0
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    PasswordHistoryCfg:
      description: Forbids user to change password to the old one. Useful if you force
        user to change password regularly.
      properties:
        passwordHistorySize:
          default: 3
          description: Number of current user passwords to store in database.
          format: int32
          type: integer
          example: null
        passwordHistoryTtl:
          description: "Lifetime for the password. Accepts time string e.g. 1y, 3m,\
            \ 2y 6m, etc."
          type: string
          example: null
      type: object
      x-order: 378192899-2
      example: null
    PasswordStrengthRequirements:
      description: Requirements for password
      properties:
        minLength:
          default: 6
          description: Minimal length of password
          format: int32
          type: integer
          example: null
        requireNumber:
          default: false
          description: Require password to contain at least one digit.
          type: boolean
          example: null
        requireSymbol:
          default: false
          description: "Require password to contain at least one symbol e.g. @, !,\
            \ &..."
          type: boolean
          example: null
        requireUpperCase:
          default: false
          description: This requires password to contain both lowercase and uppercase
            letters.
          type: boolean
          example: null
        forbidCommonPasswords:
          default: false
          description: "Password will be checked against table 1,000,000 of most overused\
            \ passwords."
          type: boolean
          example: null
        forbidLoginAsPassword:
          default: false
          description: "Rejects passwords that match username, email, anything that\
            \ used as a login according to logins config."
          type: boolean
          example: null
      type: object
      x-order: -49430021-1
      example: null
    PostgresCfg:
      properties:
        postgres:
          default: localhost:5432/
          type: string
          example: null
        username:
          default: postgres
          type: string
          example: null
        maxConnections:
          default: 500
          format: int32
          type: integer
          example: null
        password:
          default: postgres
          type: string
          example: null
      type: object
      x-order: 893841315-2
      x-super: '#/components/schemas/JdbcCfg'
      example: null
    QuestionsAuthCfg:
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        lowercase:
          default: true
          description: |-
            Transform user answer to lowercase letters. This allows user still pass a check when he wrote name or city
            with different cases. `false` means strict match, so "John" != "john"
          type: boolean
          example: null
        removeSymbols:
          default: true
          description: Remove all non-letters from user answer.
          type: boolean
          example: null
        removeSpaces:
          default: true
          description: Remove all spaces from user answer.
          type: boolean
          example: null
        minLength:
          default: 3
          description: Min length of answer. Length are checked after all answer transformation.
          format: int32
          type: integer
          example: null
        maxLength:
          default: 256
          description: Max length of answer.
          format: int32
          type: integer
          example: null
        answersRequired:
          default: 2
          description: Min number of answers required to pass this check.
          format: int32
          type: integer
          example: null
        maxAnswers:
          default: 10
          description: Max answers that user can save.
          format: int32
          type: integer
          example: null
      type: object
      x-order: 545691127-0
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    RateLimiterCfg:
      description: Rate limiter configuration
      example:
        parent: parent
        period: 30s
        ip: false
        quota: 7.061401241503109
        alignLoad: false
        userId: true
      properties:
        userId:
          default: true
          description: Create different rate limiters for different users.
          type: boolean
          example: null
        ip:
          default: false
          description: Create different rate limiters for different ips.
          type: boolean
          example: null
        quota:
          default: 1.0
          description: |-
            Total quota available for time period. Quota means "weight" of a request. So quota 1.0 and period 1s
            allows 10 request with weight 0.1 per seconds or 5 request with weight 0.2 per second.
          format: double
          type: number
          example: null
        period:
          description: |
            Quota restoring period
          example: 30s
          type: string
        alignLoad:
          default: false
          description: Insert delays between requests if there are too many simultaneous
            requests.
          type: boolean
          example: null
        parent:
          description: |-
            Allows to combine rate limiters. Let's say rt1 allows 10 reqs per seconds, and rt2 allows 20 reqs per minute.
            If the rt1 has the rt2 as a parent, that means that rt1 allows 10 reqs per seconds but not more than 20 per minute.
          type: string
          x-nullable: true
          example: null
      type: object
      x-order: -1666811215-0
    RedisCfg:
      properties:
        redis:
          items:
            type: string
          type: array
          example: null
        cluster:
          default: false
          type: boolean
          example: null
        database:
          format: int32
          type: integer
          example: null
        user:
          type: string
          x-nullable: true
          example: null
        password:
          type: string
          x-nullable: true
          example: null
        ssl:
          default: false
          type: boolean
          example: null
        maxConnections:
          default: 100
          format: int32
          type: integer
          example: null
      type: object
      x-order: -2007275575-0
      x-super: '#/components/schemas/DbCfg'
      example: null
    RefreshTokenCfg:
      description: |-
        Long-living token used for generation of new access token.
        This is optional. You can set longer access-token lifetime instead.
      example:
        allowReuse: false
        unauthenticatedTtl: 1d
        maxTtl: 1Y
        ttl: 3M
      properties:
        ttl:
          default: 15d
          description: |
            Lifetime for refresh token. 10d, 3M, etc.
          example: 3M
          type: string
        maxTtl:
          default: 3M
          description: |
            Refresh token can be prolonged by refresh.
          example: 1Y
          type: string
        unauthenticatedTtl:
          default: 1h
          description: |
            Lifetime of token for unauthenticated session. Limits time that user has to sign in/up, restoring password etc.
          example: 1d
          type: string
        allowReuse:
          default: false
          description: If false - one refresh token can't be used twice. New refresh
            token will be provided by refresh API.
          type: boolean
          example: null
      type: object
      x-order: -1195634750-5
    RemoteAuthCfg:
      description: Authentication implementation config
      properties:
        remote:
          description: Path to the API that implements plugin.
          type: string
          example: null
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        query:
          additionalProperties:
            type: string
            x-additionalPropertiesName: queryParam
          description: |
            Add query params after `?` symbol in url.
          type: object
          example: null
        headers:
          additionalProperties:
            type: string
            x-additionalPropertiesName: header
          description: |
            Add headers to request.
          type: object
          example: null
        code:
          $ref: '#/components/schemas/CodeCfg'
      required:
      - remote
      type: object
      x-order: 658063406-0
      x-super: '#/components/schemas/AuthAppCfg'
      example: null
    RemoteDbCfg:
      properties:
        remote:
          type: string
          example: null
        query:
          additionalProperties:
            type: string
          type: object
          example: null
        headers:
          additionalProperties:
            type: string
          type: object
          example: null
      required:
      - remote
      type: object
      x-order: 842893688-0
      x-super: '#/components/schemas/DbCfg'
      example: null
    ScopesAuthCfg:
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        scopes:
          items:
            type: string
          type: array
          example: null
      type: object
      x-order: 2741601-2
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    ShAppCfg:
      example:
        entries:
          key:
            editAccount: false
            factorsRequired:
              first:
              - password
              - facebook
              - email
            factorsOptional:
              second:
              - sms
            requiresEntry:
            - requiresEntry
            - requiresEntry
            accessToken:
              cache: true
              ttl: ttl
            ttl: 3M
        healthCheckKey: healthCheckKey
        $schema: ./kntrl.schema.json
        auths:
          email: {}
          password: {}
          facebook:
            builtin: oauth
        http:
          proxy: false
          bind: 127.0.0.1
          port: 9876
        loginRequirements:
          username: "[\\w\\-.]{3,45}"
        rateLimiters:
          key:
            parent: parent
            period: 30s
            ip: false
            quota: 7.061401241503109
            alignLoad: false
            userId: true
        secret: <change_me>
        logins:
        - username
        - facebook
        - email
        db:
          rateLimiter:
            cluster: false
            headers:
              key: headers
            inToken: true
            sqlite: ./sqlite
            query:
              key: query
            remote: remote
            ssl: false
            redis:
            - redis
            - redis
            database: 5
            password: password
            inMemory: true
            mysql: localhost:3306
            mongodb: mongodb
            user: user
            postgres: localhost:5432/
            maxConnections: 2
            username: username
          session:
            cluster: false
            headers:
              key: headers
            inToken: true
            sqlite: ./sqlite
            query:
              key: query
            remote: remote
            ssl: false
            redis:
            - redis
            - redis
            database: 1
            password: password
            inMemory: true
            mysql: localhost:3306
            mongodb: mongodb
            user: user
            postgres: localhost:5432/
            maxConnections: 5
            username: username
          user:
            cluster: false
            headers:
              key: headers
            inToken: true
            sqlite: ./sqlite
            query:
              key: query
            remote: remote
            ssl: false
            redis:
            - redis
            - redis
            database: 0
            password: password
            inMemory: true
            mysql: localhost:3306
            mongodb: mongodb
            user: user
            postgres: localhost:5432/
            maxConnections: 6
            username: username
        i18n:
          default: en
          dir: ./i18n
        token:
          access:
            cache: JWT
            cookie: false
            cacheUnauthenticated: false
            ttl: 1d
          sameUserAgent: true
          refresh:
            allowReuse: false
            unauthenticatedTtl: 1d
            maxTtl: 1Y
            ttl: 3M
      properties:
        http:
          $ref: '#/components/schemas/ShHttpCfg'
        logins:
          description: |+
            Types of logins that can be used for identification.

            If the login type is not specified in the auth config - it will be considered a simple login:
            the user can set any name. E.g. username.

            If the login type is specified in the auth config, this login will be generated by
            the corresponding authenticator. E.g. email, phone or facebook account id.

          example:
          - username
          - facebook
          - email
          items:
            type: string
          type: array
        loginRequirements:
          additionalProperties:
            type: string
            x-additionalPropertiesName: login type
          description: |
            Regexes to validate logins.
          example:
            username: "[\\w\\-.]{3,45}"
          type: object
        auths:
          additionalProperties:
            $ref: '#/components/schemas/ShAppCfg_auths_value'
          description: |+
            List of auth names and auth configs

            To use builtin auths (not a plugin or remote) follow the example:
            - `"password": { ... }` or
            - `"anyAuthName": { "builtin": "password", ... }`

            Available built-in auths:
            - `password`, `email`, `questions`, `ip`, 'totp'
            - (OAuth2 client) `oauth`, `oauth/facebook/openid`, `oauth/google/openid`
            - (Backend integration) `appSecret`
            - (OAuth2 server) 'authorizationCode', 'oauthApp', 'scopes'

          example:
            email: {}
            password: {}
            facebook:
              builtin: oauth
          type: object
        entries:
          additionalProperties:
            $ref: '#/components/schemas/EntryCfg'
          description: |
            List of app entries. Entry usually represents UI used for signing in/up or additional authentication
            before action. E.g.:
            - app: main entry that requests user login/email + password and 2fa (if enabled)
            - api: entry that allows user to generate API keys and connect third-party app
            - action: additional authentication (e.g. code from sms) requested before e.g. payment
          type: object
          example: null
        db:
          $ref: '#/components/schemas/ShDbsCfg'
        token:
          $ref: '#/components/schemas/TokenCfg'
        rateLimiters:
          additionalProperties:
            $ref: '#/components/schemas/RateLimiterCfg'
          description: |
            List of rate limiters
          type: object
          example: null
        secret:
          default: <change_me>
          description: |-
            The key that app uses for RSA certificate generation used for token signature.
            If `null` - app will generate secret automatically during startup.
          type: string
          example: null
        healthCheckKey:
          description: Set this key if you want to restrict access to the health-check.
          type: string
          x-nullable: true
          example: null
        i18n:
          $ref: '#/components/schemas/I18nCfg'
        $schema:
          default: ./kntrl.schema.json
          type: string
          example: null
      type: object
      x-order: -1414553603-0
    ShDbsCfg:
      description: Database connection configs
      example:
        rateLimiter:
          cluster: false
          headers:
            key: headers
          inToken: true
          sqlite: ./sqlite
          query:
            key: query
          remote: remote
          ssl: false
          redis:
          - redis
          - redis
          database: 5
          password: password
          inMemory: true
          mysql: localhost:3306
          mongodb: mongodb
          user: user
          postgres: localhost:5432/
          maxConnections: 2
          username: username
        session:
          cluster: false
          headers:
            key: headers
          inToken: true
          sqlite: ./sqlite
          query:
            key: query
          remote: remote
          ssl: false
          redis:
          - redis
          - redis
          database: 1
          password: password
          inMemory: true
          mysql: localhost:3306
          mongodb: mongodb
          user: user
          postgres: localhost:5432/
          maxConnections: 5
          username: username
        user:
          cluster: false
          headers:
            key: headers
          inToken: true
          sqlite: ./sqlite
          query:
            key: query
          remote: remote
          ssl: false
          redis:
          - redis
          - redis
          database: 0
          password: password
          inMemory: true
          mysql: localhost:3306
          mongodb: mongodb
          user: user
          postgres: localhost:5432/
          maxConnections: 6
          username: username
      properties:
        user:
          $ref: '#/components/schemas/ShDbsCfg_user'
        session:
          $ref: '#/components/schemas/ShDbsCfg_session'
        rateLimiter:
          $ref: '#/components/schemas/ShDbsCfg_rateLimiter'
      type: object
      x-order: -1414553603-2
    ShHttpCfg:
      description: Http server config
      example:
        proxy: false
        bind: 127.0.0.1
        port: 9876
      properties:
        port:
          default: 9876
          description: |
            A port that the server will use to accept http requests
          example: 9876
          format: int32
          type: integer
        bind:
          default: 0.0.0.0
          description: |
            IP address to bind to. Usually 0.0.0.0 to accept for any connection or 127.0.0.1 to accept only localhost
          example: 127.0.0.1
          type: string
        proxy:
          default: false
          description: "If true, X-Forwarded-For header is used to get client's IP\
            \ address"
          type: boolean
          example: null
      type: object
      x-order: -1414553603-1
    SqliteCfg:
      properties:
        username:
          default: ""
          type: string
          example: null
        password:
          default: ""
          type: string
          example: null
        maxConnections:
          default: 500
          format: int32
          type: integer
          example: null
        sqlite:
          default: ./sqlite
          type: string
          example: null
      type: object
      x-order: -1872929936-3
      x-super: '#/components/schemas/JdbcCfg'
      example: null
    TokenCfg:
      description: Token lifetime config.
      example:
        access:
          cache: JWT
          cookie: false
          cacheUnauthenticated: false
          ttl: 1d
        sameUserAgent: true
        refresh:
          allowReuse: false
          unauthenticatedTtl: 1d
          maxTtl: 1Y
          ttl: 3M
      properties:
        access:
          $ref: '#/components/schemas/AccessTokenCfg'
        refresh:
          $ref: '#/components/schemas/RefreshTokenCfg'
        sameUserAgent:
          default: true
          description: Require all request to be made from the same device.
          type: boolean
          example: null
      type: object
      x-order: -1195634750-0
    TokenHandlerCfg:
      properties:
        url:
          description: |
            If access token provided in request, app tries to extract user id from user-info endpoint.
            If null, user info will be extracted from access token
          example: https://example.org/user-info
          type: string
          x-nullable: true
        sendTokenInQuery:
          description: "While executing user-info request, access-token will be sent\
            \ in query param."
          type: string
          x-nullable: true
          example: null
        sendTokenInHeader:
          description: "While executing user-info request, access-token will be sent\
            \ in Authorisation header."
          type: boolean
          example: null
      type: object
      x-order: -1532051357-3
      example: null
    TotpAuthCfg:
      properties:
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        encryptKey:
          default: <change_me>
          type: string
          example: null
      type: object
      x-order: 820555017-1
      x-super: '#/components/schemas/BuiltInAuthCfg'
      example: null
    regex:
      type: string
    UnauthenticatedCode:
      enum:
      - SESSION_EXPIRED
      - ACCESS_DENIED
      - USER_NOT_FOUND
      - TOKEN_EXPIRED
      - UNAUTHENTICATED
      type: string
    ClientErrCode:
      enum:
      - INCORRECT_TOTP_CODE
      - OAUTH_APP_ERR
      - PLUGIN_CLIENT_ERR
      - PASSWORD_IS_INCORRECT
      - PASSWORD_IS_INVALID
      - EMAIL_IS_INCORRECT
      - IP_NEW
      - QUESTIONS_ANSWERS_INCORRECT
      - QUESTIONS_ANSWERS_INVALID
      - SESSION_EXPIRED
      - ACCESS_DENIED
      - USER_NOT_FOUND
      - USER_LOGIN_IS_INVALID
      - USER_LOGIN_ALREADY_TAKEN
      - TOKEN_EXPIRED
      - TOO_MANY_REQS
      - AUTH_IS_NOT_ENABLED
      - AUTH_IS_NOT_CONFIRMED
      - AUTH_REQUIRES_ANOTHER
      - CODE_IS_EXPIRED
      - CODE_TOO_MANY_ATTEMPTS
      - CODE_IS_INCORRECT
      - UNAUTHENTICATED
      type: string
    IntegrationErrCode:
      enum:
      - NO_AUTH_AVAILABLE_FOR_FACTOR
      - INTEGRATION_ERR
      type: string
    ServerErrCode:
      enum:
      - SERVER_ERR
      - PLUGIN_ERR
      type: string
    ErrCode:
      enum:
      - PLUGIN_ERR
      - INCORRECT_TOTP_CODE
      - OAUTH_APP_ERR
      - PLUGIN_CLIENT_ERR
      - PASSWORD_IS_INCORRECT
      - PASSWORD_IS_INVALID
      - EMAIL_IS_INCORRECT
      - IP_NEW
      - QUESTIONS_ANSWERS_INCORRECT
      - QUESTIONS_ANSWERS_INVALID
      - SESSION_EXPIRED
      - ACCESS_DENIED
      - USER_NOT_FOUND
      - USER_LOGIN_IS_INVALID
      - USER_LOGIN_ALREADY_TAKEN
      - TOKEN_EXPIRED
      - TOO_MANY_REQS
      - AUTH_IS_NOT_ENABLED
      - AUTH_IS_NOT_CONFIRMED
      - NO_AUTH_AVAILABLE_FOR_FACTOR
      - AUTH_REQUIRES_ANOTHER
      - CODE_IS_EXPIRED
      - CODE_TOO_MANY_ATTEMPTS
      - CODE_IS_INCORRECT
      - UNAUTHENTICATED
      - SERVER_ERR
      - INTEGRATION_ERR
      - ANY_ERR
      type: string
    Session_data_value:
      additionalProperties: true
      example:
        agent:
        - type: email
          login: john@example.org
        - type: email
          login: john@example.org
        scopes:
        - scopes
        - scopes
      properties:
        agent:
          items:
            $ref: '#/components/schemas/LoginId'
          type: array
          x-nullable: true
          example: null
        scopes:
          items:
            type: string
          type: array
          example: null
      type: object
    AuthData_public:
      additionalProperties: true
      example:
        answersSavedAt:
          key: 1
        redirectUris:
        - redirectUris
        - redirectUris
        email: email
        updatedAt: 6
      properties:
        email:
          description: User email.
          type: string
          example: null
        updatedAt:
          description: Time when password was updated last time.
          format: int64
          type: integer
          example: null
        redirectUris:
          items:
            type: string
          type: array
          x-nullable: true
          example: null
        answersSavedAt:
          additionalProperties:
            format: int64
            type: integer
            x-additionalPropertiesName: question id
          type: object
          example: null
      type: object
    AuthExecRes_resData:
      additionalProperties: true
      example:
        emailSentTo: emailSentTo
        clientId: clientId
        answersSavedAt:
          key: 1
        strength: strength
        correct:
          HOMETOWN: true
          MOTHER_NAME: false
        otpUrl: otpUrl
        authorizationCode: authorizationCode
        secret: secret
        redirectUris:
        - redirectUris
        - redirectUris
        password: password
        ipEncoded: ipEncoded
        clientSecret: clientSecret
        extractedPublicData:
          key: ""
        otpUrlQrCode: otpUrlQrCode
        extractedLogin: extractedLogin
      properties:
        authorizationCode:
          type: string
          example: null
        emailSentTo:
          description: "Shows user email, that was used to send a code. Email will\
            \ be partially hidden."
          type: string
          example: null
        ipEncoded:
          type: string
          example: null
        clientId:
          type: string
          example: null
        redirectUris:
          items:
            type: string
          type: array
          x-nullable: true
          example: null
        clientSecret:
          description: Provided only when generated first time or generated again.
          type: string
          x-nullable: true
          example: null
        extractedLogin:
          type: string
          example: null
        extractedPublicData:
          additionalProperties: true
          description: Data that are available for API.
          type: object
          x-order: -893636857-2
          example: null
        password:
          description: If password was generated by app this field contains generated
            password.
          type: string
          example: null
        strength:
          description: Calculated strength of password. Null means that all checks
            failed.
          type: string
          x-nullable: true
          example: null
        correct:
          additionalProperties:
            type: boolean
            x-additionalPropertiesName: question id
          description: |
            Shows is answer was correct.
          example:
            HOMETOWN: true
            MOTHER_NAME: false
          type: object
        answersSavedAt:
          additionalProperties:
            format: int64
            type: integer
            x-additionalPropertiesName: question id
          description: |
            Date of last update
          type: object
          example: null
        secret:
          description: Base32 SHA-1 key.
          type: string
          example: null
        otpUrl:
          type: string
          example: null
        otpUrlQrCode:
          description: |-
            QR code URL. Use it like this:
            `<img style="image-rendering: pixelated;" width="200" src="<otpUrlQrCode>"/>`
          type: string
          example: null
      type: object
    AuthUserCfg_data:
      description: Data/State of this authenticator
      example:
        public:
          answersSavedAt:
            key: 1
          redirectUris:
          - redirectUris
          - redirectUris
          email: email
          updatedAt: 6
        login: login
      properties:
        public:
          $ref: '#/components/schemas/AuthData_public'
        login:
          description: |-
            If authenticator supports identification, it provides login here. This can be email, phone number,
            facebook account id, etc.
          type: string
          x-nullable: true
          example: null
      required:
      - public
      type: object
      x-nullable: true
      x-super: '#/components/schemas/AuthData'
    AuthenticateReq_authReqs_value:
      additionalProperties: true
      example:
        template: template
        redirectUri: redirectUri
        clientId: clientId
        code: code
        authorizationCode: authorizationCode
        accountName: accountName
        newClientSecret: false
        answers:
          HOMETOWN: London
          MOTHER_NAME: null
        agentLogins:
        - type: email
          login: john@example.org
        - type: email
          login: john@example.org
        secret: secret
        agentAccessToken: agentAccessToken
        accessToken: accessToken
        redirectUris:
        - redirectUris
        - redirectUris
        issuer: issuer
        password: password
        templateParams:
          key: "{}"
        confirmPassword: confirmPassword
        clientSecret: clientSecret
        scopes:
        - scopes
        - scopes
        email: email
      properties:
        secret:
          description: |-
            Base32 SHA-1 key.
            If null, secret is generated automatically.
          type: string
          x-nullable: true
          example: null
        authorizationCode:
          description: If you have authorisation-code - app will exchange it for access-token.
          type: string
          x-nullable: true
          example: null
        agentAccessToken:
          description: Access token of user that will be able to act of behalf of
            current user.
          type: string
          x-order: -2026363309-3
          example: null
        agentLogins:
          description: Login or logins of the user that will get access-token and
            be able to act of behalf of current user.
          items:
            $ref: '#/components/schemas/LoginId'
          type: array
          x-nullable: true
          example: null
        scopes:
          items:
            type: string
          type: array
          x-nullable: true
          example: null
        email:
          description: New email to set.
          type: string
          example: null
        template:
          description: Template to use.
          type: string
          x-nullable: true
          example: null
        templateParams:
          additionalProperties:
            type: object
          description: Template params
          type: object
          x-nullable: true
          example: null
        clientId:
          type: string
          example: null
        clientSecret:
          type: string
          x-nullable: true
          example: null
        redirectUri:
          description: Redirect uri used when requested user login.
          type: string
          x-nullable: true
          example: null
        redirectUris:
          description: "Null - don't validate redirectUrl, empty array will lead to\
            \ all authenticate request fail."
          items:
            type: string
          type: array
          x-nullable: true
          example: null
        newClientSecret:
          default: false
          description: "If previous secret lost or compromised, it allows to generate\
            \ a new one."
          type: boolean
          example: null
        accessToken:
          description: If you have access-token - put it here.
          type: string
          x-nullable: true
          example: null
        password:
          description: New password to set. If null app generates password automatically.
          type: string
          x-nullable: true
          example: null
        confirmPassword:
          description: Password confirmation. If null app doesn't perform this check.
          type: string
          x-nullable: true
          example: null
        answers:
          additionalProperties:
            type: string
            x-additionalPropertiesName: question id
          description: |
            Answers to save. `null` as value removes answer
          example:
            HOMETOWN: London
            MOTHER_NAME: null
          type: object
        code:
          type: string
          example: null
        issuer:
          description: Used only to generate `otpauth://` url.
          type: string
          example: null
        accountName:
          description: Used only to generate `otpauth://` url.
          type: string
          example: null
      type: object
      x-additionalPropertiesName: auth
    EntryCfg_accessToken:
      description: Override access token lifetime for sessions of this entry.
      example:
        cache: true
        ttl: ttl
      properties:
        ttl:
          description: Override access token ttl
          type: string
          x-nullable: true
          example: null
        cache:
          description: Enable or disable client-side caching of access token
          type: boolean
          x-nullable: true
          example: null
      type: object
      x-super: '#/components/schemas/EntryAccessTokenCfg'
    OAuthCfg_exchangeAuthCode:
      description: |-
        If specified, app is able to handle authorizationCode from auth request; exchanges it for
        `access_token` or/and `id_token`
      properties:
        tokenUrl:
          description: |
            Url to get access token by authorisation code.
          example: https://example.org/token
          type: string
        clientId:
          description: "OAuth client id. Client must be registered on OAuth provider\
            \ (e.g. facebook, google)"
          type: string
          x-nullable: true
          example: null
        clientSecret:
          description: OAuth client secret.
          type: string
          x-nullable: true
          example: null
      required:
      - tokenUrl
      type: object
      x-nullable: true
      x-super: '#/components/schemas/ExchangeAuthCodeCfg'
      example: null
    OAuthCfg_userInfo:
      description: "If specified, app will use received access token"
      properties:
        url:
          description: |
            If access token provided in request, app tries to extract user id from user-info endpoint.
            If null, user info will be extracted from access token
          example: https://example.org/user-info
          type: string
          x-nullable: true
        sendTokenInQuery:
          description: "While executing user-info request, access-token will be sent\
            \ in query param."
          type: string
          x-nullable: true
          example: null
        sendTokenInHeader:
          description: "While executing user-info request, access-token will be sent\
            \ in Authorisation header."
          type: boolean
          example: null
      type: object
      x-nullable: true
      x-super: '#/components/schemas/TokenHandlerCfg'
      example: null
    ShAppCfg_auths_value:
      properties:
        remote:
          description: Path to the API that implements plugin.
          type: string
          example: null
        requiresAuth:
          description: |-
            If this is not null, app forbids to add this auth until listed auth enabled.
            - if this a string -> require specified auth to be enabled before this.
            - array of strings -> require any of listed auths to be enabled
            - array of arrays of strings -> works as `[ [ "auth1" and "auth2" ] or [ "auth1" and "auth2" ] ]`
          items:
            items:
              type: string
            type: array
          type: array
          x-nullable: true
          example: null
        skipOnFail:
          default: false
          description: |-
            When this is set to true app will attempt next auth in case of error on current.
            It's works good with IP auth. User can provide both IP auth request and SMS auth request. And SMS will be
            executed only when IP auth is failed.
            If set to false any error on this auth will stop the whole request execution.
          type: boolean
          example: null
        rateLimiter:
          description: Apply rate limiter for this auth.
          type: string
          x-nullable: true
          example: null
        burnQuota:
          default: 0.0
          description: Every auth execution will burn this amount of quota. Takes
            place only when rate limiter is specified
          format: double
          type: number
          example: null
        query:
          additionalProperties:
            type: string
            x-additionalPropertiesName: queryParam
          description: |
            Add query params after `?` symbol in url.
          type: object
          example: null
        headers:
          additionalProperties:
            type: string
            x-additionalPropertiesName: header
          description: |
            Add headers to request.
          type: object
          example: null
        code:
          $ref: '#/components/schemas/CodeCfg'
        codeTtl:
          default: 10m
          description: |
            Authorization code lifetime.
          type: string
          example: null
        scopes:
          items:
            type: string
          type: array
          example: null
        server:
          description: Email server address/IP.
          type: string
          example: null
        sender:
          description: Email address of sender.
          type: string
          example: null
        username:
          description: SMTP username.
          type: string
          x-nullable: true
          example: null
        password:
          description: SMTP password.
          type: string
          x-nullable: true
          example: null
        confirmationUrl:
          description: |-
            If not null, server will create template param `confirmationUrl` that will contain query parameters with
            confirmation code, session id, etc.
          type: string
          x-nullable: true
          example: null
        templates:
          additionalProperties:
            type: string
            x-additionalPropertiesName: templateName
          description: |+
            List of email templates. Key - is name of a template (can be used lately on frontend), value - is path to the template.
            App uses handlebars templates to generate emails. See docs here https://handlebarsjs.com

            Email templates receives `confirmationUrl`, `action`, `user`, `session`, `codeId`, `code`, `codeExpiresInMinutes`,
            `lang`, `headers` as template params, e.g. you can print user id as `{{user.id}}`.

            Template engine also provides `i18n` helper for localisation. E.g. `{{i18n 'confirmationButton' default='Confirm'}}`
            searches key `confirmationButton` in files specified by `i18n.dir` config.

            Use `{{err ERR_CODE msg='Localised message (if null, will be taken from i18n file)' devMsg='dev message'}}` to
            raise an error in a template.

            It allows setting subject of email using `title` html tag, e.g. `<title>Email subject</title>`.

          example:
            welcome: ./welcome.html.hbs
            restoreAccess: ./restore.html.hbs
          type: object
        templateParams:
          additionalProperties:
            type: object
            x-additionalPropertiesName: paramName
          description: |
            Additional params for templates that can be passed in request. Key - is a name of additional parameter, value - is
            a default value for this parameter (when no value present in request)
          type: object
          example: null
        ipBytesToIgnore:
          default: 0
          description: |-
            This allows to drop last bytes of IP. So it allows to authenticate factor when ip has rough match, e.g.
            the same country, same city, or same internet provider.
          format: int32
          type: integer
          example: null
        historySize:
          default: 10
          description: |-
            History of IP addresses user used to sign-in. Authenticated when user attempts to sign in with one of stored
            IPs.
          format: int32
          type: integer
          example: null
        exchangeAuthCode:
          $ref: '#/components/schemas/OAuthCfg_exchangeAuthCode'
        userInfo:
          $ref: '#/components/schemas/OAuthCfg_userInfo'
        extractLogin:
          description: |
            Json path for login in the exchangeAuthCode or userInfo endpoint response.
            e.g. `access_token.user.id` extracts user login from `{ "access_token": { "user": { "id": "..." } } }`
          example: access_token.user_id
          type: string
        extractPublicData:
          additionalProperties:
            type: string
            x-additionalPropertiesName: public data key
          description: |
            Can fill public data from the exchangeAuthCode or userInfo endpoint response.
          example:
            'photoUrl:': access_token.user_photo_url
            name: access_token.full_name
          type: object
        maxLength:
          default: 256
          description: Max length of answer.
          format: int32
          type: integer
          example: null
        minLength:
          default: 3
          description: Min length of answer. Length are checked after all answer transformation.
          format: int32
          type: integer
          example: null
        requireNumber:
          default: false
          description: Require password to contain at least one digit.
          type: boolean
          example: null
        requireSymbol:
          default: false
          description: "Require password to contain at least one symbol e.g. @, !,\
            \ &..."
          type: boolean
          example: null
        requireUpperCase:
          default: false
          description: This requires password to contain both lowercase and uppercase
            letters.
          type: boolean
          example: null
        forbidCommonPasswords:
          default: false
          description: "Password will be checked against table 1,000,000 of most overused\
            \ passwords."
          type: boolean
          example: null
        forbidLoginAsPassword:
          default: false
          description: "Rejects passwords that match username, email, anything that\
            \ used as a login according to logins config."
          type: boolean
          example: null
        forbidReusingPassword:
          $ref: '#/components/schemas/PasswordHistoryCfg'
        strength:
          additionalProperties:
            $ref: '#/components/schemas/PasswordStrengthRequirements'
          description: |
            Allows to calculate password strength based on mentioned criteria. Requirements will be checked one by one
            until first failed.
          type: object
          example: null
        lowercase:
          default: true
          description: |-
            Transform user answer to lowercase letters. This allows user still pass a check when he wrote name or city
            with different cases. `false` means strict match, so "John" != "john"
          type: boolean
          example: null
        removeSymbols:
          default: true
          description: Remove all non-letters from user answer.
          type: boolean
          example: null
        removeSpaces:
          default: true
          description: Remove all spaces from user answer.
          type: boolean
          example: null
        answersRequired:
          default: 2
          description: Min number of answers required to pass this check.
          format: int32
          type: integer
          example: null
        maxAnswers:
          default: 10
          description: Max answers that user can save.
          format: int32
          type: integer
          example: null
        encryptKey:
          default: <change_me>
          type: string
          example: null
      x-additionalPropertiesName: auth
    ShDbsCfg_user:
      description: User database config
      example:
        cluster: false
        headers:
          key: headers
        inToken: true
        sqlite: ./sqlite
        query:
          key: query
        remote: remote
        ssl: false
        redis:
        - redis
        - redis
        database: 0
        password: password
        inMemory: true
        mysql: localhost:3306
        mongodb: mongodb
        user: user
        postgres: localhost:5432/
        maxConnections: 6
        username: username
      properties:
        inMemory:
          default: true
          type: boolean
          example: null
        inToken:
          default: true
          type: boolean
          example: null
        mongodb:
          type: string
          example: null
        database:
          format: int32
          type: integer
          example: null
        redis:
          items:
            type: string
          type: array
          example: null
        cluster:
          default: false
          type: boolean
          example: null
        user:
          type: string
          x-nullable: true
          example: null
        password:
          default: ""
          type: string
          example: null
        ssl:
          default: false
          type: boolean
          example: null
        maxConnections:
          default: 500
          format: int32
          type: integer
          example: null
        remote:
          type: string
          example: null
        query:
          additionalProperties:
            type: string
          type: object
          example: null
        headers:
          additionalProperties:
            type: string
          type: object
          example: null
        mysql:
          default: localhost:3306
          type: string
          example: null
        username:
          default: ""
          type: string
          example: null
        postgres:
          default: localhost:5432/
          type: string
          example: null
        sqlite:
          default: ./sqlite
          type: string
          example: null
    ShDbsCfg_session:
      description: |-
        Session database config.

        If you aren't using cluster, prefer in-memory database.

        You can use in-token to not use database at all. Use it with `token.access.cacheUnauthenticated = true` and
        `token.access.cache != null` values.
      example:
        cluster: false
        headers:
          key: headers
        inToken: true
        sqlite: ./sqlite
        query:
          key: query
        remote: remote
        ssl: false
        redis:
        - redis
        - redis
        database: 1
        password: password
        inMemory: true
        mysql: localhost:3306
        mongodb: mongodb
        user: user
        postgres: localhost:5432/
        maxConnections: 5
        username: username
      properties:
        inMemory:
          default: true
          type: boolean
          example: null
        inToken:
          default: true
          type: boolean
          example: null
        mongodb:
          type: string
          example: null
        database:
          format: int32
          type: integer
          example: null
        redis:
          items:
            type: string
          type: array
          example: null
        cluster:
          default: false
          type: boolean
          example: null
        user:
          type: string
          x-nullable: true
          example: null
        password:
          default: ""
          type: string
          example: null
        ssl:
          default: false
          type: boolean
          example: null
        maxConnections:
          default: 500
          format: int32
          type: integer
          example: null
        remote:
          type: string
          example: null
        query:
          additionalProperties:
            type: string
          type: object
          example: null
        headers:
          additionalProperties:
            type: string
          type: object
          example: null
        mysql:
          default: localhost:3306
          type: string
          example: null
        username:
          default: ""
          type: string
          example: null
        postgres:
          default: localhost:5432/
          type: string
          example: null
        sqlite:
          default: ./sqlite
          type: string
          example: null
    ShDbsCfg_rateLimiter:
      description: "Database for rate-limiters. If you don't use rate-limiter leave\
        \ this empty (`{}`)."
      example:
        cluster: false
        headers:
          key: headers
        inToken: true
        sqlite: ./sqlite
        query:
          key: query
        remote: remote
        ssl: false
        redis:
        - redis
        - redis
        database: 5
        password: password
        inMemory: true
        mysql: localhost:3306
        mongodb: mongodb
        user: user
        postgres: localhost:5432/
        maxConnections: 2
        username: username
      properties:
        inMemory:
          default: true
          type: boolean
          example: null
        inToken:
          default: true
          type: boolean
          example: null
        mongodb:
          type: string
          example: null
        database:
          format: int32
          type: integer
          example: null
        redis:
          items:
            type: string
          type: array
          example: null
        cluster:
          default: false
          type: boolean
          example: null
        user:
          type: string
          x-nullable: true
          example: null
        password:
          default: ""
          type: string
          example: null
        ssl:
          default: false
          type: boolean
          example: null
        maxConnections:
          default: 500
          format: int32
          type: integer
          example: null
        remote:
          type: string
          example: null
        query:
          additionalProperties:
            type: string
          type: object
          example: null
        headers:
          additionalProperties:
            type: string
          type: object
          example: null
        mysql:
          default: localhost:3306
          type: string
          example: null
        username:
          default: ""
          type: string
          example: null
        postgres:
          default: localhost:5432/
          type: string
          example: null
        sqlite:
          default: ./sqlite
          type: string
          example: null
  securitySchemes:
    access-token:
      scheme: Bearer
      type: http
x-tagGroups:
- name: Api
  tags:
  - session
  - token
  - authorisation
  - user
  - server
  - custom-token

